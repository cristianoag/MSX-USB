                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.9.0 #11195 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module hal
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _msx_wait
                             12 	.globl _printf
                             13 	.globl _text_columns
                             14 	.globl _msx_version
                             15 	.globl _supports_80_column_mode
                             16 	.globl _hal_init
                             17 	.globl _hal_deinit
                             18 	.globl _delay_ms
                             19 	.globl _write_command
                             20 	.globl _write_data
                             21 	.globl _read_data
                             22 	.globl _read_status
                             23 	.globl _error
                             24 	.globl _putchar
                             25 	.globl _getchar
                             26 	.globl _pressed_ESC
                             27 	.globl _read_data_multiple
                             28 	.globl _write_data_multiple
                             29 ;--------------------------------------------------------
                             30 ; special function registers
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DATA
                     002D    36 _msx_version	=	0x002d
                     F3AE    37 _text_columns	=	0xf3ae
                             38 ;--------------------------------------------------------
                             39 ; ram data
                             40 ;--------------------------------------------------------
                             41 	.area _INITIALIZED
                             42 ;--------------------------------------------------------
                             43 ; absolute external ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DABS (ABS)
                             46 ;--------------------------------------------------------
                             47 ; global & static initialisations
                             48 ;--------------------------------------------------------
                             49 	.area _HOME
                             50 	.area _GSINIT
                             51 	.area _GSFINAL
                             52 	.area _GSINIT
                             53 ;--------------------------------------------------------
                             54 ; Home
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _HOME
                             58 ;--------------------------------------------------------
                             59 ; code
                             60 ;--------------------------------------------------------
                             61 	.area _CODE
                             62 ;hal.c:10: bool supports_80_column_mode()
                             63 ;	---------------------------------
                             64 ; Function supports_80_column_mode
                             65 ; ---------------------------------
   0000                      66 _supports_80_column_mode::
                             67 ;hal.c:12: return msx_version>=1;
   0000 3A 2D 00      [13]   68 	ld	a,(#_msx_version + 0)
   0003 D6 01         [ 7]   69 	sub	a, #0x01
   0005 3E 00         [ 7]   70 	ld	a, #0x00
   0007 17            [ 4]   71 	rla
   0008 EE 01         [ 7]   72 	xor	a, #0x01
   000A 6F            [ 4]   73 	ld	l, a
                             74 ;hal.c:13: }
   000B C9            [10]   75 	ret
                             76 ;hal.c:15: void hal_init ()
                             77 ;	---------------------------------
                             78 ; Function hal_init
                             79 ; ---------------------------------
   000C                      80 _hal_init::
                             81 ;hal.c:17: text_columns = 40;
   000C 21 AE F3      [10]   82 	ld	hl,#_text_columns + 0
   000F 36 28         [10]   83 	ld	(hl), #0x28
                             84 ;hal.c:19: if (supports_80_column_mode())
   0011 CDr00r00      [17]   85 	call	_supports_80_column_mode
   0014 CB 45         [ 8]   86 	bit	0, l
   0016 28 08         [12]   87 	jr	Z,00102$
                             88 ;hal.c:20: text_columns = 80;
   0018 FD 21 AE F3   [14]   89 	ld	iy, #_text_columns
   001C FD 36 00 50   [19]   90 	ld	0 (iy), #0x50
   0020                      91 00102$:
                             92 ;hal.c:28: __endasm;    
   0020 FD 2A C0 FC   [20]   93 	ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
   0024 DD E5         [15]   94 	push	ix
   0026 DD 21 6C 00   [14]   95 	ld	ix,#0x006c ;address of BIOS routine
   002A CD 1C 00      [17]   96 	call	0x001c ;interslot call
   002D DD E1         [14]   97 	pop	ix
                             98 ;hal.c:29: }
   002F C9            [10]   99 	ret
                            100 ;hal.c:30: void hal_deinit ()
                            101 ;	---------------------------------
                            102 ; Function hal_deinit
                            103 ; ---------------------------------
   0030                     104 _hal_deinit::
                            105 ;hal.c:33: }
   0030 C9            [10]  106 	ret
                            107 ;hal.c:37: void msx_wait (uint16_t times_jiffy)  __z88dk_fastcall __naked
                            108 ;	---------------------------------
                            109 ; Function msx_wait
                            110 ; ---------------------------------
   0031                     111 _msx_wait::
                            112 ;hal.c:52: __endasm; 
   0031 FB            [ 4]  113 	ei
                            114 ;	Wait a determined number of interrupts
                            115 ;	Input: BC = number of 1/framerate interrupts to wait
                            116 ;	Output: (none)
   0032                     117 	    WAIT:
   0032 76            [ 4]  118 	halt	; waits 1/50th or 1/60th of a second till next interrupt
   0033 2B            [ 6]  119 	dec	hl
   0034 7C            [ 4]  120 	ld	a,h
   0035 B5            [ 4]  121 	or	l
   0036 20 FA         [12]  122 	jr	nz, WAIT
   0038 C9            [10]  123 	ret
                            124 ;hal.c:53: }
                            125 ;hal.c:55: void delay_ms (uint16_t milliseconds)
                            126 ;	---------------------------------
                            127 ; Function delay_ms
                            128 ; ---------------------------------
   0039                     129 _delay_ms::
                            130 ;hal.c:57: msx_wait (milliseconds/20);
   0039 21 14 00      [10]  131 	ld	hl, #0x0014
   003C E5            [11]  132 	push	hl
   003D 21 04 00      [10]  133 	ld	hl, #4
   0040 39            [11]  134 	add	hl, sp
   0041 4E            [ 7]  135 	ld	c, (hl)
   0042 23            [ 6]  136 	inc	hl
   0043 46            [ 7]  137 	ld	b, (hl)
   0044 C5            [11]  138 	push	bc
   0045 CDr00r00      [17]  139 	call	__divuint
   0048 F1            [10]  140 	pop	af
   0049 F1            [10]  141 	pop	af
                            142 ;hal.c:58: }
   004A C3r31r00      [10]  143 	jp  _msx_wait
                            144 ;hal.c:60: void write_command (uint8_t command)  __z88dk_fastcall __naked
                            145 ;	---------------------------------
                            146 ; Function write_command
                            147 ; ---------------------------------
   004D                     148 _write_command::
                            149 ;hal.c:66: __endasm;
   004D 7D            [ 4]  150 	ld	a,l
   004E D3 11         [11]  151 	out	(#0x11),a
   0050 C9            [10]  152 	ret
                            153 ;hal.c:67: }
                            154 ;hal.c:68: void write_data (uint8_t data)  __z88dk_fastcall __naked
                            155 ;	---------------------------------
                            156 ; Function write_data
                            157 ; ---------------------------------
   0051                     158 _write_data::
                            159 ;hal.c:74: __endasm;
   0051 7D            [ 4]  160 	ld	a,l
   0052 D3 10         [11]  161 	out	(#0x10),a
   0054 C9            [10]  162 	ret
                            163 ;hal.c:75: }
                            164 ;hal.c:76: uint8_t read_data ()  __z88dk_fastcall __naked
                            165 ;	---------------------------------
                            166 ; Function read_data
                            167 ; ---------------------------------
   0055                     168 _read_data::
                            169 ;hal.c:82: __endasm;
   0055 DB 10         [11]  170 	in	a,(#0x10)
   0057 6F            [ 4]  171 	ld	l,a
   0058 C9            [10]  172 	ret
                            173 ;hal.c:83: }
                            174 ;hal.c:84: uint8_t read_status ()  __z88dk_fastcall __naked
                            175 ;	---------------------------------
                            176 ; Function read_status
                            177 ; ---------------------------------
   0059                     178 _read_status::
                            179 ;hal.c:90: __endasm;
   0059 DB 11         [11]  180 	in	a,(#0x11)
   005B 6F            [ 4]  181 	ld	l,a
   005C C9            [10]  182 	ret
                            183 ;hal.c:91: }
                            184 ;hal.c:93: void error (char* txt)
                            185 ;	---------------------------------
                            186 ; Function error
                            187 ; ---------------------------------
   005D                     188 _error::
                            189 ;hal.c:95: printf (txt);
   005D C1            [10]  190 	pop	bc
   005E E1            [10]  191 	pop	hl
   005F E5            [11]  192 	push	hl
   0060 C5            [11]  193 	push	bc
   0061 E5            [11]  194 	push	hl
   0062 CDr00r00      [17]  195 	call	_printf
   0065 F1            [10]  196 	pop	af
                            197 ;hal.c:99: __endasm;
   0066 F3            [ 4]  198 	di
   0067 76            [ 4]  199 	halt
                            200 ;hal.c:100: }
   0068 C9            [10]  201 	ret
                            202 ;hal.c:102: int putchar (int character)
                            203 ;	---------------------------------
                            204 ; Function putchar
                            205 ; ---------------------------------
   0069                     206 _putchar::
                            207 ;hal.c:114: __endasm;
   0069 21 02 00      [10]  208 	ld	hl, #2
   006C 39            [11]  209 	add	hl, sp ;Bypass the return address of the function
   006D 7E            [ 7]  210 	ld	a, (hl)
   006E FD 2A C0 FC   [20]  211 	ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
   0072 DD E5         [15]  212 	push	ix
   0074 DD 21 A2 00   [14]  213 	ld	ix,#0x00a2 ;address of BIOS routine
   0078 CD 1C 00      [17]  214 	call	0x001c ;interslot call
   007B DD E1         [14]  215 	pop	ix
                            216 ;hal.c:116: return character;
   007D C1            [10]  217 	pop	bc
   007E E1            [10]  218 	pop	hl
   007F E5            [11]  219 	push	hl
   0080 C5            [11]  220 	push	bc
                            221 ;hal.c:117: }
   0081 C9            [10]  222 	ret
                            223 ;hal.c:120: int getchar ()
                            224 ;	---------------------------------
                            225 ; Function getchar
                            226 ; ---------------------------------
   0082                     227 _getchar::
                            228 ;hal.c:131: __endasm;
   0082 FD 2A C0 FC   [20]  229 	ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
   0086 DD E5         [15]  230 	push	ix
   0088 DD 21 9F 00   [14]  231 	ld	ix,#0x009f ;address of BIOS routine
   008C CD 1C 00      [17]  232 	call	0x001c ;interslot call
   008F DD E1         [14]  233 	pop	ix
   0091 26 00         [ 7]  234 	ld	h,#0
   0093 6F            [ 4]  235 	ld	l,a
                            236 ;hal.c:132: }
   0094 C9            [10]  237 	ret
                            238 ;hal.c:134: bool pressed_ESC() __z88dk_fastcall __naked
                            239 ;	---------------------------------
                            240 ; Function pressed_ESC
                            241 ; ---------------------------------
   0095                     242 _pressed_ESC::
                            243 ;hal.c:157: __endasm;
                            244 ;	character in keybuffer?
   0095 FD 2A C0 FC   [20]  245 	ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
   0099 DD E5         [15]  246 	push	ix
   009B DD 21 9C 00   [14]  247 	ld	ix,#0x009c ;address of BIOS routine
   009F CD 1C 00      [17]  248 	call	0x001c ;interslot call
   00A2 DD E1         [14]  249 	pop	ix
   00A4 2E 00         [ 7]  250 	ld	l,#0
   00A6 C8            [11]  251 	ret	z
                            252 ;	yes? lets check if its ESCape
   00A7 FD 2A C0 FC   [20]  253 	ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
   00AB DD E5         [15]  254 	push	ix
   00AD DD 21 9F 00   [14]  255 	ld	ix,#0x009f ;address of BIOS routine
   00B1 CD 1C 00      [17]  256 	call	0x001c ;interslot call
   00B4 DD E1         [14]  257 	pop	ix
   00B6 FE 1B         [ 7]  258 	cp	#27
   00B8 2E 01         [ 7]  259 	ld	l,#1
   00BA C8            [11]  260 	ret	z
   00BB 2E 00         [ 7]  261 	ld	l,#0
   00BD C9            [10]  262 	ret
                            263 ;hal.c:158: }
                            264 ;hal.c:160: void  read_data_multiple (uint8_t* buffer,uint8_t len)
                            265 ;	---------------------------------
                            266 ; Function read_data_multiple
                            267 ; ---------------------------------
   00BE                     268 _read_data_multiple::
                            269 ;hal.c:170: __endasm;
   00BE FD 21 02 00   [14]  270 	ld	iy, #2
   00C2 FD 39         [15]  271 	add	iy,sp
   00C4 FD 46 02      [19]  272 	ld	b,+2(iy)
   00C7 FD 66 01      [19]  273 	ld	h,+1(iy)
   00CA FD 6E 00      [19]  274 	ld	l,+0(iy)
   00CD 0E 10         [ 7]  275 	ld	c, #0x10
   00CF ED B2               276 	.db	0xED,0xB2 ;inir
                            277 ;hal.c:171: }
   00D1 C9            [10]  278 	ret
                            279 ;hal.c:172: void    write_data_multiple (uint8_t* buffer,uint8_t len)
                            280 ;	---------------------------------
                            281 ; Function write_data_multiple
                            282 ; ---------------------------------
   00D2                     283 _write_data_multiple::
                            284 ;hal.c:182: __endasm;
   00D2 FD 21 02 00   [14]  285 	ld	iy, #2
   00D6 FD 39         [15]  286 	add	iy,sp
   00D8 FD 46 02      [19]  287 	ld	b,+2(iy)
   00DB FD 66 01      [19]  288 	ld	h,+1(iy)
   00DE FD 6E 00      [19]  289 	ld	l,+0(iy)
   00E1 0E 10         [ 7]  290 	ld	c, #0x10
   00E3 ED B3               291 	.db	0xED,0xB3 ;otir
                            292 ;hal.c:183: }
   00E5 C9            [10]  293 	ret
                            294 	.area _CODE
                            295 	.area _INITIALIZER
                            296 	.area _CABS (ABS)
