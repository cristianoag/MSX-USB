                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module sdxc
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _putSegFrame1
                             12 	.globl _putSlotFrame2
                             13 	.globl _putSlotFrame1
                             14 	.globl _putRamFrame2
                             15 	.globl _putRamFrame1
                             16 	.globl _memcmp
                             17 	.globl _puts
                             18 	.globl _putchar
                             19 	.globl _usage2
                             20 	.globl _title1
                             21 	.globl _detectInterface
                             22 	.globl _verifySwId
                             23 	.globl _eraseFlash
                             24 	.globl _writeBlock
                             25 ;--------------------------------------------------------
                             26 ; special function registers
                             27 ;--------------------------------------------------------
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DATA
   0000                      32 _i:
   0000                      33 	.ds 2
   0002                      34 _c:
   0002                      35 	.ds 1
   0003                      36 _t1:
   0003                      37 	.ds 1
   0004                      38 _t2:
   0004                      39 	.ds 1
   0005                      40 _flashIdMan:
   0005                      41 	.ds 1
   0006                      42 _flashIdProd:
   0006                      43 	.ds 1
   0007                      44 _alg:
   0007                      45 	.ds 1
   0008                      46 _mySlot:
   0008                      47 	.ds 1
   0009                      48 _source:
   0009                      49 	.ds 2
   000B                      50 _dest:
   000B                      51 	.ds 2
                             52 ;--------------------------------------------------------
                             53 ; ram data
                             54 ;--------------------------------------------------------
                             55 	.area _INITIALIZED
   0000                      56 _title1::
   0000                      57 	.ds 2
   0002                      58 _usage2::
   0002                      59 	.ds 2
   0004                      60 _found:
   0004                      61 	.ds 2
                             62 ;--------------------------------------------------------
                             63 ; absolute external ram data
                             64 ;--------------------------------------------------------
                             65 	.area _DABS (ABS)
                             66 ;--------------------------------------------------------
                             67 ; global & static initialisations
                             68 ;--------------------------------------------------------
                             69 	.area _HOME
                             70 	.area _GSINIT
                             71 	.area _GSFINAL
                             72 	.area _GSINIT
                             73 ;--------------------------------------------------------
                             74 ; Home
                             75 ;--------------------------------------------------------
                             76 	.area _HOME
                             77 	.area _HOME
                             78 ;--------------------------------------------------------
                             79 ; code
                             80 ;--------------------------------------------------------
                             81 	.area _CODE
                             82 ;src\sdxc.c:44: static unsigned char flashIdent(unsigned char manId, unsigned char prodId)
                             83 ;	---------------------------------
                             84 ; Function flashIdent
                             85 ; ---------------------------------
   0000                      86 _flashIdent:
                             87 ;src\sdxc.c:46: if (manId == 0x01) {				// AMD
   0000 21 02 00      [10]   88 	ld	hl, #2+0
   0003 39            [11]   89 	add	hl, sp
   0004 7E            [ 7]   90 	ld	a, (hl)
   0005 3D            [ 4]   91 	dec	a
   0006 20 12         [12]   92 	jr	NZ,00139$
                             93 ;src\sdxc.c:47: if (prodId == 0x20) {			// AM29F010
   0008 21 03 00      [10]   94 	ld	hl, #3+0
   000B 39            [11]   95 	add	hl, sp
   000C 7E            [ 7]   96 	ld	a, (hl)
   000D D6 20         [ 7]   97 	sub	a, #0x20
   000F C2rE2r00      [10]   98 	jp	NZ,00140$
                             99 ;src\sdxc.c:48: alg = ALGBYTE;
   0012 21r07r00      [10]  100 	ld	hl,#_alg + 0
   0015 36 00         [10]  101 	ld	(hl), #0x00
                            102 ;src\sdxc.c:49: return 1;
   0017 2E 01         [ 7]  103 	ld	l, #0x01
   0019 C9            [10]  104 	ret
   001A                     105 00139$:
                            106 ;src\sdxc.c:52: if (prodId == 0x07) {			// AT49F002
   001A 21 03 00      [10]  107 	ld	hl, #3+0
   001D 39            [11]  108 	add	hl, sp
   001E 7E            [ 7]  109 	ld	a, (hl)
   001F D6 07         [ 7]  110 	sub	a, #0x07
   0021 20 03         [12]  111 	jr	NZ, 00222$
   0023 3E 01         [ 7]  112 	ld	a, #0x01
   0025 20                  113 	.db	#0x20
   0026                     114 00222$:
   0026 AF            [ 4]  115 	xor	a, a
   0027                     116 00223$:
   0027 4F            [ 4]  117 	ld	c, a
                            118 ;src\sdxc.c:51: } else if (manId == 0x1F) {			// Atmel
   0028 21 02 00      [10]  119 	ld	hl, #2+0
   002B 39            [11]  120 	add	hl, sp
   002C 7E            [ 7]  121 	ld	a, (hl)
                            122 ;src\sdxc.c:52: if (prodId == 0x07) {			// AT49F002
   002D D6 1F         [ 7]  123 	sub	a,#0x1f
   002F 20 3F         [12]  124 	jr	NZ,00136$
   0031 B1            [ 4]  125 	or	a,c
   0032 28 08         [12]  126 	jr	Z,00112$
                            127 ;src\sdxc.c:53: alg = ALGBYTE;
   0034 21r07r00      [10]  128 	ld	hl,#_alg + 0
   0037 36 00         [10]  129 	ld	(hl), #0x00
                            130 ;src\sdxc.c:54: return 1;
   0039 2E 01         [ 7]  131 	ld	l, #0x01
   003B C9            [10]  132 	ret
   003C                     133 00112$:
                            134 ;src\sdxc.c:55: } else if (prodId == 0x08) {	// AT49F002T
   003C 21 03 00      [10]  135 	ld	hl, #3+0
   003F 39            [11]  136 	add	hl, sp
   0040 7E            [ 7]  137 	ld	a, (hl)
   0041 D6 08         [ 7]  138 	sub	a, #0x08
   0043 20 08         [12]  139 	jr	NZ,00109$
                            140 ;src\sdxc.c:56: alg = ALGBYTE;
   0045 21r07r00      [10]  141 	ld	hl,#_alg + 0
   0048 36 00         [10]  142 	ld	(hl), #0x00
                            143 ;src\sdxc.c:57: return 1;
   004A 2E 01         [ 7]  144 	ld	l, #0x01
   004C C9            [10]  145 	ret
   004D                     146 00109$:
                            147 ;src\sdxc.c:58: } else if (prodId == 0x17) {	// AT49F010
   004D 21 03 00      [10]  148 	ld	hl, #3+0
   0050 39            [11]  149 	add	hl, sp
   0051 7E            [ 7]  150 	ld	a, (hl)
   0052 D6 17         [ 7]  151 	sub	a, #0x17
   0054 20 08         [12]  152 	jr	NZ,00106$
                            153 ;src\sdxc.c:59: alg = ALGBYTE;
   0056 21r07r00      [10]  154 	ld	hl,#_alg + 0
   0059 36 00         [10]  155 	ld	(hl), #0x00
                            156 ;src\sdxc.c:60: return 1;
   005B 2E 01         [ 7]  157 	ld	l, #0x01
   005D C9            [10]  158 	ret
   005E                     159 00106$:
                            160 ;src\sdxc.c:61: } else if (prodId == 0xD5) {	// AT29C010 (page)
   005E 21 03 00      [10]  161 	ld	hl, #3+0
   0061 39            [11]  162 	add	hl, sp
   0062 7E            [ 7]  163 	ld	a, (hl)
   0063 D6 D5         [ 7]  164 	sub	a, #0xd5
   0065 C2rE2r00      [10]  165 	jp	NZ,00140$
                            166 ;src\sdxc.c:62: alg = ALGPAGE;
   0068 21r07r00      [10]  167 	ld	hl,#_alg + 0
   006B 36 01         [10]  168 	ld	(hl), #0x01
                            169 ;src\sdxc.c:63: return 1;
   006D 2E 01         [ 7]  170 	ld	l, #0x01
   006F C9            [10]  171 	ret
   0070                     172 00136$:
                            173 ;src\sdxc.c:65: } else if (manId == 0xBF) {			// SST
   0070 21 02 00      [10]  174 	ld	hl, #2+0
   0073 39            [11]  175 	add	hl, sp
   0074 7E            [ 7]  176 	ld	a, (hl)
                            177 ;src\sdxc.c:66: if (prodId == 0x07) {			// SST29EE010 (page)
   0075 D6 BF         [ 7]  178 	sub	a,#0xbf
   0077 20 2D         [12]  179 	jr	NZ,00133$
   0079 B1            [ 4]  180 	or	a,c
   007A 28 08         [12]  181 	jr	Z,00120$
                            182 ;src\sdxc.c:67: alg = ALGPAGE;
   007C 21r07r00      [10]  183 	ld	hl,#_alg + 0
   007F 36 01         [10]  184 	ld	(hl), #0x01
                            185 ;src\sdxc.c:68: return 1;
   0081 2E 01         [ 7]  186 	ld	l, #0x01
   0083 C9            [10]  187 	ret
   0084                     188 00120$:
                            189 ;src\sdxc.c:69: } else if (prodId == 0xB5) {	// SST39SF010A
   0084 21 03 00      [10]  190 	ld	hl, #3+0
   0087 39            [11]  191 	add	hl, sp
   0088 7E            [ 7]  192 	ld	a, (hl)
   0089 D6 B5         [ 7]  193 	sub	a, #0xb5
   008B 20 08         [12]  194 	jr	NZ,00117$
                            195 ;src\sdxc.c:70: alg = ALGBYTE;
   008D 21r07r00      [10]  196 	ld	hl,#_alg + 0
   0090 36 00         [10]  197 	ld	(hl), #0x00
                            198 ;src\sdxc.c:71: return 1;
   0092 2E 01         [ 7]  199 	ld	l, #0x01
   0094 C9            [10]  200 	ret
   0095                     201 00117$:
                            202 ;src\sdxc.c:72: } else if (prodId == 0xB6) {	// SST39SF020
   0095 21 03 00      [10]  203 	ld	hl, #3+0
   0098 39            [11]  204 	add	hl, sp
   0099 7E            [ 7]  205 	ld	a, (hl)
   009A D6 B6         [ 7]  206 	sub	a, #0xb6
   009C 20 44         [12]  207 	jr	NZ,00140$
                            208 ;src\sdxc.c:73: alg = ALGBYTE;
   009E 21r07r00      [10]  209 	ld	hl,#_alg + 0
   00A1 36 00         [10]  210 	ld	(hl), #0x00
                            211 ;src\sdxc.c:74: return 1;
   00A3 2E 01         [ 7]  212 	ld	l, #0x01
   00A5 C9            [10]  213 	ret
   00A6                     214 00133$:
                            215 ;src\sdxc.c:76: } else if (manId == 0xDA) {			// Winbond
   00A6 21 02 00      [10]  216 	ld	hl, #2+0
   00A9 39            [11]  217 	add	hl, sp
   00AA 7E            [ 7]  218 	ld	a, (hl)
   00AB D6 DA         [ 7]  219 	sub	a, #0xda
   00AD 20 33         [12]  220 	jr	NZ,00140$
                            221 ;src\sdxc.c:77: if (prodId == 0x0B) {			// W49F002UN
   00AF 21 03 00      [10]  222 	ld	hl, #3+0
   00B2 39            [11]  223 	add	hl, sp
   00B3 7E            [ 7]  224 	ld	a, (hl)
   00B4 D6 0B         [ 7]  225 	sub	a, #0x0b
   00B6 20 08         [12]  226 	jr	NZ,00128$
                            227 ;src\sdxc.c:78: alg = ALGBYTE;
   00B8 21r07r00      [10]  228 	ld	hl,#_alg + 0
   00BB 36 00         [10]  229 	ld	(hl), #0x00
                            230 ;src\sdxc.c:79: return 1;
   00BD 2E 01         [ 7]  231 	ld	l, #0x01
   00BF C9            [10]  232 	ret
   00C0                     233 00128$:
                            234 ;src\sdxc.c:80: } else if (prodId == 0x25) {	// W49F002B
   00C0 21 03 00      [10]  235 	ld	hl, #3+0
   00C3 39            [11]  236 	add	hl, sp
   00C4 7E            [ 7]  237 	ld	a, (hl)
   00C5 D6 25         [ 7]  238 	sub	a, #0x25
   00C7 20 08         [12]  239 	jr	NZ,00125$
                            240 ;src\sdxc.c:81: alg = ALGBYTE;
   00C9 21r07r00      [10]  241 	ld	hl,#_alg + 0
   00CC 36 00         [10]  242 	ld	(hl), #0x00
                            243 ;src\sdxc.c:82: return 1;
   00CE 2E 01         [ 7]  244 	ld	l, #0x01
   00D0 C9            [10]  245 	ret
   00D1                     246 00125$:
                            247 ;src\sdxc.c:83: } else if (prodId == 0xA1) {	// W39F010
   00D1 21 03 00      [10]  248 	ld	hl, #3+0
   00D4 39            [11]  249 	add	hl, sp
   00D5 7E            [ 7]  250 	ld	a, (hl)
   00D6 D6 A1         [ 7]  251 	sub	a, #0xa1
   00D8 20 08         [12]  252 	jr	NZ,00140$
                            253 ;src\sdxc.c:84: alg = ALGBYTE;
   00DA 21r07r00      [10]  254 	ld	hl,#_alg + 0
   00DD 36 00         [10]  255 	ld	(hl), #0x00
                            256 ;src\sdxc.c:85: return 1;
   00DF 2E 01         [ 7]  257 	ld	l, #0x01
   00E1 C9            [10]  258 	ret
   00E2                     259 00140$:
                            260 ;src\sdxc.c:88: return 0;
   00E2 2E 00         [ 7]  261 	ld	l, #0x00
                            262 ;src\sdxc.c:89: }
   00E4 C9            [10]  263 	ret
                            264 ;src\sdxc.c:92: static void flashSendCmd(unsigned char cmd)
                            265 ;	---------------------------------
                            266 ; Function flashSendCmd
                            267 ; ---------------------------------
   00E5                     268 _flashSendCmd:
                            269 ;src\sdxc.c:94: poke(0x7000, 0x09);		// Bank 1 in the Frame-2 (4000-7FFF)
   00E5 21 00 70      [10]  270 	ld	hl, #0x7000
   00E8 36 09         [10]  271 	ld	(hl), #0x09
                            272 ;src\sdxc.c:95: poke(0x9555, 0xAA);		// Absolute address 0x05555
   00EA 21 55 95      [10]  273 	ld	hl, #0x9555
   00ED 36 AA         [10]  274 	ld	(hl), #0xaa
                            275 ;src\sdxc.c:96: poke(0x7000, 0x08);		// Bank 0 in the Frame-2 (0000-3FFF)
   00EF 21 00 70      [10]  276 	ld	hl, #0x7000
   00F2 36 08         [10]  277 	ld	(hl), #0x08
                            278 ;src\sdxc.c:97: poke(0xAAAA, 0x55);		// Absolute address 0x02AAA
   00F4 21 AA AA      [10]  279 	ld	hl, #0xaaaa
   00F7 36 55         [10]  280 	ld	(hl), #0x55
                            281 ;src\sdxc.c:98: poke(0x7000, 0x09);		// Bank 1 in the Frame-2 (4000-7FFF)
   00F9 21 00 70      [10]  282 	ld	hl, #0x7000
   00FC 36 09         [10]  283 	ld	(hl), #0x09
                            284 ;src\sdxc.c:99: poke(0x9555, cmd);
   00FE 21 55 95      [10]  285 	ld	hl, #0x9555
   0101 FD 21 02 00   [14]  286 	ld	iy, #2
   0105 FD 39         [15]  287 	add	iy, sp
   0107 FD 7E 00      [19]  288 	ld	a, 0 (iy)
   010A 77            [ 7]  289 	ld	(hl), a
                            290 ;src\sdxc.c:100: }
   010B C9            [10]  291 	ret
                            292 ;src\sdxc.c:103: static void flashEraseSectorSendCmd(unsigned char sector)
                            293 ;	---------------------------------
                            294 ; Function flashEraseSectorSendCmd
                            295 ; ---------------------------------
   010C                     296 _flashEraseSectorSendCmd:
                            297 ;src\sdxc.c:105: poke(0x7000, 0x09);		// Bank 1 in the Frame-2 (4000-7FFF)
   010C 21 00 70      [10]  298 	ld	hl, #0x7000
   010F 36 09         [10]  299 	ld	(hl), #0x09
                            300 ;src\sdxc.c:106: poke(0x9555, 0xAA);		// Absolute address 0x05555
   0111 21 55 95      [10]  301 	ld	hl, #0x9555
   0114 36 AA         [10]  302 	ld	(hl), #0xaa
                            303 ;src\sdxc.c:107: poke(0x7000, 0x08);		// Bank 0 in the Frame-2 (0000-3FFF)
   0116 21 00 70      [10]  304 	ld	hl, #0x7000
   0119 36 08         [10]  305 	ld	(hl), #0x08
                            306 ;src\sdxc.c:108: poke(0xAAAA, 0x55);		// Absolute address 0x02AAA
   011B 21 AA AA      [10]  307 	ld	hl, #0xaaaa
   011E 36 55         [10]  308 	ld	(hl), #0x55
                            309 ;src\sdxc.c:109: poke(0x7000, 0x08 | (sector >> 2));		// Bank x in the Frame-2
   0120 FD 21 02 00   [14]  310 	ld	iy, #2
   0124 FD 39         [15]  311 	add	iy, sp
   0126 FD 4E 00      [19]  312 	ld	c, 0 (iy)
   0129 CB 39         [ 8]  313 	srl	c
   012B CB 39         [ 8]  314 	srl	c
   012D CB D9         [ 8]  315 	set	3, c
   012F 21 00 70      [10]  316 	ld	hl, #0x7000
   0132 71            [ 7]  317 	ld	(hl), c
                            318 ;src\sdxc.c:110: poke(0x8000 | ((sector & 0x03) << 12), FLASHCMD_ERASESECTOR);
   0133 FD 7E 00      [19]  319 	ld	a, 0 (iy)
   0136 E6 03         [ 7]  320 	and	a, #0x03
   0138 07            [ 4]  321 	rlca
   0139 07            [ 4]  322 	rlca
   013A 07            [ 4]  323 	rlca
   013B 07            [ 4]  324 	rlca
   013C E6 F0         [ 7]  325 	and	a, #0xf0
   013E 67            [ 4]  326 	ld	h, a
   013F 2E 00         [ 7]  327 	ld	l, #0x00
   0141 CB FC         [ 8]  328 	set	7, h
   0143 36 30         [10]  329 	ld	(hl), #0x30
                            330 ;src\sdxc.c:111: }
   0145 C9            [10]  331 	ret
                            332 ;src\sdxc.c:115: static unsigned char writeHalfBlock(unsigned char bank)
                            333 ;	---------------------------------
                            334 ; Function writeHalfBlock
                            335 ; ---------------------------------
   0146                     336 _writeHalfBlock:
                            337 ;src\sdxc.c:117: putSlotFrame1(mySlot);
   0146 3Ar08r00      [13]  338 	ld	a, (_mySlot)
   0149 F5            [11]  339 	push	af
   014A 33            [ 6]  340 	inc	sp
   014B CDr00r00      [17]  341 	call	_putSlotFrame1
   014E 33            [ 6]  342 	inc	sp
                            343 ;src\sdxc.c:118: putSlotFrame2(mySlot);
   014F 3Ar08r00      [13]  344 	ld	a, (_mySlot)
   0152 F5            [11]  345 	push	af
   0153 33            [ 6]  346 	inc	sp
   0154 CDr00r00      [17]  347 	call	_putSlotFrame2
   0157 33            [ 6]  348 	inc	sp
                            349 ;src\sdxc.c:119: t1 = 0;
   0158 21r03r00      [10]  350 	ld	hl,#_t1 + 0
   015B 36 00         [10]  351 	ld	(hl), #0x00
                            352 ;src\sdxc.c:120: source = (unsigned char *)0x2000;
   015D 21 00 20      [10]  353 	ld	hl, #0x2000
   0160 22r09r00      [16]  354 	ld	(_source), hl
                            355 ;src\sdxc.c:121: while ((unsigned int)source < 0x4000) {
   0163                     356 00112$:
   0163 2Ar09r00      [16]  357 	ld	hl, (_source)
   0166 7C            [ 4]  358 	ld	a, h
   0167 D6 40         [ 7]  359 	sub	a, #0x40
   0169 D2r2Ar02      [10]  360 	jp	NC, 00115$
                            361 ;src\sdxc.c:122: flashSendCmd(FLASHCMD_WRITEBYTE);
   016C 3E A0         [ 7]  362 	ld	a, #0xa0
   016E F5            [11]  363 	push	af
   016F 33            [ 6]  364 	inc	sp
   0170 CDrE5r00      [17]  365 	call	_flashSendCmd
   0173 33            [ 6]  366 	inc	sp
                            367 ;src\sdxc.c:123: poke(0x7000, bank | 0x08);
   0174 21 02 00      [10]  368 	ld	hl, #2+0
   0177 39            [11]  369 	add	hl, sp
   0178 4E            [ 7]  370 	ld	c, (hl)
   0179 CB D9         [ 8]  371 	set	3, c
   017B 21 00 70      [10]  372 	ld	hl, #0x7000
   017E 71            [ 7]  373 	ld	(hl), c
                            374 ;src\sdxc.c:125: *dest = *source;			// write byte
   017F ED 4Br0Br00   [20]  375 	ld	bc, (_dest)
   0183 2Ar09r00      [16]  376 	ld	hl, (_source)
   0186 5E            [ 7]  377 	ld	e, (hl)
                            378 ;src\sdxc.c:124: if (alg == ALGBYTE) {
   0187 3Ar07r00      [13]  379 	ld	a,(#_alg + 0)
   018A B7            [ 4]  380 	or	a, a
   018B 20 04         [12]  381 	jr	NZ,00103$
                            382 ;src\sdxc.c:125: *dest = *source;			// write byte
   018D 7B            [ 4]  383 	ld	a, e
   018E 02            [ 7]  384 	ld	(bc), a
   018F 18 45         [12]  385 	jr	00104$
   0191                     386 00103$:
                            387 ;src\sdxc.c:127: for (i = 0; i < 127; i++) {	// write 128-byte
   0191 21 00 00      [10]  388 	ld	hl, #0x0000
   0194 22r00r00      [16]  389 	ld	(_i), hl
   0197                     390 00116$:
                            391 ;src\sdxc.c:128: *dest = *source;
   0197 7B            [ 4]  392 	ld	a, e
   0198 02            [ 7]  393 	ld	(bc), a
                            394 ;src\sdxc.c:129: ++dest;
   0199 FD 21r0Br00   [14]  395 	ld	iy, #_dest
   019D FD 34 00      [23]  396 	inc	0 (iy)
   01A0 20 03         [12]  397 	jr	NZ,00168$
   01A2 FD 34 01      [23]  398 	inc	1 (iy)
   01A5                     399 00168$:
                            400 ;src\sdxc.c:130: ++source;
   01A5 FD 21r09r00   [14]  401 	ld	iy, #_source
   01A9 FD 34 00      [23]  402 	inc	0 (iy)
   01AC 20 03         [12]  403 	jr	NZ,00169$
   01AE FD 34 01      [23]  404 	inc	1 (iy)
   01B1                     405 00169$:
                            406 ;src\sdxc.c:127: for (i = 0; i < 127; i++) {	// write 128-byte
   01B1 FD 21r00r00   [14]  407 	ld	iy, #_i
   01B5 FD 34 00      [23]  408 	inc	0 (iy)
   01B8 20 03         [12]  409 	jr	NZ,00170$
   01BA FD 34 01      [23]  410 	inc	1 (iy)
   01BD                     411 00170$:
                            412 ;src\sdxc.c:125: *dest = *source;			// write byte
   01BD ED 4Br0Br00   [20]  413 	ld	bc, (_dest)
   01C1 2Ar09r00      [16]  414 	ld	hl, (_source)
   01C4 5E            [ 7]  415 	ld	e, (hl)
                            416 ;src\sdxc.c:127: for (i = 0; i < 127; i++) {	// write 128-byte
   01C5 FD 7E 00      [19]  417 	ld	a, 0 (iy)
   01C8 D6 7F         [ 7]  418 	sub	a, #0x7f
   01CA FD 7E 01      [19]  419 	ld	a, 1 (iy)
   01CD 17            [ 4]  420 	rla
   01CE 3F            [ 4]  421 	ccf
   01CF 1F            [ 4]  422 	rra
   01D0 DE 80         [ 7]  423 	sbc	a, #0x80
   01D2 38 C3         [12]  424 	jr	C,00116$
                            425 ;src\sdxc.c:132: *dest = *source;
   01D4 7B            [ 4]  426 	ld	a, e
   01D5 02            [ 7]  427 	ld	(bc), a
   01D6                     428 00104$:
                            429 ;src\sdxc.c:134: i = 3800;
   01D6 21 D8 0E      [10]  430 	ld	hl, #0x0ed8
   01D9 22r00r00      [16]  431 	ld	(_i), hl
                            432 ;src\sdxc.c:135: while (--i != 0) {
   01DC                     433 00107$:
   01DC 2Ar00r00      [16]  434 	ld	hl, (_i)
   01DF 2B            [ 6]  435 	dec	hl
   01E0 22r00r00      [16]  436 	ld	(_i), hl
   01E3 FD 21r00r00   [14]  437 	ld	iy, #_i
   01E7 FD 7E 01      [19]  438 	ld	a, 1 (iy)
   01EA FD B6 00      [19]  439 	or	a, 0 (iy)
   01ED 28 0C         [12]  440 	jr	Z,00109$
                            441 ;src\sdxc.c:136: if (*dest == *source) {		// toggle bit, if equal byte was written
   01EF 2Ar0Br00      [16]  442 	ld	hl, (_dest)
   01F2 4E            [ 7]  443 	ld	c, (hl)
   01F3 2Ar09r00      [16]  444 	ld	hl, (_source)
   01F6 46            [ 7]  445 	ld	b, (hl)
   01F7 79            [ 4]  446 	ld	a, c
   01F8 90            [ 4]  447 	sub	a, b
   01F9 20 E1         [12]  448 	jr	NZ,00107$
                            449 ;src\sdxc.c:137: break;
   01FB                     450 00109$:
                            451 ;src\sdxc.c:140: if (i == 0) {					// timeout
   01FB FD 21r00r00   [14]  452 	ld	iy, #_i
   01FF FD 7E 01      [19]  453 	ld	a, 1 (iy)
   0202 FD B6 00      [19]  454 	or	a, 0 (iy)
   0205 20 07         [12]  455 	jr	NZ,00111$
                            456 ;src\sdxc.c:141: t1 = 1;						// error
   0207 21r03r00      [10]  457 	ld	hl,#_t1 + 0
   020A 36 01         [10]  458 	ld	(hl), #0x01
                            459 ;src\sdxc.c:142: goto exit;
   020C 18 1C         [12]  460 	jr	00115$
   020E                     461 00111$:
                            462 ;src\sdxc.c:144: ++dest;
   020E FD 21r0Br00   [14]  463 	ld	iy, #_dest
   0212 FD 34 00      [23]  464 	inc	0 (iy)
   0215 20 03         [12]  465 	jr	NZ,00173$
   0217 FD 34 01      [23]  466 	inc	1 (iy)
   021A                     467 00173$:
                            468 ;src\sdxc.c:145: ++source;
   021A FD 21r09r00   [14]  469 	ld	iy, #_source
   021E FD 34 00      [23]  470 	inc	0 (iy)
   0221 C2r63r01      [10]  471 	jp	NZ,00112$
   0224 FD 34 01      [23]  472 	inc	1 (iy)
   0227 C3r63r01      [10]  473 	jp	00112$
                            474 ;src\sdxc.c:147: exit:
   022A                     475 00115$:
                            476 ;src\sdxc.c:148: putRamFrame1();
   022A CDr00r00      [17]  477 	call	_putRamFrame1
                            478 ;src\sdxc.c:149: putRamFrame2();
   022D CDr00r00      [17]  479 	call	_putRamFrame2
                            480 ;src\sdxc.c:150: return t1;
   0230 FD 21r03r00   [14]  481 	ld	iy, #_t1
   0234 FD 6E 00      [19]  482 	ld	l, 0 (iy)
                            483 ;src\sdxc.c:151: }
   0237 C9            [10]  484 	ret
                            485 ;src\sdxc.c:157: unsigned char detectInterface(unsigned char slot)
                            486 ;	---------------------------------
                            487 ; Function detectInterface
                            488 ; ---------------------------------
   0238                     489 _detectInterface::
                            490 ;src\sdxc.c:159: __asm__("di");
   0238 F3            [ 4]  491 	di
                            492 ;src\sdxc.c:160: putSlotFrame1(slot);
   0239 21 02 00      [10]  493 	ld	hl, #2+0
   023C 39            [11]  494 	add	hl, sp
   023D 7E            [ 7]  495 	ld	a, (hl)
   023E F5            [11]  496 	push	af
   023F 33            [ 6]  497 	inc	sp
   0240 CDr00r00      [17]  498 	call	_putSlotFrame1
   0243 33            [ 6]  499 	inc	sp
                            500 ;src\sdxc.c:161: putSlotFrame2(slot);
   0244 21 02 00      [10]  501 	ld	hl, #2+0
   0247 39            [11]  502 	add	hl, sp
   0248 7E            [ 7]  503 	ld	a, (hl)
   0249 F5            [11]  504 	push	af
   024A 33            [ 6]  505 	inc	sp
   024B CDr00r00      [17]  506 	call	_putSlotFrame2
   024E 33            [ 6]  507 	inc	sp
                            508 ;src\sdxc.c:163: flashSendCmd(FLASHCMD_SOFTIDENTRY);
   024F 3E 90         [ 7]  509 	ld	a, #0x90
   0251 F5            [11]  510 	push	af
   0252 33            [ 6]  511 	inc	sp
   0253 CDrE5r00      [17]  512 	call	_flashSendCmd
   0256 33            [ 6]  513 	inc	sp
                            514 ;src\sdxc.c:164: flashIdMan = peek(0x8000);
   0257 3A 00 80      [13]  515 	ld	a, (#0x8000)
   025A 32r05r00      [13]  516 	ld	(#_flashIdMan + 0),a
                            517 ;src\sdxc.c:165: flashIdProd = peek(0x8001);
   025D 3A 01 80      [13]  518 	ld	a, (#0x8001)
   0260 32r06r00      [13]  519 	ld	(#_flashIdProd + 0),a
                            520 ;src\sdxc.c:166: flashSendCmd(FLASHCMD_SOFTRESET);
   0263 3E F0         [ 7]  521 	ld	a, #0xf0
   0265 F5            [11]  522 	push	af
   0266 33            [ 6]  523 	inc	sp
   0267 CDrE5r00      [17]  524 	call	_flashSendCmd
   026A 33            [ 6]  525 	inc	sp
                            526 ;src\sdxc.c:167: putRamFrame1();
   026B CDr00r00      [17]  527 	call	_putRamFrame1
                            528 ;src\sdxc.c:168: putRamFrame2();
   026E CDr00r00      [17]  529 	call	_putRamFrame2
                            530 ;src\sdxc.c:169: __asm__("ei");
   0271 FB            [ 4]  531 	ei
                            532 ;src\sdxc.c:172: if (flashIdent(flashIdMan, flashIdProd) == 1) {
   0272 3Ar06r00      [13]  533 	ld	a, (_flashIdProd)
   0275 F5            [11]  534 	push	af
   0276 33            [ 6]  535 	inc	sp
   0277 3Ar05r00      [13]  536 	ld	a, (_flashIdMan)
   027A F5            [11]  537 	push	af
   027B 33            [ 6]  538 	inc	sp
   027C CDr00r00      [17]  539 	call	_flashIdent
   027F F1            [10]  540 	pop	af
   0280 2D            [ 4]  541 	dec	l
   0281 20 0B         [12]  542 	jr	NZ,00102$
                            543 ;src\sdxc.c:186: puts(found);
   0283 2Ar04r00      [16]  544 	ld	hl, (_found)
   0286 E5            [11]  545 	push	hl
   0287 CDr00r00      [17]  546 	call	_puts
   028A F1            [10]  547 	pop	af
                            548 ;src\sdxc.c:187: return 1;
   028B 2E 01         [ 7]  549 	ld	l, #0x01
   028D C9            [10]  550 	ret
   028E                     551 00102$:
                            552 ;src\sdxc.c:194: return 0;
   028E 2E 00         [ 7]  553 	ld	l, #0x00
                            554 ;src\sdxc.c:195: }
   0290 C9            [10]  555 	ret
                            556 ;src\sdxc.c:198: unsigned char verifySwId(unsigned char *str)
                            557 ;	---------------------------------
                            558 ; Function verifySwId
                            559 ; ---------------------------------
   0291                     560 _verifySwId::
                            561 ;src\sdxc.c:200: if (memcmp(str, "FBLabs SDXC", 11) == 0) {
   0291 21 0B 00      [10]  562 	ld	hl, #0x000b
   0294 E5            [11]  563 	push	hl
   0295 21rB1r02      [10]  564 	ld	hl, #___str_0
   0298 E5            [11]  565 	push	hl
   0299 21 06 00      [10]  566 	ld	hl, #6
   029C 39            [11]  567 	add	hl, sp
   029D 4E            [ 7]  568 	ld	c, (hl)
   029E 23            [ 6]  569 	inc	hl
   029F 46            [ 7]  570 	ld	b, (hl)
   02A0 C5            [11]  571 	push	bc
   02A1 CDr00r00      [17]  572 	call	_memcmp
   02A4 F1            [10]  573 	pop	af
   02A5 F1            [10]  574 	pop	af
   02A6 F1            [10]  575 	pop	af
   02A7 7D            [ 4]  576 	ld	a, l
   02A8 B7            [ 4]  577 	or	a, a
   02A9 20 03         [12]  578 	jr	NZ,00102$
                            579 ;src\sdxc.c:201: return 1;
   02AB 2E 01         [ 7]  580 	ld	l, #0x01
   02AD C9            [10]  581 	ret
   02AE                     582 00102$:
                            583 ;src\sdxc.c:203: return 0;
   02AE 2E 00         [ 7]  584 	ld	l, #0x00
                            585 ;src\sdxc.c:204: }
   02B0 C9            [10]  586 	ret
   02B1                     587 ___str_0:
   02B1 46 42 4C 61 62 73   588 	.ascii "FBLabs SDXC"
        20 53 44 58 43
   02BC 00                  589 	.db 0x00
                            590 ;src\sdxc.c:207: static void waitErase(void)
                            591 ;	---------------------------------
                            592 ; Function waitErase
                            593 ; ---------------------------------
   02BD                     594 _waitErase:
                            595 ;src\sdxc.c:209: c = 0;
   02BD FD 21r02r00   [14]  596 	ld	iy, #_c
   02C1 FD 36 00 00   [19]  597 	ld	0 (iy), #0x00
                            598 ;src\sdxc.c:210: t2 = 10;
   02C5 FD 21r04r00   [14]  599 	ld	iy, #_t2
   02C9 FD 36 00 0A   [19]  600 	ld	0 (iy), #0x0a
                            601 ;src\sdxc.c:211: while (--t2 != 0) {
   02CD                     602 00103$:
   02CD FD 21r04r00   [14]  603 	ld	iy, #_t2
   02D1 FD 35 00      [23]  604 	dec	0 (iy)
   02D4 FD 7E 00      [19]  605 	ld	a, 0 (iy)
   02D7 B7            [ 4]  606 	or	a, a
   02D8 C8            [11]  607 	ret	Z
                            608 ;src\sdxc.c:212: __asm__("ei");
   02D9 FB            [ 4]  609 	ei
                            610 ;src\sdxc.c:213: __asm__("halt");
   02DA 76            [ 4]  611 	halt
                            612 ;src\sdxc.c:214: __asm__("di");
   02DB F3            [ 4]  613 	di
                            614 ;src\sdxc.c:215: t1 = peek(0x4000);
   02DC 3A 00 40      [13]  615 	ld	a, (#0x4000)
   02DF 32r03r00      [13]  616 	ld	(#_t1 + 0),a
                            617 ;src\sdxc.c:216: t2 = peek(0x4000);
   02E2 3A 00 40      [13]  618 	ld	a, (#0x4000)
   02E5 32r04r00      [13]  619 	ld	(#_t2 + 0),a
                            620 ;src\sdxc.c:217: if (t1 == t2) {
   02E8 3Ar03r00      [13]  621 	ld	a,(#_t1 + 0)
   02EB FD 21r04r00   [14]  622 	ld	iy, #_t2
   02EF FD 96 00      [19]  623 	sub	a, 0 (iy)
   02F2 C8            [11]  624 	ret	Z
                            625 ;src\sdxc.c:220: putchar(ce[c]);
   02F3 FD 21r00r00   [14]  626 	ld	iy, #_ce
   02F7 ED 5Br02r00   [20]  627 	ld	de, (_c)
   02FB 16 00         [ 7]  628 	ld	d, #0x00
   02FD FD 19         [15]  629 	add	iy, de
   02FF FD 46 00      [19]  630 	ld	b, 0 (iy)
   0302 C5            [11]  631 	push	bc
   0303 33            [ 6]  632 	inc	sp
   0304 CDr00r00      [17]  633 	call	_putchar
   0307 33            [ 6]  634 	inc	sp
                            635 ;src\sdxc.c:221: putchar(8);
   0308 3E 08         [ 7]  636 	ld	a, #0x08
   030A F5            [11]  637 	push	af
   030B 33            [ 6]  638 	inc	sp
   030C CDr00r00      [17]  639 	call	_putchar
   030F 33            [ 6]  640 	inc	sp
                            641 ;src\sdxc.c:222: c = (c + 1) & 0x03;
   0310 FD 21r02r00   [14]  642 	ld	iy, #_c
   0314 FD 7E 00      [19]  643 	ld	a, 0 (iy)
   0317 3C            [ 4]  644 	inc	a
   0318 E6 03         [ 7]  645 	and	a, #0x03
   031A FD 77 00      [19]  646 	ld	0 (iy), a
                            647 ;src\sdxc.c:224: }
   031D 18 AE         [12]  648 	jr	00103$
                            649 ;src\sdxc.c:227: void eraseFlash(unsigned char slot)
                            650 ;	---------------------------------
                            651 ; Function eraseFlash
                            652 ; ---------------------------------
   031F                     653 _eraseFlash::
                            654 ;src\sdxc.c:229: puts(erasingFlash);
   031F 2Ar00r00      [16]  655 	ld	hl, (_erasingFlash)
   0322 E5            [11]  656 	push	hl
   0323 CDr00r00      [17]  657 	call	_puts
   0326 F1            [10]  658 	pop	af
                            659 ;src\sdxc.c:230: putSlotFrame1(slot);
   0327 21 02 00      [10]  660 	ld	hl, #2+0
   032A 39            [11]  661 	add	hl, sp
   032B 7E            [ 7]  662 	ld	a, (hl)
   032C F5            [11]  663 	push	af
   032D 33            [ 6]  664 	inc	sp
   032E CDr00r00      [17]  665 	call	_putSlotFrame1
   0331 33            [ 6]  666 	inc	sp
                            667 ;src\sdxc.c:231: putSlotFrame2(slot);
   0332 21 02 00      [10]  668 	ld	hl, #2+0
   0335 39            [11]  669 	add	hl, sp
   0336 7E            [ 7]  670 	ld	a, (hl)
   0337 F5            [11]  671 	push	af
   0338 33            [ 6]  672 	inc	sp
   0339 CDr00r00      [17]  673 	call	_putSlotFrame2
   033C 33            [ 6]  674 	inc	sp
                            675 ;src\sdxc.c:232: for (i = 0; i < 32; i++) {
   033D 21 00 00      [10]  676 	ld	hl, #0x0000
   0340 22r00r00      [16]  677 	ld	(_i), hl
   0343                     678 00102$:
                            679 ;src\sdxc.c:233: flashSendCmd(FLASHCMD_ERASE);
   0343 3E 80         [ 7]  680 	ld	a, #0x80
   0345 F5            [11]  681 	push	af
   0346 33            [ 6]  682 	inc	sp
   0347 CDrE5r00      [17]  683 	call	_flashSendCmd
   034A 33            [ 6]  684 	inc	sp
                            685 ;src\sdxc.c:234: flashEraseSectorSendCmd(i);
   034B 21r00r00      [10]  686 	ld	hl,#_i + 0
   034E 46            [ 7]  687 	ld	b, (hl)
   034F C5            [11]  688 	push	bc
   0350 33            [ 6]  689 	inc	sp
   0351 CDr0Cr01      [17]  690 	call	_flashEraseSectorSendCmd
   0354 33            [ 6]  691 	inc	sp
                            692 ;src\sdxc.c:235: waitErase();
   0355 CDrBDr02      [17]  693 	call	_waitErase
                            694 ;src\sdxc.c:232: for (i = 0; i < 32; i++) {
   0358 FD 21r00r00   [14]  695 	ld	iy, #_i
   035C FD 34 00      [23]  696 	inc	0 (iy)
   035F 20 03         [12]  697 	jr	NZ,00116$
   0361 FD 34 01      [23]  698 	inc	1 (iy)
   0364                     699 00116$:
   0364 FD 7E 00      [19]  700 	ld	a, 0 (iy)
   0367 D6 20         [ 7]  701 	sub	a, #0x20
   0369 FD 7E 01      [19]  702 	ld	a, 1 (iy)
   036C 17            [ 4]  703 	rla
   036D 3F            [ 4]  704 	ccf
   036E 1F            [ 4]  705 	rra
   036F DE 80         [ 7]  706 	sbc	a, #0x80
   0371 38 D0         [12]  707 	jr	C,00102$
                            708 ;src\sdxc.c:237: flashSendCmd(FLASHCMD_SOFTRESET);
   0373 3E F0         [ 7]  709 	ld	a, #0xf0
   0375 F5            [11]  710 	push	af
   0376 33            [ 6]  711 	inc	sp
   0377 CDrE5r00      [17]  712 	call	_flashSendCmd
   037A 33            [ 6]  713 	inc	sp
                            714 ;src\sdxc.c:238: putRamFrame1();
   037B CDr00r00      [17]  715 	call	_putRamFrame1
                            716 ;src\sdxc.c:239: putRamFrame2();
   037E CDr00r00      [17]  717 	call	_putRamFrame2
                            718 ;src\sdxc.c:240: puts(ok0);
   0381 2Ar00r00      [16]  719 	ld	hl, (_ok0)
   0384 E5            [11]  720 	push	hl
   0385 CDr00r00      [17]  721 	call	_puts
   0388 F1            [10]  722 	pop	af
                            723 ;src\sdxc.c:241: }
   0389 C9            [10]  724 	ret
                            725 ;src\sdxc.c:244: unsigned char writeBlock(unsigned char slot, unsigned char segment,
                            726 ;	---------------------------------
                            727 ; Function writeBlock
                            728 ; ---------------------------------
   038A                     729 _writeBlock::
                            730 ;src\sdxc.c:247: mySlot = slot;
   038A 21 02 00      [10]  731 	ld	hl, #2+0
   038D 39            [11]  732 	add	hl, sp
   038E 7E            [ 7]  733 	ld	a, (hl)
   038F 32r08r00      [13]  734 	ld	(#_mySlot + 0),a
                            735 ;src\sdxc.c:248: dest = (unsigned char *)0x8000;
   0392 21 00 80      [10]  736 	ld	hl, #0x8000
   0395 22r0Br00      [16]  737 	ld	(_dest), hl
                            738 ;src\sdxc.c:249: putSegFrame1(segment);
   0398 21 03 00      [10]  739 	ld	hl, #3+0
   039B 39            [11]  740 	add	hl, sp
   039C 7E            [ 7]  741 	ld	a, (hl)
   039D F5            [11]  742 	push	af
   039E 33            [ 6]  743 	inc	sp
   039F CDr00r00      [17]  744 	call	_putSegFrame1
   03A2 33            [ 6]  745 	inc	sp
                            746 ;src\sdxc.c:250: __asm__("push hl");
   03A3 E5            [11]  747 	push	hl
                            748 ;src\sdxc.c:251: __asm__("push de");
   03A4 D5            [11]  749 	push	de
                            750 ;src\sdxc.c:252: __asm__("push bc");
   03A5 C5            [11]  751 	push	bc
                            752 ;src\sdxc.c:253: __asm__("ld hl, #0x4000");
   03A6 21 00 40      [10]  753 	ld	hl, #0x4000
                            754 ;src\sdxc.c:254: __asm__("ld de, #0x2000");
   03A9 11 00 20      [10]  755 	ld	de, #0x2000
                            756 ;src\sdxc.c:255: __asm__("ld bc, #0x2000");
   03AC 01 00 20      [10]  757 	ld	bc, #0x2000
                            758 ;src\sdxc.c:256: __asm__("ldir");
   03AF ED B0         [21]  759 	ldir
                            760 ;src\sdxc.c:257: __asm__("pop bc");
   03B1 C1            [10]  761 	pop	bc
                            762 ;src\sdxc.c:258: __asm__("pop de");
   03B2 D1            [10]  763 	pop	de
                            764 ;src\sdxc.c:259: __asm__("pop hl");
   03B3 E1            [10]  765 	pop	hl
                            766 ;src\sdxc.c:260: putSegFrame1(curSegm);
   03B4 21 04 00      [10]  767 	ld	hl, #4+0
   03B7 39            [11]  768 	add	hl, sp
   03B8 7E            [ 7]  769 	ld	a, (hl)
   03B9 F5            [11]  770 	push	af
   03BA 33            [ 6]  771 	inc	sp
   03BB CDr00r00      [17]  772 	call	_putSegFrame1
   03BE 33            [ 6]  773 	inc	sp
                            774 ;src\sdxc.c:261: if (writeHalfBlock(bank) != 0) {
   03BF 21 05 00      [10]  775 	ld	hl, #5+0
   03C2 39            [11]  776 	add	hl, sp
   03C3 7E            [ 7]  777 	ld	a, (hl)
   03C4 F5            [11]  778 	push	af
   03C5 33            [ 6]  779 	inc	sp
   03C6 CDr46r01      [17]  780 	call	_writeHalfBlock
   03C9 33            [ 6]  781 	inc	sp
   03CA 7D            [ 4]  782 	ld	a, l
   03CB B7            [ 4]  783 	or	a, a
   03CC 28 03         [12]  784 	jr	Z,00102$
                            785 ;src\sdxc.c:262: return 0;
   03CE 2E 00         [ 7]  786 	ld	l, #0x00
   03D0 C9            [10]  787 	ret
   03D1                     788 00102$:
                            789 ;src\sdxc.c:264: putchar('*');
   03D1 3E 2A         [ 7]  790 	ld	a, #0x2a
   03D3 F5            [11]  791 	push	af
   03D4 33            [ 6]  792 	inc	sp
   03D5 CDr00r00      [17]  793 	call	_putchar
   03D8 33            [ 6]  794 	inc	sp
                            795 ;src\sdxc.c:265: putSegFrame1(segment);
   03D9 21 03 00      [10]  796 	ld	hl, #3+0
   03DC 39            [11]  797 	add	hl, sp
   03DD 7E            [ 7]  798 	ld	a, (hl)
   03DE F5            [11]  799 	push	af
   03DF 33            [ 6]  800 	inc	sp
   03E0 CDr00r00      [17]  801 	call	_putSegFrame1
   03E3 33            [ 6]  802 	inc	sp
                            803 ;src\sdxc.c:266: __asm__("push hl");
   03E4 E5            [11]  804 	push	hl
                            805 ;src\sdxc.c:267: __asm__("push de");
   03E5 D5            [11]  806 	push	de
                            807 ;src\sdxc.c:268: __asm__("push bc");
   03E6 C5            [11]  808 	push	bc
                            809 ;src\sdxc.c:269: __asm__("ld hl, #0x6000");
   03E7 21 00 60      [10]  810 	ld	hl, #0x6000
                            811 ;src\sdxc.c:270: __asm__("ld de, #0x2000");
   03EA 11 00 20      [10]  812 	ld	de, #0x2000
                            813 ;src\sdxc.c:271: __asm__("ld bc, #0x2000");
   03ED 01 00 20      [10]  814 	ld	bc, #0x2000
                            815 ;src\sdxc.c:272: __asm__("ldir");
   03F0 ED B0         [21]  816 	ldir
                            817 ;src\sdxc.c:273: __asm__("pop bc");
   03F2 C1            [10]  818 	pop	bc
                            819 ;src\sdxc.c:274: __asm__("pop de");
   03F3 D1            [10]  820 	pop	de
                            821 ;src\sdxc.c:275: __asm__("pop hl");
   03F4 E1            [10]  822 	pop	hl
                            823 ;src\sdxc.c:276: putSegFrame1(curSegm);
   03F5 21 04 00      [10]  824 	ld	hl, #4+0
   03F8 39            [11]  825 	add	hl, sp
   03F9 7E            [ 7]  826 	ld	a, (hl)
   03FA F5            [11]  827 	push	af
   03FB 33            [ 6]  828 	inc	sp
   03FC CDr00r00      [17]  829 	call	_putSegFrame1
   03FF 33            [ 6]  830 	inc	sp
                            831 ;src\sdxc.c:277: if (writeHalfBlock(bank) != 0) {
   0400 21 05 00      [10]  832 	ld	hl, #5+0
   0403 39            [11]  833 	add	hl, sp
   0404 7E            [ 7]  834 	ld	a, (hl)
   0405 F5            [11]  835 	push	af
   0406 33            [ 6]  836 	inc	sp
   0407 CDr46r01      [17]  837 	call	_writeHalfBlock
   040A 33            [ 6]  838 	inc	sp
   040B 7D            [ 4]  839 	ld	a, l
   040C B7            [ 4]  840 	or	a, a
   040D 28 03         [12]  841 	jr	Z,00104$
                            842 ;src\sdxc.c:278: return 0;
   040F 2E 00         [ 7]  843 	ld	l, #0x00
   0411 C9            [10]  844 	ret
   0412                     845 00104$:
                            846 ;src\sdxc.c:280: putchar('*');
   0412 3E 2A         [ 7]  847 	ld	a, #0x2a
   0414 F5            [11]  848 	push	af
   0415 33            [ 6]  849 	inc	sp
   0416 CDr00r00      [17]  850 	call	_putchar
   0419 33            [ 6]  851 	inc	sp
                            852 ;src\sdxc.c:281: return 1;
   041A 2E 01         [ 7]  853 	ld	l, #0x01
                            854 ;src\sdxc.c:282: }
   041C C9            [10]  855 	ret
                            856 	.area _CODE
   041D                     857 ___str_1:
   041D 46 42 4C 61 62 73   858 	.ascii "FBLabs SDXC programmer utility"
        20 53 44 58 43 20
        70 72 6F 67 72 61
        6D 6D 65 72 20 75
        74 69 6C 69 74 79
   043B 0D                  859 	.db 0x0d
   043C 0A                  860 	.db 0x0a
   043D 00                  861 	.db 0x00
   043E                     862 ___str_2:
   043E 20 20 20 20 20 66   863 	.ascii "     fbl-upd /opts <filename.ext>"
        62 6C 2D 75 70 64
        20 2F 6F 70 74 73
        20 3C 66 69 6C 65
        6E 61 6D 65 2E 65
        78 74 3E
   045F 0D                  864 	.db 0x0d
   0460 0A                  865 	.db 0x0a
   0461 45 78 61 6D 70 6C   866 	.ascii "Example: fbl-upd DRIVER.ROM"
        65 3A 20 66 62 6C
        2D 75 70 64 20 44
        52 49 56 45 52 2E
        52 4F 4D
   047C 0D                  867 	.db 0x0d
   047D 0A                  868 	.db 0x0a
   047E 20 20 20 20 20 20   869 	.ascii "         fbl-upd /e"
        20 20 20 66 62 6C
        2D 75 70 64 20 2F
        65
   0491 0D                  870 	.db 0x0d
   0492 0A                  871 	.db 0x0a
   0493 00                  872 	.db 0x00
   0494                     873 ___str_3:
   0494 46 6F 75 6E 64 20   874 	.ascii "Found SDXC interface"
        53 44 58 43 20 69
        6E 74 65 72 66 61
        63 65
   04A8 00                  875 	.db 0x00
                            876 	.area _INITIALIZER
   0000                     877 __xinit__title1:
   0000r1Dr04               878 	.dw ___str_1
   0002                     879 __xinit__usage2:
   0002r3Er04               880 	.dw ___str_2
   0004                     881 __xinit__found:
   0004r94r04               882 	.dw ___str_3
                            883 	.area _CABS (ABS)
