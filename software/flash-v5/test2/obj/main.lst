                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _writeBlock
                             13 	.globl _verifySwId
                             14 	.globl _eraseFlash
                             15 	.globl _detectInterface
                             16 	.globl _putSegFrame1
                             17 	.globl _getCurSegFrame1
                             18 	.globl _allocUserSegment
                             19 	.globl _numMapperPages
                             20 	.globl _mpInit
                             21 	.globl _getDeviceInfo
                             22 	.globl _dos1GetFilesize
                             23 	.globl _lseek
                             24 	.globl _read
                             25 	.globl _close
                             26 	.globl _open
                             27 	.globl _msxdos_init
                             28 	.globl _resetSystem
                             29 	.globl _clearKeyBuf
                             30 	.globl _memcmp
                             31 	.globl _putdec8
                             32 	.globl _puthex8
                             33 	.globl _puts
                             34 	.globl _getchar
                             35 	.globl _putchar
                             36 	.globl _HTIMI
                             37 	.globl _DSKSLT
                             38 	.globl _EXPTBL
                             39 ;--------------------------------------------------------
                             40 ; special function registers
                             41 ;--------------------------------------------------------
                             42 ;--------------------------------------------------------
                             43 ; ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DATA
   0000                      46 _devInfo:
   0000                      47 	.ds 54
   0036                      48 _numMprPages:
   0036                      49 	.ds 1
   0037                      50 _mprSegments:
   0037                      51 	.ds 8
   003F                      52 _curSegm:
   003F                      53 	.ds 1
   0040                      54 _hooks:
   0040                      55 	.ds 1
   0041                      56 _pfi:
   0041                      57 	.ds 1
   0042                      58 _askslot:
   0042                      59 	.ds 1
   0043                      60 _onlyErase:
   0043                      61 	.ds 1
   0044                      62 _resetAtEnd:
   0044                      63 	.ds 1
   0045                      64 _buffer:
   0045                      65 	.ds 64
   0085                      66 _pause:
   0085                      67 	.ds 1
   0086                      68 _c:
   0086                      69 	.ds 1
   0087                      70 _t1:
   0087                      71 	.ds 1
   0088                      72 _t2:
   0088                      73 	.ds 1
   0089                      74 _slot:
   0089                      75 	.ds 1
   008A                      76 _swId:
   008A                      77 	.ds 1
   008B                      78 _isMain:
   008B                      79 	.ds 1
   008C                      80 _isSlave:
   008C                      81 	.ds 1
   008D                      82 _fhandle:
   008D                      83 	.ds 2
   008F                      84 _i:
   008F                      85 	.ds 2
   0091                      86 _r:
   0091                      87 	.ds 2
   0093                      88 _fileSize:
   0093                      89 	.ds 4
   0097                      90 _seekpos:
   0097                      91 	.ds 4
                             92 ;--------------------------------------------------------
                             93 ; ram data
                             94 ;--------------------------------------------------------
                             95 	.area _INITIALIZED
   0000                      96 _EXPTBL::
   0000                      97 	.ds 2
   0002                      98 _DSKSLT::
   0002                      99 	.ds 2
   0004                     100 _HTIMI::
   0004                     101 	.ds 2
                            102 ;--------------------------------------------------------
                            103 ; absolute external ram data
                            104 ;--------------------------------------------------------
                            105 	.area _DABS (ABS)
                            106 ;--------------------------------------------------------
                            107 ; global & static initialisations
                            108 ;--------------------------------------------------------
                            109 	.area _HOME
                            110 	.area _GSINIT
                            111 	.area _GSFINAL
                            112 	.area _GSINIT
                            113 ;--------------------------------------------------------
                            114 ; Home
                            115 ;--------------------------------------------------------
                            116 	.area _HOME
                            117 	.area _HOME
                            118 ;--------------------------------------------------------
                            119 ; code
                            120 ;--------------------------------------------------------
                            121 	.area _CODE
                            122 ;src\main.c:49: static void restoreHooks()
                            123 ;	---------------------------------
                            124 ; Function restoreHooks
                            125 ; ---------------------------------
   0000                     126 _restoreHooks:
                            127 ;src\main.c:52: *HTIMI = hooks[0];
   0000 ED 4Br04r00   [20]  128 	ld	bc, (_HTIMI)
   0004 3Ar40r00      [13]  129 	ld	a, (#_hooks + 0)
   0007 02            [ 7]  130 	ld	(bc), a
                            131 ;src\main.c:54: }
   0008 C9            [10]  132 	ret
                            133 ;src\main.c:57: int main(char** argv, int argc)
                            134 ;	---------------------------------
                            135 ; Function main
                            136 ; ---------------------------------
   0009                     137 _main::
   0009 F5            [11]  138 	push	af
   000A F5            [11]  139 	push	af
                            140 ;src\main.c:59: puts(title1);
   000B 2Ar00r00      [16]  141 	ld	hl, (_title1)
   000E E5            [11]  142 	push	hl
   000F CDr00r00      [17]  143 	call	_puts
   0012 F1            [10]  144 	pop	af
                            145 ;src\main.c:60: puts(title2);
   0013 2Ar00r00      [16]  146 	ld	hl, (_title2)
   0016 E5            [11]  147 	push	hl
   0017 CDr00r00      [17]  148 	call	_puts
   001A F1            [10]  149 	pop	af
                            150 ;src\main.c:62: if (argc < 1) {
   001B FD 21 08 00   [14]  151 	ld	iy, #8
   001F FD 39         [15]  152 	add	iy, sp
   0021 FD 7E 00      [19]  153 	ld	a, 0 (iy)
   0024 D6 01         [ 7]  154 	sub	a, #0x01
   0026 FD 7E 01      [19]  155 	ld	a, 1 (iy)
   0029 17            [ 4]  156 	rla
   002A 3F            [ 4]  157 	ccf
   002B 1F            [ 4]  158 	rra
   002C DE 80         [ 7]  159 	sbc	a, #0x80
   002E 30 1E         [12]  160 	jr	NC,00103$
                            161 ;src\main.c:63: showUsage:
   0030                     162 00101$:
                            163 ;src\main.c:64: puts(usage1);
   0030 2Ar00r00      [16]  164 	ld	hl, (_usage1)
   0033 E5            [11]  165 	push	hl
   0034 CDr00r00      [17]  166 	call	_puts
   0037 F1            [10]  167 	pop	af
                            168 ;src\main.c:65: puts(usage2);
   0038 2Ar00r00      [16]  169 	ld	hl, (_usage2)
   003B E5            [11]  170 	push	hl
   003C CDr00r00      [17]  171 	call	_puts
   003F F1            [10]  172 	pop	af
                            173 ;src\main.c:66: puts(usage3);
   0040 2Ar00r00      [16]  174 	ld	hl, (_usage3)
   0043 E5            [11]  175 	push	hl
   0044 CDr00r00      [17]  176 	call	_puts
   0047 F1            [10]  177 	pop	af
                            178 ;src\main.c:67: return 1;
   0048 21 01 00      [10]  179 	ld	hl, #0x0001
   004B C3r78r08      [10]  180 	jp	00239$
   004E                     181 00103$:
                            182 ;src\main.c:69: pfi = 0;
   004E 21r41r00      [10]  183 	ld	hl,#_pfi + 0
   0051 36 00         [10]  184 	ld	(hl), #0x00
                            185 ;src\main.c:70: onlyErase = 0;
   0053 21r43r00      [10]  186 	ld	hl,#_onlyErase + 0
   0056 36 00         [10]  187 	ld	(hl), #0x00
                            188 ;src\main.c:71: askslot = 0;
   0058 21r42r00      [10]  189 	ld	hl,#_askslot + 0
   005B 36 00         [10]  190 	ld	(hl), #0x00
                            191 ;src\main.c:72: pause = 0;
   005D 21r85r00      [10]  192 	ld	hl,#_pause + 0
   0060 36 00         [10]  193 	ld	(hl), #0x00
                            194 ;src\main.c:73: for (i = 0; i < argc; i++) {
   0062 21 00 00      [10]  195 	ld	hl, #0x0000
   0065 22r8Fr00      [16]  196 	ld	(_i), hl
   0068                     197 00229$:
   0068 21 08 00      [10]  198 	ld	hl, #8
   006B 39            [11]  199 	add	hl, sp
   006C FD 21r8Fr00   [14]  200 	ld	iy, #_i
   0070 FD 7E 00      [19]  201 	ld	a, 0 (iy)
   0073 96            [ 7]  202 	sub	a, (hl)
   0074 FD 7E 01      [19]  203 	ld	a, 1 (iy)
   0077 23            [ 6]  204 	inc	hl
   0078 9E            [ 7]  205 	sbc	a, (hl)
   0079 E2r7Er00      [10]  206 	jp	PO, 00521$
   007C EE 80         [ 7]  207 	xor	a, #0x80
   007E                     208 00521$:
   007E F2r10r01      [10]  209 	jp	P, 00122$
                            210 ;src\main.c:74: if (argv[i][0] == '/') {
   0081 ED 4Br8Fr00   [20]  211 	ld	bc, (_i)
   0085 CB 21         [ 8]  212 	sla	c
   0087 CB 10         [ 8]  213 	rl	b
   0089 21 06 00      [10]  214 	ld	hl, #6
   008C 39            [11]  215 	add	hl, sp
   008D 7E            [ 7]  216 	ld	a, (hl)
   008E 23            [ 6]  217 	inc	hl
   008F 66            [ 7]  218 	ld	h, (hl)
   0090 6F            [ 4]  219 	ld	l, a
   0091 09            [11]  220 	add	hl, bc
   0092 7E            [ 7]  221 	ld	a, (hl)
   0093 23            [ 6]  222 	inc	hl
   0094 66            [ 7]  223 	ld	h, (hl)
   0095 6F            [ 4]  224 	ld	l, a
   0096 7E            [ 7]  225 	ld	a, (hl)
   0097 D6 2F         [ 7]  226 	sub	a, #0x2f
   0099 20 65         [12]  227 	jr	NZ,00230$
                            228 ;src\main.c:75: if (argv[i][1] == 'h' || argv[i][1] == 'H') {
   009B 23            [ 6]  229 	inc	hl
   009C 7E            [ 7]  230 	ld	a, (hl)
   009D FE 68         [ 7]  231 	cp	a, #0x68
   009F 28 04         [12]  232 	jr	Z,00116$
   00A1 FE 48         [ 7]  233 	cp	a, #0x48
   00A3 20 1E         [12]  234 	jr	NZ,00117$
   00A5                     235 00116$:
                            236 ;src\main.c:76: puts(usage1);
   00A5 2Ar00r00      [16]  237 	ld	hl, (_usage1)
   00A8 E5            [11]  238 	push	hl
   00A9 CDr00r00      [17]  239 	call	_puts
   00AC F1            [10]  240 	pop	af
                            241 ;src\main.c:77: puts(usage2);
   00AD 2Ar00r00      [16]  242 	ld	hl, (_usage2)
   00B0 E5            [11]  243 	push	hl
   00B1 CDr00r00      [17]  244 	call	_puts
   00B4 F1            [10]  245 	pop	af
                            246 ;src\main.c:78: puts(usage3);
   00B5 2Ar00r00      [16]  247 	ld	hl, (_usage3)
   00B8 E5            [11]  248 	push	hl
   00B9 CDr00r00      [17]  249 	call	_puts
   00BC F1            [10]  250 	pop	af
                            251 ;src\main.c:79: return 0;
   00BD 21 00 00      [10]  252 	ld	hl, #0x0000
   00C0 C3r78r08      [10]  253 	jp	00239$
   00C3                     254 00117$:
                            255 ;src\main.c:82: ++pfi;
   00C3 21r41r00      [10]  256 	ld	hl,#_pfi + 0
   00C6 4E            [ 7]  257 	ld	c, (hl)
   00C7 0C            [ 4]  258 	inc	c
                            259 ;src\main.c:80: } else if (argv[i][1] == 'e' || argv[i][1] == 'E') {
   00C8 FE 65         [ 7]  260 	cp	a, #0x65
   00CA 28 04         [12]  261 	jr	Z,00112$
   00CC FE 45         [ 7]  262 	cp	a, #0x45
   00CE 20 0B         [12]  263 	jr	NZ,00113$
   00D0                     264 00112$:
                            265 ;src\main.c:81: onlyErase = 1;
   00D0 21r43r00      [10]  266 	ld	hl,#_onlyErase + 0
   00D3 36 01         [10]  267 	ld	(hl), #0x01
                            268 ;src\main.c:82: ++pfi;
   00D5 21r41r00      [10]  269 	ld	hl,#_pfi + 0
   00D8 71            [ 7]  270 	ld	(hl), c
   00D9 18 25         [12]  271 	jr	00230$
   00DB                     272 00113$:
                            273 ;src\main.c:83: } else if (argv[i][1] == 's' || argv[i][1] == 'S') {
   00DB FE 73         [ 7]  274 	cp	a, #0x73
   00DD 28 04         [12]  275 	jr	Z,00108$
   00DF FE 53         [ 7]  276 	cp	a, #0x53
   00E1 20 0B         [12]  277 	jr	NZ,00109$
   00E3                     278 00108$:
                            279 ;src\main.c:84: askslot = 1;
   00E3 21r42r00      [10]  280 	ld	hl,#_askslot + 0
   00E6 36 01         [10]  281 	ld	(hl), #0x01
                            282 ;src\main.c:85: ++pfi;
   00E8 21r41r00      [10]  283 	ld	hl,#_pfi + 0
   00EB 71            [ 7]  284 	ld	(hl), c
   00EC 18 12         [12]  285 	jr	00230$
   00EE                     286 00109$:
                            287 ;src\main.c:86: } else if (argv[i][1] == 'p' || argv[i][1] == 'P') {
   00EE FE 70         [ 7]  288 	cp	a, #0x70
   00F0 28 05         [12]  289 	jr	Z,00104$
   00F2 D6 50         [ 7]  290 	sub	a, #0x50
   00F4 C2r30r00      [10]  291 	jp	NZ,00101$
   00F7                     292 00104$:
                            293 ;src\main.c:87: pause = 1;
   00F7 21r85r00      [10]  294 	ld	hl,#_pause + 0
   00FA 36 01         [10]  295 	ld	(hl), #0x01
                            296 ;src\main.c:88: ++pfi;
   00FC 21r41r00      [10]  297 	ld	hl,#_pfi + 0
   00FF 71            [ 7]  298 	ld	(hl), c
                            299 ;src\main.c:90: goto showUsage;
   0100                     300 00230$:
                            301 ;src\main.c:73: for (i = 0; i < argc; i++) {
   0100 FD 21r8Fr00   [14]  302 	ld	iy, #_i
   0104 FD 34 00      [23]  303 	inc	0 (iy)
   0107 C2r68r00      [10]  304 	jp	NZ,00229$
   010A FD 34 01      [23]  305 	inc	1 (iy)
   010D C3r68r00      [10]  306 	jp	00229$
   0110                     307 00122$:
                            308 ;src\main.c:94: if (pfi == argc && onlyErase == 0) {
   0110 21r41r00      [10]  309 	ld	hl,#_pfi + 0
   0113 4E            [ 7]  310 	ld	c, (hl)
   0114 06 00         [ 7]  311 	ld	b, #0x00
   0116 FD 21 08 00   [14]  312 	ld	iy, #8
   011A FD 39         [15]  313 	add	iy, sp
   011C FD 7E 00      [19]  314 	ld	a, 0 (iy)
   011F 91            [ 4]  315 	sub	a, c
   0120 20 0D         [12]  316 	jr	NZ,00124$
   0122 FD 7E 01      [19]  317 	ld	a, 1 (iy)
   0125 90            [ 4]  318 	sub	a, b
   0126 20 07         [12]  319 	jr	NZ,00124$
   0128 3Ar43r00      [13]  320 	ld	a,(#_onlyErase + 0)
   012B B7            [ 4]  321 	or	a, a
   012C CAr30r00      [10]  322 	jp	Z, 00101$
                            323 ;src\main.c:95: goto showUsage;
   012F                     324 00124$:
                            325 ;src\main.c:99: hooks[0] = *HTIMI;
   012F 01r40r00      [10]  326 	ld	bc, #_hooks+0
   0132 2Ar04r00      [16]  327 	ld	hl, (_HTIMI)
   0135 7E            [ 7]  328 	ld	a, (hl)
   0136 02            [ 7]  329 	ld	(bc), a
                            330 ;src\main.c:102: *HTIMI = 0xC9;
   0137 2Ar04r00      [16]  331 	ld	hl, (_HTIMI)
   013A 36 C9         [10]  332 	ld	(hl), #0xc9
                            333 ;src\main.c:105: if (askslot == 1) {
   013C 3Ar42r00      [13]  334 	ld	a,(#_askslot + 0)
   013F 3D            [ 4]  335 	dec	a
   0140 C2r0Er02      [10]  336 	jp	NZ,00157$
                            337 ;src\main.c:106: puts(whatslot);
   0143 2Ar00r00      [16]  338 	ld	hl, (_whatslot)
   0146 E5            [11]  339 	push	hl
   0147 CDr00r00      [17]  340 	call	_puts
   014A F1            [10]  341 	pop	af
                            342 ;src\main.c:107: while(1) {
   014B                     343 00130$:
                            344 ;src\main.c:108: c = getchar();
   014B CDr00r00      [17]  345 	call	_getchar
   014E FD 21r86r00   [14]  346 	ld	iy, #_c
   0152 FD 75 00      [19]  347 	ld	0 (iy), l
                            348 ;src\main.c:109: if (c >= '0' && c <= '3') {
   0155 FD 7E 00      [19]  349 	ld	a, 0 (iy)
   0158 D6 30         [ 7]  350 	sub	a, #0x30
   015A 38 EF         [12]  351 	jr	C,00130$
   015C 3E 33         [ 7]  352 	ld	a, #0x33
   015E FD 96 00      [19]  353 	sub	a, 0 (iy)
   0161 38 E8         [12]  354 	jr	C,00130$
                            355 ;src\main.c:113: putchar(c);
   0163 3Ar86r00      [13]  356 	ld	a, (_c)
   0166 F5            [11]  357 	push	af
   0167 33            [ 6]  358 	inc	sp
   0168 CDr00r00      [17]  359 	call	_putchar
   016B 33            [ 6]  360 	inc	sp
                            361 ;src\main.c:114: puts(crlf);
   016C 2Ar00r00      [16]  362 	ld	hl, (_crlf)
   016F E5            [11]  363 	push	hl
   0170 CDr00r00      [17]  364 	call	_puts
   0173 F1            [10]  365 	pop	af
                            366 ;src\main.c:115: slot = c - '0';
   0174 3Ar86r00      [13]  367 	ld	a,(#_c + 0)
   0177 21r89r00      [10]  368 	ld	hl, #_slot
   017A C6 D0         [ 7]  369 	add	a, #0xd0
   017C 77            [ 7]  370 	ld	(hl), a
                            371 ;src\main.c:116: if ((*(EXPTBL+slot) & 0x80) == 0x80) {
   017D FD 2Ar00r00   [20]  372 	ld	iy, (_EXPTBL)
   0181 ED 5Br89r00   [20]  373 	ld	de, (_slot)
   0185 16 00         [ 7]  374 	ld	d, #0x00
   0187 FD 19         [15]  375 	add	iy, de
   0189 FD 7E 00      [19]  376 	ld	a, 0 (iy)
   018C E6 80         [ 7]  377 	and	a, #0x80
   018E 4F            [ 4]  378 	ld	c, a
   018F 06 00         [ 7]  379 	ld	b, #0x00
   0191 79            [ 4]  380 	ld	a, c
   0192 D6 80         [ 7]  381 	sub	a, #0x80
   0194 B0            [ 4]  382 	or	a, b
   0195 20 5A         [12]  383 	jr	NZ,00139$
                            384 ;src\main.c:117: puts(whatsubslot);
   0197 2Ar00r00      [16]  385 	ld	hl, (_whatsubslot)
   019A E5            [11]  386 	push	hl
   019B CDr00r00      [17]  387 	call	_puts
   019E F1            [10]  388 	pop	af
                            389 ;src\main.c:118: while(1) {
   019F                     390 00136$:
                            391 ;src\main.c:119: c = getchar();
   019F CDr00r00      [17]  392 	call	_getchar
   01A2 FD 21r86r00   [14]  393 	ld	iy, #_c
   01A6 FD 75 00      [19]  394 	ld	0 (iy), l
                            395 ;src\main.c:120: if (c >= '0' && c <= '3') {
   01A9 FD 7E 00      [19]  396 	ld	a, 0 (iy)
   01AC D6 30         [ 7]  397 	sub	a, #0x30
   01AE 38 EF         [12]  398 	jr	C,00136$
   01B0 3E 33         [ 7]  399 	ld	a, #0x33
   01B2 FD 96 00      [19]  400 	sub	a, 0 (iy)
   01B5 38 E8         [12]  401 	jr	C,00136$
                            402 ;src\main.c:124: putchar(c);
   01B7 3Ar86r00      [13]  403 	ld	a, (_c)
   01BA F5            [11]  404 	push	af
   01BB 33            [ 6]  405 	inc	sp
   01BC CDr00r00      [17]  406 	call	_putchar
   01BF 33            [ 6]  407 	inc	sp
                            408 ;src\main.c:125: puts(crlf);
   01C0 2Ar00r00      [16]  409 	ld	hl, (_crlf)
   01C3 E5            [11]  410 	push	hl
   01C4 CDr00r00      [17]  411 	call	_puts
   01C7 F1            [10]  412 	pop	af
                            413 ;src\main.c:126: c -= '0';
   01C8 FD 21r86r00   [14]  414 	ld	iy, #_c
   01CC FD 7E 00      [19]  415 	ld	a, 0 (iy)
   01CF 21r86r00      [10]  416 	ld	hl, #_c
   01D2 C6 D0         [ 7]  417 	add	a, #0xd0
   01D4 77            [ 7]  418 	ld	(hl), a
                            419 ;src\main.c:127: slot |= 0x80 | (c << 2);
   01D5 FD 7E 00      [19]  420 	ld	a, 0 (iy)
   01D8 87            [ 4]  421 	add	a, a
   01D9 87            [ 4]  422 	add	a, a
   01DA 4F            [ 4]  423 	ld	c, a
   01DB 17            [ 4]  424 	rla
   01DC 9F            [ 4]  425 	sbc	a, a
   01DD 47            [ 4]  426 	ld	b, a
   01DE CB F9         [ 8]  427 	set	7, c
   01E0 FD 21r89r00   [14]  428 	ld	iy, #_slot
   01E4 FD 5E 00      [19]  429 	ld	e, 0 (iy)
   01E7 16 00         [ 7]  430 	ld	d, #0x00
   01E9 79            [ 4]  431 	ld	a, c
   01EA B3            [ 4]  432 	or	a, e
   01EB 4F            [ 4]  433 	ld	c, a
   01EC 78            [ 4]  434 	ld	a, b
   01ED B2            [ 4]  435 	or	a, d
   01EE FD 71 00      [19]  436 	ld	0 (iy), c
   01F1                     437 00139$:
                            438 ;src\main.c:129: if (detectInterface(slot) == 0) {
   01F1 3Ar89r00      [13]  439 	ld	a, (_slot)
   01F4 F5            [11]  440 	push	af
   01F5 33            [ 6]  441 	inc	sp
   01F6 CDr00r00      [17]  442 	call	_detectInterface
   01F9 33            [ 6]  443 	inc	sp
   01FA 7D            [ 4]  444 	ld	a, l
   01FB B7            [ 4]  445 	or	a, a
   01FC 20 05         [12]  446 	jr	NZ,00141$
                            447 ;src\main.c:130: slot = 0xFF;
   01FE 21r89r00      [10]  448 	ld	hl,#_slot + 0
   0201 36 FF         [10]  449 	ld	(hl), #0xff
   0203                     450 00141$:
                            451 ;src\main.c:132: puts(crlf);
   0203 2Ar00r00      [16]  452 	ld	hl, (_crlf)
   0206 E5            [11]  453 	push	hl
   0207 CDr00r00      [17]  454 	call	_puts
   020A F1            [10]  455 	pop	af
   020B C3rE7r02      [10]  456 	jp	00158$
   020E                     457 00157$:
                            458 ;src\main.c:135: puts(searching);
   020E 2Ar00r00      [16]  459 	ld	hl, (_searching)
   0211 E5            [11]  460 	push	hl
   0212 CDr00r00      [17]  461 	call	_puts
   0215 F1            [10]  462 	pop	af
                            463 ;src\main.c:136: slot = (*EXPTBL) & 0x80;
   0216 2Ar00r00      [16]  464 	ld	hl, (_EXPTBL)
   0219 7E            [ 7]  465 	ld	a, (hl)
   021A E6 80         [ 7]  466 	and	a, #0x80
   021C 32r89r00      [13]  467 	ld	(#_slot + 0),a
                            468 ;src\main.c:137: while (1) {
   021F                     469 00154$:
                            470 ;src\main.c:138: if (slot == 0x8F || slot == 0x03) {
   021F FD 21r89r00   [14]  471 	ld	iy, #_slot
   0223 FD 7E 00      [19]  472 	ld	a, 0 (iy)
   0226 D6 8F         [ 7]  473 	sub	a, #0x8f
   0228 28 07         [12]  474 	jr	Z,00142$
   022A FD 7E 00      [19]  475 	ld	a, 0 (iy)
   022D D6 03         [ 7]  476 	sub	a, #0x03
   022F 20 08         [12]  477 	jr	NZ,00143$
   0231                     478 00142$:
                            479 ;src\main.c:139: slot = 0xFF;
   0231 21r89r00      [10]  480 	ld	hl,#_slot + 0
   0234 36 FF         [10]  481 	ld	(hl), #0xff
                            482 ;src\main.c:140: break;
   0236 C3rE7r02      [10]  483 	jp	00158$
   0239                     484 00143$:
                            485 ;src\main.c:142: if (detectInterface(slot) == 1) {
   0239 3Ar89r00      [13]  486 	ld	a, (_slot)
   023C F5            [11]  487 	push	af
   023D 33            [ 6]  488 	inc	sp
   023E CDr00r00      [17]  489 	call	_detectInterface
   0241 33            [ 6]  490 	inc	sp
   0242 2D            [ 4]  491 	dec	l
   0243 20 4A         [12]  492 	jr	NZ,00148$
                            493 ;src\main.c:143: puts(found3);
   0245 2Ar00r00      [16]  494 	ld	hl, (_found3)
   0248 E5            [11]  495 	push	hl
   0249 CDr00r00      [17]  496 	call	_puts
   024C F1            [10]  497 	pop	af
                            498 ;src\main.c:144: putdec8(slot & 0x03);
   024D 3Ar89r00      [13]  499 	ld	a,(#_slot + 0)
   0250 E6 03         [ 7]  500 	and	a, #0x03
   0252 F5            [11]  501 	push	af
   0253 33            [ 6]  502 	inc	sp
   0254 CDr00r00      [17]  503 	call	_putdec8
   0257 33            [ 6]  504 	inc	sp
                            505 ;src\main.c:145: if ((slot & 0x80) == 0x80) {
   0258 3Ar89r00      [13]  506 	ld	a,(#_slot + 0)
   025B E6 80         [ 7]  507 	and	a, #0x80
   025D 4F            [ 4]  508 	ld	c, a
   025E 06 00         [ 7]  509 	ld	b, #0x00
   0260 79            [ 4]  510 	ld	a, c
   0261 D6 80         [ 7]  511 	sub	a, #0x80
   0263 B0            [ 4]  512 	or	a, b
   0264 20 1F         [12]  513 	jr	NZ,00146$
                            514 ;src\main.c:146: putchar('.');
   0266 3E 2E         [ 7]  515 	ld	a, #0x2e
   0268 F5            [11]  516 	push	af
   0269 33            [ 6]  517 	inc	sp
   026A CDr00r00      [17]  518 	call	_putchar
   026D 33            [ 6]  519 	inc	sp
                            520 ;src\main.c:147: putdec8((slot & 0x0C) >> 2);
   026E 3Ar89r00      [13]  521 	ld	a,(#_slot + 0)
   0271 E6 0C         [ 7]  522 	and	a, #0x0c
   0273 4F            [ 4]  523 	ld	c, a
   0274 06 00         [ 7]  524 	ld	b, #0x00
   0276 CB 28         [ 8]  525 	sra	b
   0278 CB 19         [ 8]  526 	rr	c
   027A CB 28         [ 8]  527 	sra	b
   027C CB 19         [ 8]  528 	rr	c
   027E 41            [ 4]  529 	ld	b, c
   027F C5            [11]  530 	push	bc
   0280 33            [ 6]  531 	inc	sp
   0281 CDr00r00      [17]  532 	call	_putdec8
   0284 33            [ 6]  533 	inc	sp
   0285                     534 00146$:
                            535 ;src\main.c:149: puts(crlf);
   0285 2Ar00r00      [16]  536 	ld	hl, (_crlf)
   0288 E5            [11]  537 	push	hl
   0289 CDr00r00      [17]  538 	call	_puts
   028C F1            [10]  539 	pop	af
                            540 ;src\main.c:150: break;
   028D 18 58         [12]  541 	jr	00158$
   028F                     542 00148$:
                            543 ;src\main.c:153: if (slot & 0x80) {
   028F 3Ar89r00      [13]  544 	ld	a,(#_slot + 0)
   0292 07            [ 4]  545 	rlca
   0293 30 1D         [12]  546 	jr	NC,00152$
                            547 ;src\main.c:154: if ((slot & 0x0C) != 0x0C) {
   0295 FD 21r89r00   [14]  548 	ld	iy, #_slot
   0299 FD 7E 00      [19]  549 	ld	a, 0 (iy)
   029C E6 0C         [ 7]  550 	and	a, #0x0c
   029E 4F            [ 4]  551 	ld	c, a
   029F 06 00         [ 7]  552 	ld	b, #0x00
   02A1 79            [ 4]  553 	ld	a, c
   02A2 D6 0C         [ 7]  554 	sub	a, #0x0c
   02A4 B0            [ 4]  555 	or	a, b
   02A5 28 0B         [12]  556 	jr	Z,00152$
                            557 ;src\main.c:155: slot += 0x04;
   02A7 FD 7E 00      [19]  558 	ld	a, 0 (iy)
   02AA C6 04         [ 7]  559 	add	a, #0x04
   02AC FD 77 00      [19]  560 	ld	0 (iy), a
                            561 ;src\main.c:156: continue;
   02AF C3r1Fr02      [10]  562 	jp	00154$
   02B2                     563 00152$:
                            564 ;src\main.c:159: slot = (slot & 0x03) + 1;
   02B2 FD 21r89r00   [14]  565 	ld	iy, #_slot
   02B6 FD 7E 00      [19]  566 	ld	a, 0 (iy)
   02B9 E6 03         [ 7]  567 	and	a, #0x03
   02BB 3C            [ 4]  568 	inc	a
   02BC FD 77 00      [19]  569 	ld	0 (iy), a
                            570 ;src\main.c:160: slot |= (*(EXPTBL+slot)) & 0x80;
   02BF FD 2Ar00r00   [20]  571 	ld	iy, (_EXPTBL)
   02C3 ED 5Br89r00   [20]  572 	ld	de, (_slot)
   02C7 16 00         [ 7]  573 	ld	d, #0x00
   02C9 FD 19         [15]  574 	add	iy, de
   02CB FD 7E 00      [19]  575 	ld	a, 0 (iy)
   02CE E6 80         [ 7]  576 	and	a, #0x80
   02D0 4F            [ 4]  577 	ld	c, a
   02D1 06 00         [ 7]  578 	ld	b, #0x00
   02D3 FD 21r89r00   [14]  579 	ld	iy, #_slot
   02D7 FD 5E 00      [19]  580 	ld	e, 0 (iy)
   02DA 16 00         [ 7]  581 	ld	d, #0x00
   02DC 79            [ 4]  582 	ld	a, c
   02DD B3            [ 4]  583 	or	a, e
   02DE 4F            [ 4]  584 	ld	c, a
   02DF 78            [ 4]  585 	ld	a, b
   02E0 B2            [ 4]  586 	or	a, d
   02E1 FD 71 00      [19]  587 	ld	0 (iy), c
   02E4 C3r1Fr02      [10]  588 	jp	00154$
   02E7                     589 00158$:
                            590 ;src\main.c:164: if (slot == 0xFF) {
   02E7 3Ar89r00      [13]  591 	ld	a,(#_slot + 0)
   02EA 3C            [ 4]  592 	inc	a
   02EB 20 11         [12]  593 	jr	NZ,00160$
                            594 ;src\main.c:165: restoreHooks();
   02ED CDr00r00      [17]  595 	call	_restoreHooks
                            596 ;src\main.c:166: puts(notfound);
   02F0 2Ar00r00      [16]  597 	ld	hl, (_notfound)
   02F3 E5            [11]  598 	push	hl
   02F4 CDr00r00      [17]  599 	call	_puts
   02F7 F1            [10]  600 	pop	af
                            601 ;src\main.c:167: return 4;
   02F8 21 04 00      [10]  602 	ld	hl, #0x0004
   02FB C3r78r08      [10]  603 	jp	00239$
   02FE                     604 00160$:
                            605 ;src\main.c:171: msxdos_init();
   02FE CDr00r00      [17]  606 	call	_msxdos_init
                            607 ;src\main.c:174: if (dosversion < 2 || *DSKSLT == slot) {
   0301 3Ar00r00      [13]  608 	ld	a,(#_dosversion + 0)
   0304 D6 02         [ 7]  609 	sub	a, #0x02
   0306 38 0A         [12]  610 	jr	C,00161$
   0308 2Ar02r00      [16]  611 	ld	hl, (_DSKSLT)
   030B 4E            [ 7]  612 	ld	c, (hl)
   030C 3Ar89r00      [13]  613 	ld	a,(#_slot + 0)
   030F 91            [ 4]  614 	sub	a, c
   0310 20 07         [12]  615 	jr	NZ,00162$
   0312                     616 00161$:
                            617 ;src\main.c:175: isMain = 1;
   0312 21r8Br00      [10]  618 	ld	hl,#_isMain + 0
   0315 36 01         [10]  619 	ld	(hl), #0x01
   0317 18 05         [12]  620 	jr	00163$
   0319                     621 00162$:
                            622 ;src\main.c:177: isMain = 0;
   0319 21r8Br00      [10]  623 	ld	hl,#_isMain + 0
   031C 36 00         [10]  624 	ld	(hl), #0x00
   031E                     625 00163$:
                            626 ;src\main.c:180: isSlave = 0;
   031E 21r8Cr00      [10]  627 	ld	hl,#_isSlave + 0
   0321 36 00         [10]  628 	ld	(hl), #0x00
                            629 ;src\main.c:181: if (dosversion == 0x82) {			// Is Nextor, check devices
   0323 3Ar00r00      [13]  630 	ld	a,(#_dosversion + 0)
   0326 D6 82         [ 7]  631 	sub	a, #0x82
   0328 20 36         [12]  632 	jr	NZ,00171$
                            633 ;src\main.c:182: for (c = 0; c < 16; c++) {
   032A 21r86r00      [10]  634 	ld	hl,#_c + 0
   032D 36 00         [10]  635 	ld	(hl), #0x00
   032F                     636 00231$:
                            637 ;src\main.c:183: if (0 == getDeviceInfo(c, &devInfo)) {
   032F 21r00r00      [10]  638 	ld	hl, #_devInfo
   0332 E5            [11]  639 	push	hl
   0333 3Ar86r00      [13]  640 	ld	a, (_c)
   0336 F5            [11]  641 	push	af
   0337 33            [ 6]  642 	inc	sp
   0338 CDr00r00      [17]  643 	call	_getDeviceInfo
   033B F1            [10]  644 	pop	af
   033C 33            [ 6]  645 	inc	sp
   033D 7D            [ 4]  646 	ld	a, l
   033E B7            [ 4]  647 	or	a, a
   033F 20 0F         [12]  648 	jr	NZ,00232$
                            649 ;src\main.c:184: if (devInfo.slotNum == slot) {
   0341 21r00r00      [10]  650 	ld	hl, #_devInfo + 0
   0344 4E            [ 7]  651 	ld	c, (hl)
   0345 3Ar89r00      [13]  652 	ld	a,(#_slot + 0)
   0348 91            [ 4]  653 	sub	a, c
   0349 20 05         [12]  654 	jr	NZ,00232$
                            655 ;src\main.c:185: isSlave = 1;
   034B 21r8Cr00      [10]  656 	ld	hl,#_isSlave + 0
   034E 36 01         [10]  657 	ld	(hl), #0x01
   0350                     658 00232$:
                            659 ;src\main.c:182: for (c = 0; c < 16; c++) {
   0350 FD 21r86r00   [14]  660 	ld	iy, #_c
   0354 FD 34 00      [23]  661 	inc	0 (iy)
   0357 FD 7E 00      [19]  662 	ld	a, 0 (iy)
   035A D6 10         [ 7]  663 	sub	a, #0x10
   035C 38 D1         [12]  664 	jr	C,00231$
   035E 18 05         [12]  665 	jr	00172$
   0360                     666 00171$:
                            667 ;src\main.c:190: isSlave = 1;					// Forces a reset
   0360 21r8Cr00      [10]  668 	ld	hl,#_isSlave + 0
   0363 36 01         [10]  669 	ld	(hl), #0x01
   0365                     670 00172$:
                            671 ;src\main.c:193: if (onlyErase == 1) {
   0365 3Ar43r00      [13]  672 	ld	a,(#_onlyErase + 0)
   0368 3D            [ 4]  673 	dec	a
   0369 C2rE8r03      [10]  674 	jp	NZ,00181$
                            675 ;src\main.c:194: if (isMain == 1 || isSlave == 1) {
   036C 3Ar8Br00      [13]  676 	ld	a,(#_isMain + 0)
   036F 3D            [ 4]  677 	dec	a
   0370 28 06         [12]  678 	jr	Z,00176$
   0372 3Ar8Cr00      [13]  679 	ld	a,(#_isSlave + 0)
   0375 3D            [ 4]  680 	dec	a
   0376 20 5E         [12]  681 	jr	NZ,00177$
   0378                     682 00176$:
                            683 ;src\main.c:195: puts(confirmReset0);
   0378 2Ar00r00      [16]  684 	ld	hl, (_confirmReset0)
   037B E5            [11]  685 	push	hl
   037C CDr00r00      [17]  686 	call	_puts
   037F F1            [10]  687 	pop	af
                            688 ;src\main.c:196: puts(confirmReset1);
   0380 2Ar00r00      [16]  689 	ld	hl, (_confirmReset1)
   0383 E5            [11]  690 	push	hl
   0384 CDr00r00      [17]  691 	call	_puts
   0387 F1            [10]  692 	pop	af
                            693 ;src\main.c:197: puts(confirmReset3);
   0388 2Ar00r00      [16]  694 	ld	hl, (_confirmReset3)
   038B E5            [11]  695 	push	hl
   038C CDr00r00      [17]  696 	call	_puts
   038F F1            [10]  697 	pop	af
                            698 ;src\main.c:198: clearKeyBuf();
   0390 CDr00r00      [17]  699 	call	_clearKeyBuf
                            700 ;src\main.c:199: c = getchar();
   0393 CDr00r00      [17]  701 	call	_getchar
   0396 FD 21r86r00   [14]  702 	ld	iy, #_c
   039A FD 75 00      [19]  703 	ld	0 (iy), l
                            704 ;src\main.c:200: putchar(c);
   039D 3Ar86r00      [13]  705 	ld	a, (_c)
   03A0 F5            [11]  706 	push	af
   03A1 33            [ 6]  707 	inc	sp
   03A2 CDr00r00      [17]  708 	call	_putchar
   03A5 33            [ 6]  709 	inc	sp
                            710 ;src\main.c:201: puts(crlf);
   03A6 2Ar00r00      [16]  711 	ld	hl, (_crlf)
   03A9 E5            [11]  712 	push	hl
   03AA CDr00r00      [17]  713 	call	_puts
   03AD F1            [10]  714 	pop	af
                            715 ;src\main.c:202: if (c == 'y' || c == 'Y') {
   03AE FD 21r86r00   [14]  716 	ld	iy, #_c
   03B2 FD 7E 00      [19]  717 	ld	a, 0 (iy)
   03B5 D6 79         [ 7]  718 	sub	a, #0x79
   03B7 28 07         [12]  719 	jr	Z,00173$
   03B9 FD 7E 00      [19]  720 	ld	a, 0 (iy)
   03BC D6 59         [ 7]  721 	sub	a, #0x59
   03BE 20 0D         [12]  722 	jr	NZ,00174$
   03C0                     723 00173$:
                            724 ;src\main.c:203: __asm__("di");
   03C0 F3            [ 4]  725 	di
                            726 ;src\main.c:204: eraseFlash(slot);
   03C1 3Ar89r00      [13]  727 	ld	a, (_slot)
   03C4 F5            [11]  728 	push	af
   03C5 33            [ 6]  729 	inc	sp
   03C6 CDr00r00      [17]  730 	call	_eraseFlash
   03C9 33            [ 6]  731 	inc	sp
                            732 ;src\main.c:205: resetSystem();
   03CA CDr00r00      [17]  733 	call	_resetSystem
   03CD                     734 00174$:
                            735 ;src\main.c:207: restoreHooks();
   03CD CDr00r00      [17]  736 	call	_restoreHooks
                            737 ;src\main.c:208: return 0;
   03D0 21 00 00      [10]  738 	ld	hl, #0x0000
   03D3 C3r78r08      [10]  739 	jp	00239$
   03D6                     740 00177$:
                            741 ;src\main.c:210: eraseFlash(slot);
   03D6 3Ar89r00      [13]  742 	ld	a, (_slot)
   03D9 F5            [11]  743 	push	af
   03DA 33            [ 6]  744 	inc	sp
   03DB CDr00r00      [17]  745 	call	_eraseFlash
   03DE 33            [ 6]  746 	inc	sp
                            747 ;src\main.c:211: restoreHooks();
   03DF CDr00r00      [17]  748 	call	_restoreHooks
                            749 ;src\main.c:212: return 0;
   03E2 21 00 00      [10]  750 	ld	hl, #0x0000
   03E5 C3r78r08      [10]  751 	jp	00239$
   03E8                     752 00181$:
                            753 ;src\main.c:216: c = mpInit();
   03E8 CDr00r00      [17]  754 	call	_mpInit
   03EB FD 21r86r00   [14]  755 	ld	iy, #_c
   03EF FD 75 00      [19]  756 	ld	0 (iy), l
                            757 ;src\main.c:217: if (c != 0) {
   03F2 FD 7E 00      [19]  758 	ld	a, 0 (iy)
   03F5 B7            [ 4]  759 	or	a, a
   03F6 28 14         [12]  760 	jr	Z,00183$
                            761 ;src\main.c:218: puts(errorNoExtBios);
   03F8 2Ar00r00      [16]  762 	ld	hl, (_errorNoExtBios)
   03FB E5            [11]  763 	push	hl
   03FC CDr00r00      [17]  764 	call	_puts
   03FF F1            [10]  765 	pop	af
                            766 ;src\main.c:219: numMprPages = numMapperPages();
   0400 CDr00r00      [17]  767 	call	_numMapperPages
   0403 FD 21r36r00   [14]  768 	ld	iy, #_numMprPages
   0407 FD 75 00      [19]  769 	ld	0 (iy), l
   040A 18 09         [12]  770 	jr	00184$
   040C                     771 00183$:
                            772 ;src\main.c:221: numMprPages = mpVars->numFree;
   040C 2Ar00r00      [16]  773 	ld	hl, (_mpVars)
   040F 23            [ 6]  774 	inc	hl
   0410 23            [ 6]  775 	inc	hl
   0411 7E            [ 7]  776 	ld	a, (hl)
   0412 32r36r00      [13]  777 	ld	(#_numMprPages + 0),a
   0415                     778 00184$:
                            779 ;src\main.c:223: if (numMprPages < 8) {
   0415 3Ar36r00      [13]  780 	ld	a,(#_numMprPages + 0)
   0418 D6 08         [ 7]  781 	sub	a, #0x08
   041A 30 11         [12]  782 	jr	NC,00186$
                            783 ;src\main.c:224: puts(noMemAvailable);
   041C 2Ar00r00      [16]  784 	ld	hl, (_noMemAvailable)
   041F E5            [11]  785 	push	hl
   0420 CDr00r00      [17]  786 	call	_puts
   0423 F1            [10]  787 	pop	af
                            788 ;src\main.c:225: restoreHooks();
   0424 CDr00r00      [17]  789 	call	_restoreHooks
                            790 ;src\main.c:226: return 3;
   0427 21 03 00      [10]  791 	ld	hl, #0x0003
   042A C3r78r08      [10]  792 	jp	00239$
   042D                     793 00186$:
                            794 ;src\main.c:229: curSegm = getCurSegFrame1();
   042D CDr00r00      [17]  795 	call	_getCurSegFrame1
   0430 FD 21r3Fr00   [14]  796 	ld	iy, #_curSegm
   0434 FD 75 00      [19]  797 	ld	0 (iy), l
                            798 ;src\main.c:232: fhandle = open(argv[pfi], O_RDONLY);
   0437 FD 21r41r00   [14]  799 	ld	iy, #_pfi
   043B FD 6E 00      [19]  800 	ld	l, 0 (iy)
   043E 26 00         [ 7]  801 	ld	h, #0x00
   0440 29            [11]  802 	add	hl, hl
   0441 4D            [ 4]  803 	ld	c, l
   0442 44            [ 4]  804 	ld	b, h
   0443 21 06 00      [10]  805 	ld	hl, #6
   0446 39            [11]  806 	add	hl, sp
   0447 7E            [ 7]  807 	ld	a, (hl)
   0448 23            [ 6]  808 	inc	hl
   0449 66            [ 7]  809 	ld	h, (hl)
   044A 6F            [ 4]  810 	ld	l, a
   044B 09            [11]  811 	add	hl, bc
   044C 4E            [ 7]  812 	ld	c, (hl)
   044D 23            [ 6]  813 	inc	hl
   044E 46            [ 7]  814 	ld	b, (hl)
   044F 3E 01         [ 7]  815 	ld	a, #0x01
   0451 F5            [11]  816 	push	af
   0452 33            [ 6]  817 	inc	sp
   0453 C5            [11]  818 	push	bc
   0454 CDr00r00      [17]  819 	call	_open
   0457 F1            [10]  820 	pop	af
   0458 33            [ 6]  821 	inc	sp
   0459 7D            [ 4]  822 	ld	a, l
   045A FD 21r8Dr00   [14]  823 	ld	iy, #_fhandle
   045E FD 77 00      [19]  824 	ld	0 (iy), a
   0461 17            [ 4]  825 	rla
   0462 9F            [ 4]  826 	sbc	a, a
   0463 FD 77 01      [19]  827 	ld	1 (iy), a
                            828 ;src\main.c:233: if (fhandle == -1) {
   0466 FD 7E 00      [19]  829 	ld	a, 0 (iy)
   0469 3C            [ 4]  830 	inc	a
   046A 20 17         [12]  831 	jr	NZ,00188$
   046C FD 7E 01      [19]  832 	ld	a, 1 (iy)
   046F 3C            [ 4]  833 	inc	a
   0470 20 11         [12]  834 	jr	NZ,00188$
                            835 ;src\main.c:234: puts(openingError);
   0472 2Ar00r00      [16]  836 	ld	hl, (_openingError)
   0475 E5            [11]  837 	push	hl
   0476 CDr00r00      [17]  838 	call	_puts
   0479 F1            [10]  839 	pop	af
                            840 ;src\main.c:235: restoreHooks();
   047A CDr00r00      [17]  841 	call	_restoreHooks
                            842 ;src\main.c:236: return 4;
   047D 21 04 00      [10]  843 	ld	hl, #0x0004
   0480 C3r78r08      [10]  844 	jp	00239$
   0483                     845 00188$:
                            846 ;src\main.c:239: if (dosversion < 2) {
   0483 3Ar00r00      [13]  847 	ld	a,(#_dosversion + 0)
   0486 D6 02         [ 7]  848 	sub	a, #0x02
   0488 30 23         [12]  849 	jr	NC,00190$
                            850 ;src\main.c:240: fileSize = dos1GetFilesize();
   048A CDr00r00      [17]  851 	call	_dos1GetFilesize
   048D FD 21 00 00   [14]  852 	ld	iy, #0
   0491 FD 39         [15]  853 	add	iy, sp
   0493 FD 72 03      [19]  854 	ld	3 (iy), d
   0496 FD 73 02      [19]  855 	ld	2 (iy), e
   0499 FD 74 01      [19]  856 	ld	1 (iy), h
   049C FD 75 00      [19]  857 	ld	0 (iy), l
   049F 11r93r00      [10]  858 	ld	de, #_fileSize
   04A2 21 00 00      [10]  859 	ld	hl, #0
   04A5 39            [11]  860 	add	hl, sp
   04A6 01 04 00      [10]  861 	ld	bc, #4
   04A9 ED B0         [21]  862 	ldir
   04AB 18 36         [12]  863 	jr	00191$
   04AD                     864 00190$:
                            865 ;src\main.c:242: fileSize = lseek(fhandle, 0, SEEK_END);
   04AD 21r8Dr00      [10]  866 	ld	hl,#_fhandle + 0
   04B0 46            [ 7]  867 	ld	b, (hl)
   04B1 3E 02         [ 7]  868 	ld	a, #0x02
   04B3 F5            [11]  869 	push	af
   04B4 33            [ 6]  870 	inc	sp
   04B5 21 00 00      [10]  871 	ld	hl, #0x0000
   04B8 E5            [11]  872 	push	hl
   04B9 21 00 00      [10]  873 	ld	hl, #0x0000
   04BC E5            [11]  874 	push	hl
   04BD C5            [11]  875 	push	bc
   04BE 33            [ 6]  876 	inc	sp
   04BF CDr00r00      [17]  877 	call	_lseek
   04C2 F1            [10]  878 	pop	af
   04C3 F1            [10]  879 	pop	af
   04C4 F1            [10]  880 	pop	af
   04C5 FD 21 00 00   [14]  881 	ld	iy, #0
   04C9 FD 39         [15]  882 	add	iy, sp
   04CB FD 72 03      [19]  883 	ld	3 (iy), d
   04CE FD 73 02      [19]  884 	ld	2 (iy), e
   04D1 FD 74 01      [19]  885 	ld	1 (iy), h
   04D4 FD 75 00      [19]  886 	ld	0 (iy), l
   04D7 11r93r00      [10]  887 	ld	de, #_fileSize
   04DA 21 00 00      [10]  888 	ld	hl, #0
   04DD 39            [11]  889 	add	hl, sp
   04DE 01 04 00      [10]  890 	ld	bc, #4
   04E1 ED B0         [21]  891 	ldir
   04E3                     892 00191$:
                            893 ;src\main.c:244: if (fileSize != 131072) {
   04E3 FD 21r93r00   [14]  894 	ld	iy, #_fileSize
   04E7 FD 7E 00      [19]  895 	ld	a, 0 (iy)
   04EA B7            [ 4]  896 	or	a, a
   04EB FD B6 01      [19]  897 	or	a, 1 (iy)
   04EE 20 0A         [12]  898 	jr	NZ,00572$
   04F0 FD 7E 02      [19]  899 	ld	a, 2 (iy)
   04F3 D6 02         [ 7]  900 	sub	a, #0x02
   04F5 FD B6 03      [19]  901 	or	a, 3 (iy)
   04F8 28 11         [12]  902 	jr	Z,00193$
   04FA                     903 00572$:
                            904 ;src\main.c:245: puts(filesizeError);
   04FA 2Ar00r00      [16]  905 	ld	hl, (_filesizeError)
   04FD E5            [11]  906 	push	hl
   04FE CDr00r00      [17]  907 	call	_puts
   0501 F1            [10]  908 	pop	af
                            909 ;src\main.c:246: restoreHooks();
   0502 CDr00r00      [17]  910 	call	_restoreHooks
                            911 ;src\main.c:247: return 5;
   0505 21 05 00      [10]  912 	ld	hl, #0x0005
   0508 C3r78r08      [10]  913 	jp	00239$
   050B                     914 00193$:
                            915 ;src\main.c:250: if (dosversion > 1) {
   050B 3E 01         [ 7]  916 	ld	a, #0x01
   050D FD 21r00r00   [14]  917 	ld	iy, #_dosversion
   0511 FD 96 00      [19]  918 	sub	a, 0 (iy)
   0514 D2rF1r05      [10]  919 	jp	NC, 00203$
                            920 ;src\main.c:251: lseek(fhandle, 0x1C100, SEEK_SET);
   0517 21r8Dr00      [10]  921 	ld	hl,#_fhandle + 0
   051A 46            [ 7]  922 	ld	b, (hl)
   051B AF            [ 4]  923 	xor	a, a
   051C F5            [11]  924 	push	af
   051D 33            [ 6]  925 	inc	sp
   051E 21 01 00      [10]  926 	ld	hl, #0x0001
   0521 E5            [11]  927 	push	hl
   0522 21 00 C1      [10]  928 	ld	hl, #0xc100
   0525 E5            [11]  929 	push	hl
   0526 C5            [11]  930 	push	bc
   0527 33            [ 6]  931 	inc	sp
   0528 CDr00r00      [17]  932 	call	_lseek
   052B F1            [10]  933 	pop	af
   052C F1            [10]  934 	pop	af
   052D F1            [10]  935 	pop	af
                            936 ;src\main.c:252: r = read(fhandle, buffer, 32);
   052E 11r45r00      [10]  937 	ld	de, #_buffer
   0531 21r8Dr00      [10]  938 	ld	hl,#_fhandle + 0
   0534 46            [ 7]  939 	ld	b, (hl)
   0535 21 20 00      [10]  940 	ld	hl, #0x0020
   0538 E5            [11]  941 	push	hl
   0539 D5            [11]  942 	push	de
   053A C5            [11]  943 	push	bc
   053B 33            [ 6]  944 	inc	sp
   053C CDr00r00      [17]  945 	call	_read
   053F F1            [10]  946 	pop	af
   0540 F1            [10]  947 	pop	af
   0541 33            [ 6]  948 	inc	sp
   0542 22r91r00      [16]  949 	ld	(_r), hl
                            950 ;src\main.c:253: if (r == -1) {
   0545 FD 21r91r00   [14]  951 	ld	iy, #_r
   0549 FD 7E 00      [19]  952 	ld	a, 0 (iy)
   054C 3C            [ 4]  953 	inc	a
   054D 20 07         [12]  954 	jr	NZ,00573$
   054F FD 7E 01      [19]  955 	ld	a, 1 (iy)
   0552 3C            [ 4]  956 	inc	a
   0553 CAr4Dr07      [10]  957 	jp	Z,00214$
   0556                     958 00573$:
                            959 ;src\main.c:256: if (memcmp(buffer, "NEXTOR_DRIVER", 13) == 1) {
   0556 21 0D 00      [10]  960 	ld	hl, #0x000d
   0559 E5            [11]  961 	push	hl
   055A 21r7Br08      [10]  962 	ld	hl, #___str_0
   055D E5            [11]  963 	push	hl
   055E 21r45r00      [10]  964 	ld	hl, #_buffer
   0561 E5            [11]  965 	push	hl
   0562 CDr00r00      [17]  966 	call	_memcmp
   0565 F1            [10]  967 	pop	af
   0566 F1            [10]  968 	pop	af
   0567 F1            [10]  969 	pop	af
   0568 2D            [ 4]  970 	dec	l
   0569 20 11         [12]  971 	jr	NZ,00197$
                            972 ;src\main.c:257: puts(errorNotNxtDrv);
   056B 2Ar00r00      [16]  973 	ld	hl, (_errorNotNxtDrv)
   056E E5            [11]  974 	push	hl
   056F CDr00r00      [17]  975 	call	_puts
   0572 F1            [10]  976 	pop	af
                            977 ;src\main.c:258: restoreHooks();
   0573 CDr00r00      [17]  978 	call	_restoreHooks
                            979 ;src\main.c:259: return 6;		
   0576 21 06 00      [10]  980 	ld	hl, #0x0006
   0579 C3r78r08      [10]  981 	jp	00239$
   057C                     982 00197$:
                            983 ;src\main.c:261: if (verifySwId(buffer+16) == 0) {
   057C 21r55r00      [10]  984 	ld	hl, #(_buffer + 0x0010)
   057F E5            [11]  985 	push	hl
   0580 CDr00r00      [17]  986 	call	_verifySwId
   0583 F1            [10]  987 	pop	af
   0584 7D            [ 4]  988 	ld	a, l
   0585 B7            [ 4]  989 	or	a, a
   0586 20 11         [12]  990 	jr	NZ,00199$
                            991 ;src\main.c:262: puts(errorWrongDrv);
   0588 2Ar00r00      [16]  992 	ld	hl, (_errorWrongDrv)
   058B E5            [11]  993 	push	hl
   058C CDr00r00      [17]  994 	call	_puts
   058F F1            [10]  995 	pop	af
                            996 ;src\main.c:263: restoreHooks();
   0590 CDr00r00      [17]  997 	call	_restoreHooks
                            998 ;src\main.c:264: return 7;
   0593 21 07 00      [10]  999 	ld	hl, #0x0007
   0596 C3r78r08      [10] 1000 	jp	00239$
   0599                    1001 00199$:
                           1002 ;src\main.c:266: seekpos = lseek(fhandle, 0, SEEK_SET);
   0599 21r8Dr00      [10] 1003 	ld	hl,#_fhandle + 0
   059C 46            [ 7] 1004 	ld	b, (hl)
   059D AF            [ 4] 1005 	xor	a, a
   059E F5            [11] 1006 	push	af
   059F 33            [ 6] 1007 	inc	sp
   05A0 21 00 00      [10] 1008 	ld	hl, #0x0000
   05A3 E5            [11] 1009 	push	hl
   05A4 21 00 00      [10] 1010 	ld	hl, #0x0000
   05A7 E5            [11] 1011 	push	hl
   05A8 C5            [11] 1012 	push	bc
   05A9 33            [ 6] 1013 	inc	sp
   05AA CDr00r00      [17] 1014 	call	_lseek
   05AD F1            [10] 1015 	pop	af
   05AE F1            [10] 1016 	pop	af
   05AF F1            [10] 1017 	pop	af
   05B0 FD 21 00 00   [14] 1018 	ld	iy, #0
   05B4 FD 39         [15] 1019 	add	iy, sp
   05B6 FD 72 03      [19] 1020 	ld	3 (iy), d
   05B9 FD 73 02      [19] 1021 	ld	2 (iy), e
   05BC FD 74 01      [19] 1022 	ld	1 (iy), h
   05BF FD 75 00      [19] 1023 	ld	0 (iy), l
   05C2 11r97r00      [10] 1024 	ld	de, #_seekpos
   05C5 21 00 00      [10] 1025 	ld	hl, #0
   05C8 39            [11] 1026 	add	hl, sp
   05C9 01 04 00      [10] 1027 	ld	bc, #4
   05CC ED B0         [21] 1028 	ldir
                           1029 ;src\main.c:267: if (seekpos != 0) {
   05CE FD 21r97r00   [14] 1030 	ld	iy, #_seekpos
   05D2 FD 7E 03      [19] 1031 	ld	a, 3 (iy)
   05D5 FD B6 02      [19] 1032 	or	a, 2 (iy)
   05D8 FD B6 01      [19] 1033 	or	a, 1 (iy)
   05DB FD B6 00      [19] 1034 	or	a, 0 (iy)
   05DE 28 11         [12] 1035 	jr	Z,00203$
                           1036 ;src\main.c:268: puts(errorSeek);
   05E0 2Ar00r00      [16] 1037 	ld	hl, (_errorSeek)
   05E3 E5            [11] 1038 	push	hl
   05E4 CDr00r00      [17] 1039 	call	_puts
   05E7 F1            [10] 1040 	pop	af
                           1041 ;src\main.c:269: restoreHooks();
   05E8 CDr00r00      [17] 1042 	call	_restoreHooks
                           1043 ;src\main.c:270: return 7;
   05EB 21 07 00      [10] 1044 	ld	hl, #0x0007
   05EE C3r78r08      [10] 1045 	jp	00239$
   05F1                    1046 00203$:
                           1047 ;src\main.c:276: resetAtEnd = 0;
   05F1 21r44r00      [10] 1048 	ld	hl,#_resetAtEnd + 0
   05F4 36 00         [10] 1049 	ld	(hl), #0x00
                           1050 ;src\main.c:277: if (isMain == 1 || isSlave == 1) {
   05F6 3Ar8Br00      [13] 1051 	ld	a,(#_isMain + 0)
   05F9 3D            [ 4] 1052 	dec	a
   05FA 28 06         [12] 1053 	jr	Z,00208$
   05FC 3Ar8Cr00      [13] 1054 	ld	a,(#_isSlave + 0)
   05FF 3D            [ 4] 1055 	dec	a
   0600 20 62         [12] 1056 	jr	NZ,00209$
   0602                    1057 00208$:
                           1058 ;src\main.c:278: puts(confirmReset0);
   0602 2Ar00r00      [16] 1059 	ld	hl, (_confirmReset0)
   0605 E5            [11] 1060 	push	hl
   0606 CDr00r00      [17] 1061 	call	_puts
   0609 F1            [10] 1062 	pop	af
                           1063 ;src\main.c:279: puts(confirmReset2);
   060A 2Ar00r00      [16] 1064 	ld	hl, (_confirmReset2)
   060D E5            [11] 1065 	push	hl
   060E CDr00r00      [17] 1066 	call	_puts
   0611 F1            [10] 1067 	pop	af
                           1068 ;src\main.c:280: puts(confirmReset3);
   0612 2Ar00r00      [16] 1069 	ld	hl, (_confirmReset3)
   0615 E5            [11] 1070 	push	hl
   0616 CDr00r00      [17] 1071 	call	_puts
   0619 F1            [10] 1072 	pop	af
                           1073 ;src\main.c:281: clearKeyBuf();
   061A CDr00r00      [17] 1074 	call	_clearKeyBuf
                           1075 ;src\main.c:282: c = getchar();
   061D CDr00r00      [17] 1076 	call	_getchar
   0620 FD 21r86r00   [14] 1077 	ld	iy, #_c
   0624 FD 75 00      [19] 1078 	ld	0 (iy), l
                           1079 ;src\main.c:283: putchar(c);
   0627 3Ar86r00      [13] 1080 	ld	a, (_c)
   062A F5            [11] 1081 	push	af
   062B 33            [ 6] 1082 	inc	sp
   062C CDr00r00      [17] 1083 	call	_putchar
   062F 33            [ 6] 1084 	inc	sp
                           1085 ;src\main.c:284: puts(crlf);
   0630 2Ar00r00      [16] 1086 	ld	hl, (_crlf)
   0633 E5            [11] 1087 	push	hl
   0634 CDr00r00      [17] 1088 	call	_puts
   0637 F1            [10] 1089 	pop	af
                           1090 ;src\main.c:285: if (c == 'y' || c == 'Y') {
   0638 FD 21r86r00   [14] 1091 	ld	iy, #_c
   063C FD 7E 00      [19] 1092 	ld	a, 0 (iy)
   063F D6 79         [ 7] 1093 	sub	a, #0x79
   0641 28 07         [12] 1094 	jr	Z,00204$
   0643 FD 7E 00      [19] 1095 	ld	a, 0 (iy)
   0646 D6 59         [ 7] 1096 	sub	a, #0x59
   0648 20 07         [12] 1097 	jr	NZ,00205$
   064A                    1098 00204$:
                           1099 ;src\main.c:286: resetAtEnd = 1;
   064A 21r44r00      [10] 1100 	ld	hl,#_resetAtEnd + 0
   064D 36 01         [10] 1101 	ld	(hl), #0x01
   064F 18 13         [12] 1102 	jr	00209$
   0651                    1103 00205$:
                           1104 ;src\main.c:288: close(fhandle);
   0651 21r8Dr00      [10] 1105 	ld	hl,#_fhandle + 0
   0654 46            [ 7] 1106 	ld	b, (hl)
   0655 C5            [11] 1107 	push	bc
   0656 33            [ 6] 1108 	inc	sp
   0657 CDr00r00      [17] 1109 	call	_close
   065A 33            [ 6] 1110 	inc	sp
                           1111 ;src\main.c:289: restoreHooks();
   065B CDr00r00      [17] 1112 	call	_restoreHooks
                           1113 ;src\main.c:290: return 0;
   065E 21 00 00      [10] 1114 	ld	hl, #0x0000
   0661 C3r78r08      [10] 1115 	jp	00239$
   0664                    1116 00209$:
                           1117 ;src\main.c:294: for (i = 0; i < 8; i++) {
   0664 21 00 00      [10] 1118 	ld	hl, #0x0000
   0667 22r8Fr00      [16] 1119 	ld	(_i), hl
   066A                    1120 00233$:
                           1121 ;src\main.c:295: mprSegments[i] = allocUserSegment();
   066A FD 21r8Fr00   [14] 1122 	ld	iy, #_i
   066E FD 7E 00      [19] 1123 	ld	a, 0 (iy)
   0671 C6r37         [ 7] 1124 	add	a, #<(_mprSegments)
   0673 4F            [ 4] 1125 	ld	c, a
   0674 FD 7E 01      [19] 1126 	ld	a, 1 (iy)
   0677 CEs00         [ 7] 1127 	adc	a, #>(_mprSegments)
   0679 47            [ 4] 1128 	ld	b, a
   067A C5            [11] 1129 	push	bc
   067B CDr00r00      [17] 1130 	call	_allocUserSegment
   067E 7D            [ 4] 1131 	ld	a, l
   067F C1            [10] 1132 	pop	bc
   0680 02            [ 7] 1133 	ld	(bc), a
                           1134 ;src\main.c:296: if (mprSegments[i] == 0) {
   0681 FD 21r37r00   [14] 1135 	ld	iy, #_mprSegments
   0685 ED 5Br8Fr00   [20] 1136 	ld	de, (_i)
   0689 FD 19         [15] 1137 	add	iy, de
   068B FD 7E 00      [19] 1138 	ld	a, 0 (iy)
   068E B7            [ 4] 1139 	or	a, a
   068F 20 1B         [12] 1140 	jr	NZ,00234$
                           1141 ;src\main.c:297: puts(errorAllocMapper);
   0691 2Ar00r00      [16] 1142 	ld	hl, (_errorAllocMapper)
   0694 E5            [11] 1143 	push	hl
   0695 CDr00r00      [17] 1144 	call	_puts
   0698 F1            [10] 1145 	pop	af
                           1146 ;src\main.c:298: close(fhandle);
   0699 21r8Dr00      [10] 1147 	ld	hl,#_fhandle + 0
   069C 46            [ 7] 1148 	ld	b, (hl)
   069D C5            [11] 1149 	push	bc
   069E 33            [ 6] 1150 	inc	sp
   069F CDr00r00      [17] 1151 	call	_close
   06A2 33            [ 6] 1152 	inc	sp
                           1153 ;src\main.c:299: restoreHooks();
   06A3 CDr00r00      [17] 1154 	call	_restoreHooks
                           1155 ;src\main.c:300: return 10;
   06A6 21 0A 00      [10] 1156 	ld	hl, #0x000a
   06A9 C3r78r08      [10] 1157 	jp	00239$
   06AC                    1158 00234$:
                           1159 ;src\main.c:294: for (i = 0; i < 8; i++) {
   06AC FD 21r8Fr00   [14] 1160 	ld	iy, #_i
   06B0 FD 34 00      [23] 1161 	inc	0 (iy)
   06B3 20 03         [12] 1162 	jr	NZ,00582$
   06B5 FD 34 01      [23] 1163 	inc	1 (iy)
   06B8                    1164 00582$:
   06B8 FD 7E 00      [19] 1165 	ld	a, 0 (iy)
   06BB D6 08         [ 7] 1166 	sub	a, #0x08
   06BD FD 7E 01      [19] 1167 	ld	a, 1 (iy)
   06C0 17            [ 4] 1168 	rla
   06C1 3F            [ 4] 1169 	ccf
   06C2 1F            [ 4] 1170 	rra
   06C3 DE 80         [ 7] 1171 	sbc	a, #0x80
   06C5 38 A3         [12] 1172 	jr	C,00233$
                           1173 ;src\main.c:303: puts(readingFile);
   06C7 2Ar00r00      [16] 1174 	ld	hl, (_readingFile)
   06CA E5            [11] 1175 	push	hl
   06CB CDr00r00      [17] 1176 	call	_puts
   06CE F1            [10] 1177 	pop	af
                           1178 ;src\main.c:304: c = 0;
   06CF 21r86r00      [10] 1179 	ld	hl,#_c + 0
   06D2 36 00         [10] 1180 	ld	(hl), #0x00
                           1181 ;src\main.c:305: for (i = 0; i < 8; i++) {
   06D4 21 00 00      [10] 1182 	ld	hl, #0x0000
   06D7 22r8Fr00      [16] 1183 	ld	(_i), hl
   06DA                    1184 00235$:
                           1185 ;src\main.c:306: putchar(ce[c]);
   06DA FD 21r00r00   [14] 1186 	ld	iy, #_ce
   06DE ED 5Br86r00   [20] 1187 	ld	de, (_c)
   06E2 16 00         [ 7] 1188 	ld	d, #0x00
   06E4 FD 19         [15] 1189 	add	iy, de
   06E6 FD 46 00      [19] 1190 	ld	b, 0 (iy)
   06E9 C5            [11] 1191 	push	bc
   06EA 33            [ 6] 1192 	inc	sp
   06EB CDr00r00      [17] 1193 	call	_putchar
   06EE 33            [ 6] 1194 	inc	sp
                           1195 ;src\main.c:307: putchar(8);
   06EF 3E 08         [ 7] 1196 	ld	a, #0x08
   06F1 F5            [11] 1197 	push	af
   06F2 33            [ 6] 1198 	inc	sp
   06F3 CDr00r00      [17] 1199 	call	_putchar
   06F6 33            [ 6] 1200 	inc	sp
                           1201 ;src\main.c:308: c = (c + 1) & 0x03;
   06F7 FD 21r86r00   [14] 1202 	ld	iy, #_c
   06FB FD 7E 00      [19] 1203 	ld	a, 0 (iy)
   06FE 3C            [ 4] 1204 	inc	a
   06FF E6 03         [ 7] 1205 	and	a, #0x03
   0701 FD 77 00      [19] 1206 	ld	0 (iy), a
                           1207 ;src\main.c:309: t1 = mprSegments[i];
   0704 3Er37         [ 7] 1208 	ld	a, #<(_mprSegments)
   0706 21r8Fr00      [10] 1209 	ld	hl, #_i
   0709 86            [ 7] 1210 	add	a, (hl)
   070A 4F            [ 4] 1211 	ld	c, a
   070B 3Es00         [ 7] 1212 	ld	a, #>(_mprSegments)
   070D 23            [ 6] 1213 	inc	hl
   070E 8E            [ 7] 1214 	adc	a, (hl)
   070F 47            [ 4] 1215 	ld	b, a
   0710 0A            [ 7] 1216 	ld	a, (bc)
   0711 32r87r00      [13] 1217 	ld	(#_t1 + 0),a
                           1218 ;src\main.c:310: putSegFrame1(t1);
   0714 3Ar87r00      [13] 1219 	ld	a, (_t1)
   0717 F5            [11] 1220 	push	af
   0718 33            [ 6] 1221 	inc	sp
   0719 CDr00r00      [17] 1222 	call	_putSegFrame1
   071C 33            [ 6] 1223 	inc	sp
                           1224 ;src\main.c:311: r = read(fhandle, (void *)0x4000, 16384);
   071D 21r8Dr00      [10] 1225 	ld	hl,#_fhandle + 0
   0720 46            [ 7] 1226 	ld	b, (hl)
   0721 21 00 40      [10] 1227 	ld	hl, #0x4000
   0724 E5            [11] 1228 	push	hl
   0725 2E 00         [ 7] 1229 	ld	l, #0x00
   0727 E5            [11] 1230 	push	hl
   0728 C5            [11] 1231 	push	bc
   0729 33            [ 6] 1232 	inc	sp
   072A CDr00r00      [17] 1233 	call	_read
   072D F1            [10] 1234 	pop	af
   072E F1            [10] 1235 	pop	af
   072F 33            [ 6] 1236 	inc	sp
   0730 22r91r00      [16] 1237 	ld	(_r), hl
                           1238 ;src\main.c:312: putSegFrame1(curSegm);
   0733 3Ar3Fr00      [13] 1239 	ld	a, (_curSegm)
   0736 F5            [11] 1240 	push	af
   0737 33            [ 6] 1241 	inc	sp
   0738 CDr00r00      [17] 1242 	call	_putSegFrame1
   073B 33            [ 6] 1243 	inc	sp
                           1244 ;src\main.c:313: if (r != 16384) {
   073C FD 21r91r00   [14] 1245 	ld	iy, #_r
   0740 FD 7E 00      [19] 1246 	ld	a, 0 (iy)
   0743 B7            [ 4] 1247 	or	a, a
   0744 20 07         [12] 1248 	jr	NZ,00583$
   0746 FD 7E 01      [19] 1249 	ld	a, 1 (iy)
   0749 D6 40         [ 7] 1250 	sub	a, #0x40
   074B 28 2C         [12] 1251 	jr	Z,00236$
   074D                    1252 00583$:
                           1253 ;src\main.c:314: readErr:
   074D                    1254 00214$:
                           1255 ;src\main.c:315: puts(readingError0);
   074D 2Ar00r00      [16] 1256 	ld	hl, (_readingError0)
   0750 E5            [11] 1257 	push	hl
   0751 CDr00r00      [17] 1258 	call	_puts
   0754 F1            [10] 1259 	pop	af
                           1260 ;src\main.c:316: puthex8(last_error);
   0755 3Ar00r00      [13] 1261 	ld	a, (_last_error)
   0758 F5            [11] 1262 	push	af
   0759 33            [ 6] 1263 	inc	sp
   075A CDr00r00      [17] 1264 	call	_puthex8
   075D 33            [ 6] 1265 	inc	sp
                           1266 ;src\main.c:317: puts(readingError1);
   075E 2Ar00r00      [16] 1267 	ld	hl, (_readingError1)
   0761 E5            [11] 1268 	push	hl
   0762 CDr00r00      [17] 1269 	call	_puts
   0765 F1            [10] 1270 	pop	af
                           1271 ;src\main.c:318: close(fhandle);
   0766 21r8Dr00      [10] 1272 	ld	hl,#_fhandle + 0
   0769 46            [ 7] 1273 	ld	b, (hl)
   076A C5            [11] 1274 	push	bc
   076B 33            [ 6] 1275 	inc	sp
   076C CDr00r00      [17] 1276 	call	_close
   076F 33            [ 6] 1277 	inc	sp
                           1278 ;src\main.c:319: restoreHooks();
   0770 CDr00r00      [17] 1279 	call	_restoreHooks
                           1280 ;src\main.c:320: return 11;
   0773 21 0B 00      [10] 1281 	ld	hl, #0x000b
   0776 C3r78r08      [10] 1282 	jp	00239$
   0779                    1283 00236$:
                           1284 ;src\main.c:305: for (i = 0; i < 8; i++) {
   0779 FD 21r8Fr00   [14] 1285 	ld	iy, #_i
   077D FD 34 00      [23] 1286 	inc	0 (iy)
   0780 20 03         [12] 1287 	jr	NZ,00584$
   0782 FD 34 01      [23] 1288 	inc	1 (iy)
   0785                    1289 00584$:
   0785 FD 7E 00      [19] 1290 	ld	a, 0 (iy)
   0788 D6 08         [ 7] 1291 	sub	a, #0x08
   078A FD 7E 01      [19] 1292 	ld	a, 1 (iy)
   078D 17            [ 4] 1293 	rla
   078E 3F            [ 4] 1294 	ccf
   078F 1F            [ 4] 1295 	rra
   0790 DE 80         [ 7] 1296 	sbc	a, #0x80
   0792 DArDAr06      [10] 1297 	jp	C, 00235$
                           1298 ;src\main.c:323: puts(ok0);
   0795 2Ar00r00      [16] 1299 	ld	hl, (_ok0)
   0798 E5            [11] 1300 	push	hl
   0799 CDr00r00      [17] 1301 	call	_puts
   079C F1            [10] 1302 	pop	af
                           1303 ;src\main.c:324: close(fhandle);
   079D 21r8Dr00      [10] 1304 	ld	hl,#_fhandle + 0
   07A0 46            [ 7] 1305 	ld	b, (hl)
   07A1 C5            [11] 1306 	push	bc
   07A2 33            [ 6] 1307 	inc	sp
   07A3 CDr00r00      [17] 1308 	call	_close
   07A6 33            [ 6] 1309 	inc	sp
                           1310 ;src\main.c:326: if (pause == 1) {
   07A7 FD 21r85r00   [14] 1311 	ld	iy, #_pause
   07AB FD 7E 00      [19] 1312 	ld	a, 0 (iy)
   07AE 3D            [ 4] 1313 	dec	a
   07AF 20 13         [12] 1314 	jr	NZ,00219$
                           1315 ;src\main.c:327: puts(pauseMsg);
   07B1 2Ar00r00      [16] 1316 	ld	hl, (_pauseMsg)
   07B4 E5            [11] 1317 	push	hl
   07B5 CDr00r00      [17] 1318 	call	_puts
   07B8 F1            [10] 1319 	pop	af
                           1320 ;src\main.c:328: getchar();
   07B9 CDr00r00      [17] 1321 	call	_getchar
                           1322 ;src\main.c:329: puts(crlf);
   07BC 2Ar00r00      [16] 1323 	ld	hl, (_crlf)
   07BF E5            [11] 1324 	push	hl
   07C0 CDr00r00      [17] 1325 	call	_puts
   07C3 F1            [10] 1326 	pop	af
   07C4                    1327 00219$:
                           1328 ;src\main.c:332: __asm__("di");
   07C4 F3            [ 4] 1329 	di
                           1330 ;src\main.c:333: eraseFlash(slot);
   07C5 3Ar89r00      [13] 1331 	ld	a, (_slot)
   07C8 F5            [11] 1332 	push	af
   07C9 33            [ 6] 1333 	inc	sp
   07CA CDr00r00      [17] 1334 	call	_eraseFlash
   07CD 33            [ 6] 1335 	inc	sp
                           1336 ;src\main.c:335: puts(writingFlash);
   07CE 2Ar00r00      [16] 1337 	ld	hl, (_writingFlash)
   07D1 E5            [11] 1338 	push	hl
   07D2 CDr00r00      [17] 1339 	call	_puts
   07D5 F1            [10] 1340 	pop	af
                           1341 ;src\main.c:336: for (i = 0; i < 8; i++) {
   07D6 21 00 00      [10] 1342 	ld	hl, #0x0000
   07D9 22r8Fr00      [16] 1343 	ld	(_i), hl
   07DC                    1344 00237$:
                           1345 ;src\main.c:337: if (writeBlock(slot, mprSegments[i], curSegm, i) == 0) {
   07DC 21r8Fr00      [10] 1346 	ld	hl,#_i + 0
   07DF 46            [ 7] 1347 	ld	b, (hl)
   07E0 FD 21r37r00   [14] 1348 	ld	iy, #_mprSegments
   07E4 ED 5Br8Fr00   [20] 1349 	ld	de, (_i)
   07E8 FD 19         [15] 1350 	add	iy, de
   07EA FD 56 00      [19] 1351 	ld	d, 0 (iy)
   07ED C5            [11] 1352 	push	bc
   07EE 33            [ 6] 1353 	inc	sp
   07EF 3Ar3Fr00      [13] 1354 	ld	a, (_curSegm)
   07F2 F5            [11] 1355 	push	af
   07F3 33            [ 6] 1356 	inc	sp
   07F4 D5            [11] 1357 	push	de
   07F5 33            [ 6] 1358 	inc	sp
   07F6 3Ar89r00      [13] 1359 	ld	a, (_slot)
   07F9 F5            [11] 1360 	push	af
   07FA 33            [ 6] 1361 	inc	sp
   07FB CDr00r00      [17] 1362 	call	_writeBlock
   07FE F1            [10] 1363 	pop	af
   07FF F1            [10] 1364 	pop	af
   0800 7D            [ 4] 1365 	ld	a, l
   0801 B7            [ 4] 1366 	or	a, a
   0802 28 1B         [12] 1367 	jr	Z,00222$
                           1368 ;src\main.c:336: for (i = 0; i < 8; i++) {
   0804 FD 21r8Fr00   [14] 1369 	ld	iy, #_i
   0808 FD 34 00      [23] 1370 	inc	0 (iy)
   080B 20 03         [12] 1371 	jr	NZ,00587$
   080D FD 34 01      [23] 1372 	inc	1 (iy)
   0810                    1373 00587$:
   0810 FD 7E 00      [19] 1374 	ld	a, 0 (iy)
   0813 D6 08         [ 7] 1375 	sub	a, #0x08
   0815 FD 7E 01      [19] 1376 	ld	a, 1 (iy)
   0818 17            [ 4] 1377 	rla
   0819 3F            [ 4] 1378 	ccf
   081A 1F            [ 4] 1379 	rra
   081B DE 80         [ 7] 1380 	sbc	a, #0x80
   081D 38 BD         [12] 1381 	jr	C,00237$
   081F                    1382 00222$:
                           1383 ;src\main.c:341: __asm__("ei");
   081F FB            [ 4] 1384 	ei
                           1385 ;src\main.c:342: if (i != 8) {
   0820 FD 21r8Fr00   [14] 1386 	ld	iy, #_i
   0824 FD 7E 00      [19] 1387 	ld	a, 0 (iy)
   0827 D6 08         [ 7] 1388 	sub	a, #0x08
   0829 FD B6 01      [19] 1389 	or	a, 1 (iy)
   082C 28 1D         [12] 1390 	jr	Z,00224$
                           1391 ;src\main.c:343: puts(errorWriting);
   082E 2Ar00r00      [16] 1392 	ld	hl, (_errorWriting)
   0831 E5            [11] 1393 	push	hl
   0832 CDr00r00      [17] 1394 	call	_puts
   0835 F1            [10] 1395 	pop	af
                           1396 ;src\main.c:344: eraseFlash(slot);
   0836 3Ar89r00      [13] 1397 	ld	a, (_slot)
   0839 F5            [11] 1398 	push	af
   083A 33            [ 6] 1399 	inc	sp
   083B CDr00r00      [17] 1400 	call	_eraseFlash
   083E 33            [ 6] 1401 	inc	sp
                           1402 ;src\main.c:345: puts(systemHalted);
   083F 2Ar00r00      [16] 1403 	ld	hl, (_systemHalted)
   0842 E5            [11] 1404 	push	hl
   0843 CDr00r00      [17] 1405 	call	_puts
   0846 F1            [10] 1406 	pop	af
                           1407 ;src\main.c:346: __asm__("di");
   0847 F3            [ 4] 1408 	di
                           1409 ;src\main.c:347: __asm__("halt");
   0848 76            [ 4] 1410 	halt
   0849 18 10         [12] 1411 	jr	00225$
   084B                    1412 00224$:
                           1413 ;src\main.c:349: putchar(' ');
   084B 3E 20         [ 7] 1414 	ld	a, #0x20
   084D F5            [11] 1415 	push	af
   084E 33            [ 6] 1416 	inc	sp
   084F CDr00r00      [17] 1417 	call	_putchar
   0852 33            [ 6] 1418 	inc	sp
                           1419 ;src\main.c:350: puts(ok0);
   0853 2Ar00r00      [16] 1420 	ld	hl, (_ok0)
   0856 E5            [11] 1421 	push	hl
   0857 CDr00r00      [17] 1422 	call	_puts
   085A F1            [10] 1423 	pop	af
   085B                    1424 00225$:
                           1425 ;src\main.c:352: if (resetAtEnd == 1) {
   085B 3Ar44r00      [13] 1426 	ld	a,(#_resetAtEnd + 0)
   085E 3D            [ 4] 1427 	dec	a
   085F 20 11         [12] 1428 	jr	NZ,00227$
                           1429 ;src\main.c:353: puts(anyKeyToReset);
   0861 2Ar00r00      [16] 1430 	ld	hl, (_anyKeyToReset)
   0864 E5            [11] 1431 	push	hl
   0865 CDr00r00      [17] 1432 	call	_puts
   0868 F1            [10] 1433 	pop	af
                           1434 ;src\main.c:354: clearKeyBuf();
   0869 CDr00r00      [17] 1435 	call	_clearKeyBuf
                           1436 ;src\main.c:355: getchar();
   086C CDr00r00      [17] 1437 	call	_getchar
                           1438 ;src\main.c:356: resetSystem();
   086F CDr00r00      [17] 1439 	call	_resetSystem
   0872                    1440 00227$:
                           1441 ;src\main.c:358: restoreHooks();
   0872 CDr00r00      [17] 1442 	call	_restoreHooks
                           1443 ;src\main.c:359: return 0;
   0875 21 00 00      [10] 1444 	ld	hl, #0x0000
   0878                    1445 00239$:
                           1446 ;src\main.c:360: }
   0878 F1            [10] 1447 	pop	af
   0879 F1            [10] 1448 	pop	af
   087A C9            [10] 1449 	ret
   087B                    1450 ___str_0:
   087B 4E 45 58 54 4F 52  1451 	.ascii "NEXTOR_DRIVER"
        5F 44 52 49 56 45
        52
   0888 00                 1452 	.db 0x00
                           1453 	.area _CODE
                           1454 	.area _INITIALIZER
   0000                    1455 __xinit__EXPTBL:
   0000 C1 FC              1456 	.dw #0xfcc1
   0002                    1457 __xinit__DSKSLT:
   0002 48 F3              1458 	.dw #0xf348
   0004                    1459 __xinit__HTIMI:
   0004 9F FD              1460 	.dw #0xfd9f
                           1461 	.area _CABS (ABS)
