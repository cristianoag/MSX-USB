                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.9.0 #11195 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module flash
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FT_SetName
                             13 	.globl _ceilf
                             14 	.globl _strcmp
                             15 	.globl _strcat
                             16 	.globl _puts
                             17 	.globl _sprintf
                             18 	.globl _printf
                             19 	.globl _FcbRead
                             20 	.globl _FcbClose
                             21 	.globl _FcbOpen
                             22 	.globl _ReadSP
                             23 	.globl _MemFill
                             24 	.globl _flash_segment
                             25 	.globl _file_segment
                             26 	.globl _FALSE
                             27 	.globl _TRUE
                             28 	.globl _select_slot_40
                             29 	.globl _select_ramslot_40
                             30 	.globl _flash_ident
                             31 	.globl _find_flash
                             32 	.globl _print_hex_buffer
                             33 	.globl _erase_flash
                             34 	.globl _flash_command_okay
                             35 	.globl _write_flash_segment
                             36 ;--------------------------------------------------------
                             37 ; special function registers
                             38 ;--------------------------------------------------------
                             39 ;--------------------------------------------------------
                             40 ; ram data
                             41 ;--------------------------------------------------------
                             42 	.area _DATA
                     8000    43 _file_segment	=	0x8000
                     4000    44 _flash_segment	=	0x4000
                             45 ;--------------------------------------------------------
                             46 ; ram data
                             47 ;--------------------------------------------------------
                             48 	.area _INITIALIZED
                             49 ;--------------------------------------------------------
                             50 ; absolute external ram data
                             51 ;--------------------------------------------------------
                             52 	.area _DABS (ABS)
                             53 ;--------------------------------------------------------
                             54 ; global & static initialisations
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _GSINIT
                             58 	.area _GSFINAL
                             59 	.area _GSINIT
                             60 ;--------------------------------------------------------
                             61 ; Home
                             62 ;--------------------------------------------------------
                             63 	.area _HOME
                             64 	.area _HOME
                             65 ;--------------------------------------------------------
                             66 ; code
                             67 ;--------------------------------------------------------
                             68 	.area _CODE
                             69 ;src/flash.c:29: void FT_SetName( FCB *p_fcb, const char *p_name )  // Routine servant à vérifier le format du nom de fichier
                             70 ;	---------------------------------
                             71 ; Function FT_SetName
                             72 ; ---------------------------------
   0000                      73 _FT_SetName::
   0000 CDr00r00      [17]   74 	call	___sdcc_enter_ix
   0003 F5            [11]   75 	push	af
   0004 F5            [11]   76 	push	af
   0005 3B            [ 6]   77 	dec	sp
                             78 ;src/flash.c:32: memset( p_fcb, 0, sizeof(FCB) );
   0006 DD 6E 04      [19]   79 	ld	l, 4 (ix)
   0009 DD 66 05      [19]   80 	ld	h, 5 (ix)
   000C 06 25         [ 7]   81 	ld	b, #0x25
   000E                      82 00178$:
   000E 36 00         [10]   83 	ld	(hl), #0x00
   0010 23            [ 6]   84 	inc	hl
   0011 10 FB         [13]   85 	djnz	00178$
                             86 ;src/flash.c:33: for( i = 0; i < 11; i++ ) {
   0013 DD 5E 04      [19]   87 	ld	e, 4 (ix)
   0016 DD 56 05      [19]   88 	ld	d, 5 (ix)
   0019 21 01 00      [10]   89 	ld	hl, #0x0001
   001C 19            [11]   90 	add	hl, de
   001D DD 75 FC      [19]   91 	ld	-4 (ix), l
   0020 DD 74 FD      [19]   92 	ld	-3 (ix), h
   0023 0E 00         [ 7]   93 	ld	c, #0x00
   0025                      94 00106$:
                             95 ;src/flash.c:34: p_fcb->name[i] = ' ';
   0025 DD 6E FC      [19]   96 	ld	l, -4 (ix)
   0028 DD 66 FD      [19]   97 	ld	h, -3 (ix)
   002B 06 00         [ 7]   98 	ld	b, #0x00
   002D 09            [11]   99 	add	hl, bc
   002E 36 20         [10]  100 	ld	(hl), #0x20
                            101 ;src/flash.c:33: for( i = 0; i < 11; i++ ) {
   0030 0C            [ 4]  102 	inc	c
   0031 79            [ 4]  103 	ld	a, c
   0032 D6 0B         [ 7]  104 	sub	a, #0x0b
   0034 38 EF         [12]  105 	jr	C,00106$
                            106 ;src/flash.c:36: for( i = 0; (i < 8) && (p_name[i] != 0) && (p_name[i] != '.'); i++ ) {
   0036 DD 36 FE 00   [19]  107 	ld	-2 (ix), #0x00
   003A                     108 00111$:
   003A DD 7E 06      [19]  109 	ld	a, 6 (ix)
   003D DD 86 FE      [19]  110 	add	a, -2 (ix)
   0040 6F            [ 4]  111 	ld	l, a
   0041 DD 7E 07      [19]  112 	ld	a, 7 (ix)
   0044 CE 00         [ 7]  113 	adc	a, #0x00
   0046 67            [ 4]  114 	ld	h, a
   0047 DD 7E FE      [19]  115 	ld	a, -2 (ix)
   004A 3C            [ 4]  116 	inc	a
   004B DD 77 FF      [19]  117 	ld	-1 (ix), a
   004E 4E            [ 7]  118 	ld	c, (hl)
   004F 79            [ 4]  119 	ld	a, c
   0050 D6 2E         [ 7]  120 	sub	a, #0x2e
   0052 20 03         [12]  121 	jr	NZ, 00180$
   0054 3E 01         [ 7]  122 	ld	a, #0x01
   0056 20                  123 	.db	#0x20
   0057                     124 00180$:
   0057 AF            [ 4]  125 	xor	a, a
   0058                     126 00181$:
   0058 6F            [ 4]  127 	ld	l, a
   0059 DD 7E FE      [19]  128 	ld	a, -2 (ix)
   005C D6 08         [ 7]  129 	sub	a, #0x08
   005E 30 1E         [12]  130 	jr	NC,00102$
   0060 79            [ 4]  131 	ld	a, c
   0061 B7            [ 4]  132 	or	a, a
   0062 28 1A         [12]  133 	jr	Z,00102$
   0064 CB 45         [ 8]  134 	bit	0, l
   0066 20 16         [12]  135 	jr	NZ,00102$
                            136 ;src/flash.c:37: p_fcb->name[i] =  p_name[i];
   0068 DD 7E FC      [19]  137 	ld	a, -4 (ix)
   006B DD 86 FE      [19]  138 	add	a, -2 (ix)
   006E 6F            [ 4]  139 	ld	l, a
   006F DD 7E FD      [19]  140 	ld	a, -3 (ix)
   0072 CE 00         [ 7]  141 	adc	a, #0x00
   0074 67            [ 4]  142 	ld	h, a
   0075 71            [ 7]  143 	ld	(hl), c
                            144 ;src/flash.c:36: for( i = 0; (i < 8) && (p_name[i] != 0) && (p_name[i] != '.'); i++ ) {
   0076 DD 7E FF      [19]  145 	ld	a, -1 (ix)
   0079 DD 77 FE      [19]  146 	ld	-2 (ix), a
   007C 18 BC         [12]  147 	jr	00111$
   007E                     148 00102$:
                            149 ;src/flash.c:39: if( p_name[i] == '.' ) {
   007E 7D            [ 4]  150 	ld	a, l
   007F B7            [ 4]  151 	or	a, a
   0080 28 4C         [12]  152 	jr	Z,00118$
                            153 ;src/flash.c:40: i++;
   0082 DD 7E FF      [19]  154 	ld	a, -1 (ix)
   0085 DD 77 FB      [19]  155 	ld	-5 (ix), a
                            156 ;src/flash.c:41: for( j = 0; (j < 3) && (p_name[i + j] != 0) && (p_name[i + j] != '.'); j++ ) {
   0088 21 09 00      [10]  157 	ld	hl, #0x0009
   008B 19            [11]  158 	add	hl, de
   008C EB            [ 4]  159 	ex	de, hl
   008D 0E 00         [ 7]  160 	ld	c, #0x00
   008F                     161 00116$:
   008F 79            [ 4]  162 	ld	a, c
   0090 D6 03         [ 7]  163 	sub	a, #0x03
   0092 30 3A         [12]  164 	jr	NC,00118$
   0094 DD 6E FB      [19]  165 	ld	l, -5 (ix)
   0097 26 00         [ 7]  166 	ld	h, #0x00
   0099 DD 71 FC      [19]  167 	ld	-4 (ix), c
   009C DD 36 FD 00   [19]  168 	ld	-3 (ix), #0x00
   00A0 7D            [ 4]  169 	ld	a, l
   00A1 DD 86 FC      [19]  170 	add	a, -4 (ix)
   00A4 DD 77 FE      [19]  171 	ld	-2 (ix), a
   00A7 7C            [ 4]  172 	ld	a, h
   00A8 DD 8E FD      [19]  173 	adc	a, -3 (ix)
   00AB DD 77 FF      [19]  174 	ld	-1 (ix), a
   00AE DD 7E 06      [19]  175 	ld	a, 6 (ix)
   00B1 DD 86 FE      [19]  176 	add	a, -2 (ix)
   00B4 6F            [ 4]  177 	ld	l, a
   00B5 DD 7E 07      [19]  178 	ld	a, 7 (ix)
   00B8 DD 8E FF      [19]  179 	adc	a, -1 (ix)
   00BB 67            [ 4]  180 	ld	h, a
   00BC 46            [ 7]  181 	ld	b, (hl)
   00BD 78            [ 4]  182 	ld	a, b
   00BE B7            [ 4]  183 	or	a, a
   00BF 28 0D         [12]  184 	jr	Z,00118$
   00C1 78            [ 4]  185 	ld	a, b
   00C2 D6 2E         [ 7]  186 	sub	a, #0x2e
   00C4 28 08         [12]  187 	jr	Z,00118$
                            188 ;src/flash.c:42: p_fcb->ext[j] =  p_name[i + j] ;
   00C6 69            [ 4]  189 	ld	l, c
   00C7 26 00         [ 7]  190 	ld	h, #0x00
   00C9 19            [11]  191 	add	hl, de
   00CA 70            [ 7]  192 	ld	(hl), b
                            193 ;src/flash.c:41: for( j = 0; (j < 3) && (p_name[i + j] != 0) && (p_name[i + j] != '.'); j++ ) {
   00CB 0C            [ 4]  194 	inc	c
   00CC 18 C1         [12]  195 	jr	00116$
   00CE                     196 00118$:
                            197 ;src/flash.c:45: }
   00CE DD F9         [10]  198 	ld	sp, ix
   00D0 DD E1         [14]  199 	pop	ix
   00D2 C9            [10]  200 	ret
   00D3                     201 _Done_Version_tag:
   00D3 4D 61 64 65 20 77   202 	.ascii "Made with FUSION-C 1.3 R21010 (c)EBSOFT:2021"
        69 74 68 20 46 55
        53 49 4F 4E 2D 43
        20 31 2E 33 20 52
        32 31 30 31 30 20
        28 63 29 45 42 53
        4F 46 54 3A 32 30
        32 31
   00FF 00                  203 	.db 0x00
   0100                     204 _TRUE:
   0100 01                  205 	.db #0x01	; 1
   0101                     206 _FALSE:
   0101 00                  207 	.db #0x00	; 0
                            208 ;src/flash.c:72: int main(char *argv[], int argc)
                            209 ;	---------------------------------
                            210 ; Function main
                            211 ; ---------------------------------
   0102                     212 _main::
   0102 CDr00r00      [17]  213 	call	___sdcc_enter_ix
   0105 21 C9 FF      [10]  214 	ld	hl, #-55
   0108 39            [11]  215 	add	hl, sp
   0109 F9            [ 6]  216 	ld	sp, hl
                            217 ;src/flash.c:74: uint8_t slot=0;
   010A DD 36 EE 00   [19]  218 	ld	-18 (ix), #0x00
                            219 ;src/flash.c:75: uint8_t argnr=0;
   010E DD 36 FF 00   [19]  220 	ld	-1 (ix), #0x00
                            221 ;src/flash.c:78: printf ("Based on the original code by S0urceror\r\n\r\n");
   0112 21rDCr05      [10]  222 	ld	hl, #___str_28
   0115 E5            [11]  223 	push	hl
   0116 CDr00r00      [17]  224 	call	_puts
   0119 F1            [10]  225 	pop	af
                            226 ;src/flash.c:79: if (argc < 1)
   011A DD 7E 06      [19]  227 	ld	a, 6 (ix)
   011D D6 01         [ 7]  228 	sub	a, #0x01
   011F DD 7E 07      [19]  229 	ld	a, 7 (ix)
   0122 17            [ 4]  230 	rla
   0123 3F            [ 4]  231 	ccf
   0124 1F            [ 4]  232 	rra
   0125 DE 80         [ 7]  233 	sbc	a, #0x80
   0127 30 0E         [12]  234 	jr	NC,00102$
                            235 ;src/flash.c:81: printf ("FLASH.COM [flags] [romfile]\r\n\r\nOptions:\r\n/S0 - skip detection and select slot 0\r\n/S1 - skip detection and select slot 1\r\n/S2 - skip detection and select slot 2\r\n/S3 - skip detection and select slot 3\r\n");
   0129 21rFDr03      [10]  236 	ld	hl, #___str_8
   012C E5            [11]  237 	push	hl
   012D CDr00r00      [17]  238 	call	_puts
   0130 F1            [10]  239 	pop	af
                            240 ;src/flash.c:82: return (0);
   0131 21 00 00      [10]  241 	ld	hl, #0x0000
   0134 C3rF8r03      [10]  242 	jp	00129$
   0137                     243 00102$:
                            244 ;src/flash.c:84: if (ReadSP ()<(0x8000+SEGMENT_SIZE))
   0137 CDr00r00      [17]  245 	call	_ReadSP
   013A 7C            [ 4]  246 	ld	a, h
   013B D6 A0         [ 7]  247 	sub	a, #0xa0
   013D 30 0E         [12]  248 	jr	NC,00104$
                            249 ;src/flash.c:86: printf ("Not enough memory to read file segment");
   013F 21rC6r04      [10]  250 	ld	hl, #___str_9
   0142 E5            [11]  251 	push	hl
   0143 CDr00r00      [17]  252 	call	_printf
   0146 F1            [10]  253 	pop	af
                            254 ;src/flash.c:87: return (0);
   0147 21 00 00      [10]  255 	ld	hl, #0x0000
   014A C3rF8r03      [10]  256 	jp	00129$
   014D                     257 00104$:
                            258 ;src/flash.c:89: if (strcmp (argv[0],"/S0")==0) {
   014D DD 4E 04      [19]  259 	ld	c, 4 (ix)
   0150 DD 46 05      [19]  260 	ld	b, 5 (ix)
   0153 69            [ 4]  261 	ld	l, c
   0154 60            [ 4]  262 	ld	h, b
   0155 5E            [ 7]  263 	ld	e, (hl)
   0156 23            [ 6]  264 	inc	hl
   0157 56            [ 7]  265 	ld	d, (hl)
   0158 C5            [11]  266 	push	bc
   0159 21rEDr04      [10]  267 	ld	hl, #___str_10
   015C E5            [11]  268 	push	hl
   015D D5            [11]  269 	push	de
   015E CDr00r00      [17]  270 	call	_strcmp
   0161 F1            [10]  271 	pop	af
   0162 F1            [10]  272 	pop	af
   0163 C1            [10]  273 	pop	bc
   0164 7C            [ 4]  274 	ld	a, h
   0165 B5            [ 4]  275 	or	a, l
   0166 20 08         [12]  276 	jr	NZ,00106$
                            277 ;src/flash.c:90: slot = 0;argnr++;
   0168 DD 36 EE 00   [19]  278 	ld	-18 (ix), #0x00
   016C DD 36 FF 01   [19]  279 	ld	-1 (ix), #0x01
   0170                     280 00106$:
                            281 ;src/flash.c:92: if (strcmp (argv[0],"/S1")==0) {
   0170 69            [ 4]  282 	ld	l, c
   0171 60            [ 4]  283 	ld	h, b
   0172 5E            [ 7]  284 	ld	e, (hl)
   0173 23            [ 6]  285 	inc	hl
   0174 56            [ 7]  286 	ld	d, (hl)
   0175 C5            [11]  287 	push	bc
   0176 21rF1r04      [10]  288 	ld	hl, #___str_11
   0179 E5            [11]  289 	push	hl
   017A D5            [11]  290 	push	de
   017B CDr00r00      [17]  291 	call	_strcmp
   017E F1            [10]  292 	pop	af
   017F F1            [10]  293 	pop	af
   0180 C1            [10]  294 	pop	bc
   0181 7C            [ 4]  295 	ld	a, h
   0182 B5            [ 4]  296 	or	a, l
   0183 20 07         [12]  297 	jr	NZ,00108$
                            298 ;src/flash.c:93: slot = 1;argnr++;
   0185 DD 36 EE 01   [19]  299 	ld	-18 (ix), #0x01
   0189 DD 34 FF      [23]  300 	inc	-1 (ix)
   018C                     301 00108$:
                            302 ;src/flash.c:95: if (strcmp (argv[0],"/S2")==0) {
   018C 69            [ 4]  303 	ld	l, c
   018D 60            [ 4]  304 	ld	h, b
   018E 5E            [ 7]  305 	ld	e, (hl)
   018F 23            [ 6]  306 	inc	hl
   0190 56            [ 7]  307 	ld	d, (hl)
   0191 C5            [11]  308 	push	bc
   0192 21rF5r04      [10]  309 	ld	hl, #___str_12
   0195 E5            [11]  310 	push	hl
   0196 D5            [11]  311 	push	de
   0197 CDr00r00      [17]  312 	call	_strcmp
   019A F1            [10]  313 	pop	af
   019B F1            [10]  314 	pop	af
   019C C1            [10]  315 	pop	bc
   019D 7C            [ 4]  316 	ld	a, h
   019E B5            [ 4]  317 	or	a, l
   019F 20 07         [12]  318 	jr	NZ,00110$
                            319 ;src/flash.c:96: slot = 2;argnr++;
   01A1 DD 36 EE 02   [19]  320 	ld	-18 (ix), #0x02
   01A5 DD 34 FF      [23]  321 	inc	-1 (ix)
   01A8                     322 00110$:
                            323 ;src/flash.c:98: if (strcmp (argv[0],"/S3")==0) {
   01A8 69            [ 4]  324 	ld	l, c
   01A9 60            [ 4]  325 	ld	h, b
   01AA 5E            [ 7]  326 	ld	e, (hl)
   01AB 23            [ 6]  327 	inc	hl
   01AC 56            [ 7]  328 	ld	d, (hl)
   01AD C5            [11]  329 	push	bc
   01AE 21rF9r04      [10]  330 	ld	hl, #___str_13
   01B1 E5            [11]  331 	push	hl
   01B2 D5            [11]  332 	push	de
   01B3 CDr00r00      [17]  333 	call	_strcmp
   01B6 F1            [10]  334 	pop	af
   01B7 F1            [10]  335 	pop	af
   01B8 C1            [10]  336 	pop	bc
   01B9 7C            [ 4]  337 	ld	a, h
   01BA B5            [ 4]  338 	or	a, l
   01BB 20 07         [12]  339 	jr	NZ,00112$
                            340 ;src/flash.c:99: slot = 3;argnr++;
   01BD DD 36 EE 03   [19]  341 	ld	-18 (ix), #0x03
   01C1 DD 34 FF      [23]  342 	inc	-1 (ix)
   01C4                     343 00112$:
                            344 ;src/flash.c:102: if (argnr==0)
   01C4 DD 7E FF      [19]  345 	ld	a, -1 (ix)
   01C7 B7            [ 4]  346 	or	a, a
   01C8 20 1B         [12]  347 	jr	NZ,00116$
                            348 ;src/flash.c:105: if (!((slot = find_flash())<4))
   01CA C5            [11]  349 	push	bc
   01CB CDrE8r06      [17]  350 	call	_find_flash
   01CE 7D            [ 4]  351 	ld	a, l
   01CF C1            [10]  352 	pop	bc
   01D0 DD 77 EE      [19]  353 	ld	-18 (ix), a
   01D3 D6 04         [ 7]  354 	sub	a, #0x04
   01D5 38 0E         [12]  355 	jr	C,00116$
                            356 ;src/flash.c:107: printf ("Cannot find slot with flash\r\n");
   01D7 21rFDr04      [10]  357 	ld	hl, #___str_15
   01DA E5            [11]  358 	push	hl
   01DB CDr00r00      [17]  359 	call	_puts
   01DE F1            [10]  360 	pop	af
                            361 ;src/flash.c:108: return (0);
   01DF 21 00 00      [10]  362 	ld	hl, #0x0000
   01E2 C3rF8r03      [10]  363 	jp	00129$
   01E5                     364 00116$:
                            365 ;src/flash.c:111: printf ("Found flash in slot: %d\r\n",slot);
   01E5 DD 5E EE      [19]  366 	ld	e, -18 (ix)
   01E8 16 00         [ 7]  367 	ld	d, #0x00
   01EA C5            [11]  368 	push	bc
   01EB D5            [11]  369 	push	de
   01EC 21r1Ar05      [10]  370 	ld	hl, #___str_16
   01EF E5            [11]  371 	push	hl
   01F0 CDr00r00      [17]  372 	call	_printf
   01F3 F1            [10]  373 	pop	af
   01F4 F1            [10]  374 	pop	af
   01F5 C1            [10]  375 	pop	bc
                            376 ;src/flash.c:116: FT_SetName (&fcb,argv[argnr]);
   01F6 DD 6E FF      [19]  377 	ld	l, -1 (ix)
   01F9 26 00         [ 7]  378 	ld	h, #0x00
   01FB 29            [11]  379 	add	hl, hl
   01FC 09            [11]  380 	add	hl, bc
   01FD 5E            [ 7]  381 	ld	e, (hl)
   01FE 23            [ 6]  382 	inc	hl
   01FF 56            [ 7]  383 	ld	d, (hl)
   0200 21 00 00      [10]  384 	ld	hl, #0
   0203 39            [11]  385 	add	hl, sp
   0204 DD 75 EF      [19]  386 	ld	-17 (ix), l
   0207 DD 74 F0      [19]  387 	ld	-16 (ix), h
   020A C5            [11]  388 	push	bc
   020B D5            [11]  389 	push	de
   020C E5            [11]  390 	push	hl
   020D CDr00r00      [17]  391 	call	_FT_SetName
   0210 F1            [10]  392 	pop	af
   0211 F1            [10]  393 	pop	af
   0212 C1            [10]  394 	pop	bc
                            395 ;src/flash.c:117: if(fcb_open( &fcb ) != FCB_SUCCESS) 
   0213 DD 5E EF      [19]  396 	ld	e, -17 (ix)
   0216 DD 56 F0      [19]  397 	ld	d, -16 (ix)
   0219 C5            [11]  398 	push	bc
   021A D5            [11]  399 	push	de
   021B CDr00r00      [17]  400 	call	_FcbOpen
   021E F1            [10]  401 	pop	af
   021F 7D            [ 4]  402 	ld	a, l
   0220 C1            [10]  403 	pop	bc
   0221 B7            [ 4]  404 	or	a, a
   0222 28 0E         [12]  405 	jr	Z,00118$
                            406 ;src/flash.c:119: printf ("Error: opening file\r\n");
   0224 21r34r05      [10]  407 	ld	hl, #___str_18
   0227 E5            [11]  408 	push	hl
   0228 CDr00r00      [17]  409 	call	_puts
   022B F1            [10]  410 	pop	af
                            411 ;src/flash.c:120: return (0);   
   022C 21 00 00      [10]  412 	ld	hl, #0x0000
   022F C3rF8r03      [10]  413 	jp	00129$
   0232                     414 00118$:
                            415 ;src/flash.c:122: printf ("Opened: %s\r\n",argv[0]);
   0232 69            [ 4]  416 	ld	l, c
   0233 60            [ 4]  417 	ld	h, b
   0234 4E            [ 7]  418 	ld	c, (hl)
   0235 23            [ 6]  419 	inc	hl
   0236 46            [ 7]  420 	ld	b, (hl)
   0237 C5            [11]  421 	push	bc
   0238 21r49r05      [10]  422 	ld	hl, #___str_19
   023B E5            [11]  423 	push	hl
   023C CDr00r00      [17]  424 	call	_printf
   023F F1            [10]  425 	pop	af
   0240 F1            [10]  426 	pop	af
                            427 ;src/flash.c:124: unsigned long romsize = fcb.file_size;
   0241 DD 6E EF      [19]  428 	ld	l, -17 (ix)
   0244 DD 66 F0      [19]  429 	ld	h, -16 (ix)
   0247 11 10 00      [10]  430 	ld	de, #0x0010
   024A 19            [11]  431 	add	hl, de
   024B 7E            [ 7]  432 	ld	a, (hl)
   024C DD 77 F1      [19]  433 	ld	-15 (ix), a
   024F 23            [ 6]  434 	inc	hl
   0250 7E            [ 7]  435 	ld	a, (hl)
   0251 DD 77 F2      [19]  436 	ld	-14 (ix), a
   0254 23            [ 6]  437 	inc	hl
   0255 7E            [ 7]  438 	ld	a, (hl)
   0256 DD 77 F3      [19]  439 	ld	-13 (ix), a
   0259 23            [ 6]  440 	inc	hl
   025A 7E            [ 7]  441 	ld	a, (hl)
   025B DD 77 F4      [19]  442 	ld	-12 (ix), a
                            443 ;src/flash.c:125: printf("Filesize is %ld bytes\r\n", romsize);
   025E DD 6E F3      [19]  444 	ld	l, -13 (ix)
   0261 DD 66 F4      [19]  445 	ld	h, -12 (ix)
   0264 E5            [11]  446 	push	hl
   0265 DD 6E F1      [19]  447 	ld	l, -15 (ix)
   0268 DD 66 F2      [19]  448 	ld	h, -14 (ix)
   026B E5            [11]  449 	push	hl
   026C 21r56r05      [10]  450 	ld	hl, #___str_20
   026F E5            [11]  451 	push	hl
   0270 CDr00r00      [17]  452 	call	_printf
   0273 F1            [10]  453 	pop	af
   0274 F1            [10]  454 	pop	af
   0275 F1            [10]  455 	pop	af
                            456 ;src/flash.c:128: float endsector = romsize;
   0276 DD 6E F3      [19]  457 	ld	l, -13 (ix)
   0279 DD 66 F4      [19]  458 	ld	h, -12 (ix)
   027C E5            [11]  459 	push	hl
   027D DD 6E F1      [19]  460 	ld	l, -15 (ix)
   0280 DD 66 F2      [19]  461 	ld	h, -14 (ix)
   0283 E5            [11]  462 	push	hl
   0284 CDr00r00      [17]  463 	call	___ulong2fs
   0287 F1            [10]  464 	pop	af
   0288 F1            [10]  465 	pop	af
   0289 4D            [ 4]  466 	ld	c, l
   028A 44            [ 4]  467 	ld	b, h
                            468 ;src/flash.c:129: endsector = endsector / 65536;
   028B 21 80 47      [10]  469 	ld	hl, #0x4780
   028E E5            [11]  470 	push	hl
   028F 21 00 00      [10]  471 	ld	hl, #0x0000
   0292 E5            [11]  472 	push	hl
   0293 D5            [11]  473 	push	de
   0294 C5            [11]  474 	push	bc
   0295 CDr00r00      [17]  475 	call	___fsdiv
   0298 F1            [10]  476 	pop	af
   0299 F1            [10]  477 	pop	af
   029A F1            [10]  478 	pop	af
   029B F1            [10]  479 	pop	af
                            480 ;src/flash.c:130: endsector = ceilf (endsector);
   029C D5            [11]  481 	push	de
   029D E5            [11]  482 	push	hl
   029E CDr00r00      [17]  483 	call	_ceilf
   02A1 F1            [10]  484 	pop	af
   02A2 F1            [10]  485 	pop	af
                            486 ;src/flash.c:131: if (!erase_flash (slot)) 
   02A3 DD 7E EE      [19]  487 	ld	a, -18 (ix)
   02A6 F5            [11]  488 	push	af
   02A7 33            [ 6]  489 	inc	sp
   02A8 CDrDEr07      [17]  490 	call	_erase_flash
   02AB 33            [ 6]  491 	inc	sp
   02AC 7D            [ 4]  492 	ld	a, l
   02AD B7            [ 4]  493 	or	a, a
   02AE 20 06         [12]  494 	jr	NZ,00120$
                            495 ;src/flash.c:132: return (0); 
   02B0 21 00 00      [10]  496 	ld	hl, #0x0000
   02B3 C3rF8r03      [10]  497 	jp	00129$
   02B6                     498 00120$:
                            499 ;src/flash.c:135: unsigned long total_bytes_written = 0;
   02B6 AF            [ 4]  500 	xor	a, a
   02B7 DD 77 F5      [19]  501 	ld	-11 (ix), a
   02BA DD 77 F6      [19]  502 	ld	-10 (ix), a
   02BD DD 77 F7      [19]  503 	ld	-9 (ix), a
   02C0 DD 77 F8      [19]  504 	ld	-8 (ix), a
                            505 ;src/flash.c:140: while ( total_bytes_written < romsize) 
   02C3 DD 7E EF      [19]  506 	ld	a, -17 (ix)
   02C6 DD 77 F9      [19]  507 	ld	-7 (ix), a
   02C9 DD 7E F0      [19]  508 	ld	a, -16 (ix)
   02CC DD 77 FA      [19]  509 	ld	-6 (ix), a
   02CF DD 36 FF 00   [19]  510 	ld	-1 (ix), #0x00
   02D3                     511 00126$:
   02D3 DD 7E F5      [19]  512 	ld	a, -11 (ix)
   02D6 DD 96 F1      [19]  513 	sub	a, -15 (ix)
   02D9 DD 7E F6      [19]  514 	ld	a, -10 (ix)
   02DC DD 9E F2      [19]  515 	sbc	a, -14 (ix)
   02DF DD 7E F7      [19]  516 	ld	a, -9 (ix)
   02E2 DD 9E F3      [19]  517 	sbc	a, -13 (ix)
   02E5 DD 7E F8      [19]  518 	ld	a, -8 (ix)
   02E8 DD 9E F4      [19]  519 	sbc	a, -12 (ix)
   02EB D2rE2r03      [10]  520 	jp	NC, 00128$
                            521 ;src/flash.c:143: MemFill (file_segment,0xff,SEGMENT_SIZE);
   02EE 21 00 20      [10]  522 	ld	hl, #0x2000
   02F1 E5            [11]  523 	push	hl
   02F2 3E FF         [ 7]  524 	ld	a, #0xff
   02F4 F5            [11]  525 	push	af
   02F5 33            [ 6]  526 	inc	sp
   02F6 21 00 80      [10]  527 	ld	hl, #_file_segment
   02F9 E5            [11]  528 	push	hl
   02FA CDr00r00      [17]  529 	call	_MemFill
   02FD F1            [10]  530 	pop	af
   02FE F1            [10]  531 	pop	af
   02FF 33            [ 6]  532 	inc	sp
                            533 ;src/flash.c:144: bytes_read = fcb_read( &fcb, file_segment,SEGMENT_SIZE);
   0300 DD 4E F9      [19]  534 	ld	c, -7 (ix)
   0303 DD 46 FA      [19]  535 	ld	b, -6 (ix)
   0306 21 00 20      [10]  536 	ld	hl, #0x2000
   0309 E5            [11]  537 	push	hl
   030A 21 00 80      [10]  538 	ld	hl, #_file_segment
   030D E5            [11]  539 	push	hl
   030E C5            [11]  540 	push	bc
   030F CDr00r00      [17]  541 	call	_FcbRead
   0312 F1            [10]  542 	pop	af
   0313 F1            [10]  543 	pop	af
   0314 F1            [10]  544 	pop	af
                            545 ;src/flash.c:148: if (bytes_read > 0) {
   0315 AF            [ 4]  546 	xor	a, a
   0316 BD            [ 4]  547 	cp	a, l
   0317 9C            [ 4]  548 	sbc	a, h
   0318 E2r1Dr03      [10]  549 	jp	PO, 00201$
   031B EE 80         [ 7]  550 	xor	a, #0x80
   031D                     551 00201$:
   031D F2rDAr03      [10]  552 	jp	P, 00124$
                            553 ;src/flash.c:150: int progress = (int)((total_bytes_written + bytes_read) * 20 / romsize); // Scale to 20 chars
   0320 7C            [ 4]  554 	ld	a, h
   0321 17            [ 4]  555 	rla
   0322 9F            [ 4]  556 	sbc	a, a
   0323 4F            [ 4]  557 	ld	c, a
   0324 47            [ 4]  558 	ld	b, a
   0325 7D            [ 4]  559 	ld	a, l
   0326 DD 86 F5      [19]  560 	add	a, -11 (ix)
   0329 DD 77 FB      [19]  561 	ld	-5 (ix), a
   032C 7C            [ 4]  562 	ld	a, h
   032D DD 8E F6      [19]  563 	adc	a, -10 (ix)
   0330 DD 77 FC      [19]  564 	ld	-4 (ix), a
   0333 79            [ 4]  565 	ld	a, c
   0334 DD 8E F7      [19]  566 	adc	a, -9 (ix)
   0337 DD 77 FD      [19]  567 	ld	-3 (ix), a
   033A 78            [ 4]  568 	ld	a, b
   033B DD 8E F8      [19]  569 	adc	a, -8 (ix)
   033E DD 77 FE      [19]  570 	ld	-2 (ix), a
   0341 DD 6E FD      [19]  571 	ld	l, -3 (ix)
   0344 DD 66 FE      [19]  572 	ld	h, -2 (ix)
   0347 E5            [11]  573 	push	hl
   0348 DD 6E FB      [19]  574 	ld	l, -5 (ix)
   034B DD 66 FC      [19]  575 	ld	h, -4 (ix)
   034E E5            [11]  576 	push	hl
   034F 21 00 00      [10]  577 	ld	hl, #0x0000
   0352 E5            [11]  578 	push	hl
   0353 21 14 00      [10]  579 	ld	hl, #0x0014
   0356 E5            [11]  580 	push	hl
   0357 CDr00r00      [17]  581 	call	__mullong
   035A F1            [10]  582 	pop	af
   035B F1            [10]  583 	pop	af
   035C F1            [10]  584 	pop	af
   035D F1            [10]  585 	pop	af
   035E 4D            [ 4]  586 	ld	c, l
   035F 44            [ 4]  587 	ld	b, h
   0360 DD 6E F3      [19]  588 	ld	l, -13 (ix)
   0363 DD 66 F4      [19]  589 	ld	h, -12 (ix)
   0366 E5            [11]  590 	push	hl
   0367 DD 6E F1      [19]  591 	ld	l, -15 (ix)
   036A DD 66 F2      [19]  592 	ld	h, -14 (ix)
   036D E5            [11]  593 	push	hl
   036E D5            [11]  594 	push	de
   036F C5            [11]  595 	push	bc
   0370 CDr00r00      [17]  596 	call	__divulong
   0373 F1            [10]  597 	pop	af
   0374 F1            [10]  598 	pop	af
   0375 F1            [10]  599 	pop	af
   0376 F1            [10]  600 	pop	af
   0377 EB            [ 4]  601 	ex	de, hl
                            602 ;src/flash.c:151: printf("[%-20s] %ld/%ld \r", "####################" + (20 - progress), total_bytes_written + bytes_read, romsize); // write 8k segment (or partial segment)
   0378 21 14 00      [10]  603 	ld	hl, #0x0014
   037B BF            [ 4]  604 	cp	a, a
   037C ED 52         [15]  605 	sbc	hl, de
   037E 11r80r05      [10]  606 	ld	de, #___str_22
   0381 19            [11]  607 	add	hl, de
   0382 4D            [ 4]  608 	ld	c, l
   0383 44            [ 4]  609 	ld	b, h
   0384 DD 6E F3      [19]  610 	ld	l, -13 (ix)
   0387 DD 66 F4      [19]  611 	ld	h, -12 (ix)
   038A E5            [11]  612 	push	hl
   038B DD 6E F1      [19]  613 	ld	l, -15 (ix)
   038E DD 66 F2      [19]  614 	ld	h, -14 (ix)
   0391 E5            [11]  615 	push	hl
   0392 DD 6E FD      [19]  616 	ld	l, -3 (ix)
   0395 DD 66 FE      [19]  617 	ld	h, -2 (ix)
   0398 E5            [11]  618 	push	hl
   0399 DD 6E FB      [19]  619 	ld	l, -5 (ix)
   039C DD 66 FC      [19]  620 	ld	h, -4 (ix)
   039F E5            [11]  621 	push	hl
   03A0 C5            [11]  622 	push	bc
   03A1 21r6Er05      [10]  623 	ld	hl, #___str_21
   03A4 E5            [11]  624 	push	hl
   03A5 CDr00r00      [17]  625 	call	_printf
   03A8 21 0C 00      [10]  626 	ld	hl, #12
   03AB 39            [11]  627 	add	hl, sp
   03AC F9            [ 6]  628 	ld	sp, hl
                            629 ;src/flash.c:154: if (!write_flash_segment(slot, segmentnr))
   03AD DD 66 FF      [19]  630 	ld	h, -1 (ix)
   03B0 DD 6E EE      [19]  631 	ld	l, -18 (ix)
   03B3 E5            [11]  632 	push	hl
   03B4 CDrF5r08      [17]  633 	call	_write_flash_segment
   03B7 F1            [10]  634 	pop	af
   03B8 7D            [ 4]  635 	ld	a, l
   03B9 B7            [ 4]  636 	or	a, a
   03BA 28 26         [12]  637 	jr	Z,00128$
                            638 ;src/flash.c:158: total_bytes_written += bytes_read;
   03BC DD 4E FB      [19]  639 	ld	c, -5 (ix)
   03BF DD 46 FC      [19]  640 	ld	b, -4 (ix)
   03C2 DD 5E FD      [19]  641 	ld	e, -3 (ix)
   03C5 DD 56 FE      [19]  642 	ld	d, -2 (ix)
   03C8 DD 71 F5      [19]  643 	ld	-11 (ix), c
   03CB DD 70 F6      [19]  644 	ld	-10 (ix), b
   03CE DD 73 F7      [19]  645 	ld	-9 (ix), e
   03D1 DD 72 F8      [19]  646 	ld	-8 (ix), d
                            647 ;src/flash.c:159: segmentnr++;
   03D4 DD 34 FF      [23]  648 	inc	-1 (ix)
   03D7 C3rD3r02      [10]  649 	jp	00126$
   03DA                     650 00124$:
                            651 ;src/flash.c:163: printf("Error reading file or end of file reached\r\n");
   03DA 21r95r05      [10]  652 	ld	hl, #___str_24
   03DD E5            [11]  653 	push	hl
   03DE CDr00r00      [17]  654 	call	_puts
   03E1 F1            [10]  655 	pop	af
                            656 ;src/flash.c:164: break;
   03E2                     657 00128$:
                            658 ;src/flash.c:170: printf("\nWrite operation complete!\r\n");
   03E2 21rC0r05      [10]  659 	ld	hl, #___str_26
   03E5 E5            [11]  660 	push	hl
   03E6 CDr00r00      [17]  661 	call	_puts
   03E9 F1            [10]  662 	pop	af
                            663 ;src/flash.c:171: fcb_close (&fcb);
   03EA DD 4E EF      [19]  664 	ld	c, -17 (ix)
   03ED DD 46 F0      [19]  665 	ld	b, -16 (ix)
   03F0 C5            [11]  666 	push	bc
   03F1 CDr00r00      [17]  667 	call	_FcbClose
   03F4 F1            [10]  668 	pop	af
                            669 ;src/flash.c:172: return(0);
   03F5 21 00 00      [10]  670 	ld	hl, #0x0000
   03F8                     671 00129$:
                            672 ;src/flash.c:173: }
   03F8 DD F9         [10]  673 	ld	sp, ix
   03FA DD E1         [14]  674 	pop	ix
   03FC C9            [10]  675 	ret
   03FD                     676 ___str_8:
   03FD 46 4C 41 53 48 2E   677 	.ascii "FLASH.COM [flags] [romfile]"
        43 4F 4D 20 5B 66
        6C 61 67 73 5D 20
        5B 72 6F 6D 66 69
        6C 65 5D
   0418 0D                  678 	.db 0x0d
   0419 0A                  679 	.db 0x0a
   041A 0D                  680 	.db 0x0d
   041B 0A                  681 	.db 0x0a
   041C 4F 70 74 69 6F 6E   682 	.ascii "Options:"
        73 3A
   0424 0D                  683 	.db 0x0d
   0425 0A                  684 	.db 0x0a
   0426 2F 53 30 20 2D 20   685 	.ascii "/S0 - skip detection and select slot 0"
        73 6B 69 70 20 64
        65 74 65 63 74 69
        6F 6E 20 61 6E 64
        20 73 65 6C 65 63
        74 20 73 6C 6F 74
        20 30
   044C 0D                  686 	.db 0x0d
   044D 0A                  687 	.db 0x0a
   044E 2F 53 31 20 2D 20   688 	.ascii "/S1 - skip detection and select slot 1"
        73 6B 69 70 20 64
        65 74 65 63 74 69
        6F 6E 20 61 6E 64
        20 73 65 6C 65 63
        74 20 73 6C 6F 74
        20 31
   0474 0D                  689 	.db 0x0d
   0475 0A                  690 	.db 0x0a
   0476 2F 53 32 20 2D 20   691 	.ascii "/S2 - skip detection and select slot 2"
        73 6B 69 70 20 64
        65 74 65 63 74 69
        6F 6E 20 61 6E 64
        20 73 65 6C 65 63
        74 20 73 6C 6F 74
        20 32
   049C 0D                  692 	.db 0x0d
   049D 0A                  693 	.db 0x0a
   049E 2F 53 33 20 2D 20   694 	.ascii "/S3 - skip detection and select slot 3"
        73 6B 69 70 20 64
        65 74 65 63 74 69
        6F 6E 20 61 6E 64
        20 73 65 6C 65 63
        74 20 73 6C 6F 74
        20 33
   04C4 0D                  695 	.db 0x0d
   04C5 00                  696 	.db 0x00
   04C6                     697 ___str_9:
   04C6 4E 6F 74 20 65 6E   698 	.ascii "Not enough memory to read file segment"
        6F 75 67 68 20 6D
        65 6D 6F 72 79 20
        74 6F 20 72 65 61
        64 20 66 69 6C 65
        20 73 65 67 6D 65
        6E 74
   04EC 00                  699 	.db 0x00
   04ED                     700 ___str_10:
   04ED 2F 53 30            701 	.ascii "/S0"
   04F0 00                  702 	.db 0x00
   04F1                     703 ___str_11:
   04F1 2F 53 31            704 	.ascii "/S1"
   04F4 00                  705 	.db 0x00
   04F5                     706 ___str_12:
   04F5 2F 53 32            707 	.ascii "/S2"
   04F8 00                  708 	.db 0x00
   04F9                     709 ___str_13:
   04F9 2F 53 33            710 	.ascii "/S3"
   04FC 00                  711 	.db 0x00
   04FD                     712 ___str_15:
   04FD 43 61 6E 6E 6F 74   713 	.ascii "Cannot find slot with flash"
        20 66 69 6E 64 20
        73 6C 6F 74 20 77
        69 74 68 20 66 6C
        61 73 68
   0518 0D                  714 	.db 0x0d
   0519 00                  715 	.db 0x00
   051A                     716 ___str_16:
   051A 46 6F 75 6E 64 20   717 	.ascii "Found flash in slot: %d"
        66 6C 61 73 68 20
        69 6E 20 73 6C 6F
        74 3A 20 25 64
   0531 0D                  718 	.db 0x0d
   0532 0A                  719 	.db 0x0a
   0533 00                  720 	.db 0x00
   0534                     721 ___str_18:
   0534 45 72 72 6F 72 3A   722 	.ascii "Error: opening file"
        20 6F 70 65 6E 69
        6E 67 20 66 69 6C
        65
   0547 0D                  723 	.db 0x0d
   0548 00                  724 	.db 0x00
   0549                     725 ___str_19:
   0549 4F 70 65 6E 65 64   726 	.ascii "Opened: %s"
        3A 20 25 73
   0553 0D                  727 	.db 0x0d
   0554 0A                  728 	.db 0x0a
   0555 00                  729 	.db 0x00
   0556                     730 ___str_20:
   0556 46 69 6C 65 73 69   731 	.ascii "Filesize is %ld bytes"
        7A 65 20 69 73 20
        25 6C 64 20 62 79
        74 65 73
   056B 0D                  732 	.db 0x0d
   056C 0A                  733 	.db 0x0a
   056D 00                  734 	.db 0x00
   056E                     735 ___str_21:
   056E 5B 25 2D 32 30 73   736 	.ascii "[%-20s] %ld/%ld "
        5D 20 25 6C 64 2F
        25 6C 64 20
   057E 0D                  737 	.db 0x0d
   057F 00                  738 	.db 0x00
   0580                     739 ___str_22:
   0580 23 23 23 23 23 23   740 	.ascii "####################"
        23 23 23 23 23 23
        23 23 23 23 23 23
        23 23
   0594 00                  741 	.db 0x00
   0595                     742 ___str_24:
   0595 45 72 72 6F 72 20   743 	.ascii "Error reading file or end of file reached"
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        20 6F 72 20 65 6E
        64 20 6F 66 20 66
        69 6C 65 20 72 65
        61 63 68 65 64
   05BE 0D                  744 	.db 0x0d
   05BF 00                  745 	.db 0x00
   05C0                     746 ___str_26:
   05C0 0A                  747 	.db 0x0a
   05C1 57 72 69 74 65 20   748 	.ascii "Write operation complete!"
        6F 70 65 72 61 74
        69 6F 6E 20 63 6F
        6D 70 6C 65 74 65
        21
   05DA 0D                  749 	.db 0x0d
   05DB 00                  750 	.db 0x00
   05DC                     751 ___str_28:
   05DC 4D 53 58 55 53 42   752 	.ascii "MSXUSB Flash Loader 1.1"
        20 46 6C 61 73 68
        20 4C 6F 61 64 65
        72 20 31 2E 31
   05F3 0D                  753 	.db 0x0d
   05F4 0A                  754 	.db 0x0a
   05F5 28 63 29 20 32 30   755 	.ascii "(c) 2024 The Retro Hacker"
        32 34 20 54 68 65
        20 52 65 74 72 6F
        20 48 61 63 6B 65
        72
   060E 0D                  756 	.db 0x0d
   060F 0A                  757 	.db 0x0a
   0610 42 61 73 65 64 20   758 	.ascii "Based on the original code by S0urceror"
        6F 6E 20 74 68 65
        20 6F 72 69 67 69
        6E 61 6C 20 63 6F
        64 65 20 62 79 20
        53 30 75 72 63 65
        72 6F 72
   0637 0D                  759 	.db 0x0d
   0638 0A                  760 	.db 0x0a
   0639 0D                  761 	.db 0x0d
   063A 00                  762 	.db 0x00
                            763 ;src/flash.c:180: void select_slot_40 (uint8_t slot)
                            764 ;	---------------------------------
                            765 ; Function select_slot_40
                            766 ; ---------------------------------
   063B                     767 _select_slot_40::
                            768 ;src/flash.c:190: __endasm;
   063B FD 21 02 00   [14]  769 	ld	iy,#2
   063F FD 39         [15]  770 	add	iy,sp ;Bypass the return address of the function
   0641 FD 7E 00      [19]  771 	ld	a,(iy) ;slot
   0644 26 40         [ 7]  772 	ld	h,#0x40
   0646 C3 24 00      [10]  773 	jp	0x24 ; ENASLT
                            774 ;src/flash.c:191: }
   0649 C9            [10]  775 	ret
                            776 ;src/flash.c:198: void select_ramslot_40 ()
                            777 ;	---------------------------------
                            778 ; Function select_ramslot_40
                            779 ; ---------------------------------
   064A                     780 _select_ramslot_40::
                            781 ;src/flash.c:204: __endasm;
   064A 3A 42 F3      [13]  782 	ld	a,(#0xf342) ; RAMAD1
   064D 26 40         [ 7]  783 	ld	h,#0x40
   064F C3 24 00      [10]  784 	jp	0x24 ; ENASLT
                            785 ;src/flash.c:205: }
   0652 C9            [10]  786 	ret
                            787 ;src/flash.c:212: BOOL flash_ident ()
                            788 ;	---------------------------------
                            789 ; Function flash_ident
                            790 ; ---------------------------------
   0653                     791 _flash_ident::
                            792 ;src/flash.c:216: flash_segment[0] = 0xf0;
   0653 21 00 40      [10]  793 	ld	hl, #_flash_segment
   0656 36 F0         [10]  794 	ld	(hl), #0xf0
                            795 ;src/flash.c:218: dummy = flash_segment [0x555];
   0658 3A 55 45      [13]  796 	ld	a, (#_flash_segment+1365)
                            797 ;src/flash.c:219: flash_segment[0x555] = 0xaa;
   065B 21 55 45      [10]  798 	ld	hl, #(_flash_segment + 0x0555)
   065E 36 AA         [10]  799 	ld	(hl), #0xaa
                            800 ;src/flash.c:220: dummy = flash_segment [0x2aa];
   0660 3A AA 42      [13]  801 	ld	a, (#_flash_segment+682)
                            802 ;src/flash.c:221: flash_segment[0x2aa] = 0x55;
   0663 21 AA 42      [10]  803 	ld	hl, #(_flash_segment + 0x02aa)
   0666 36 55         [10]  804 	ld	(hl), #0x55
                            805 ;src/flash.c:222: dummy = flash_segment [0x555];
   0668 3A 55 45      [13]  806 	ld	a, (#_flash_segment+1365)
                            807 ;src/flash.c:223: flash_segment[0x555] = 0x90;
   066B 21 55 45      [10]  808 	ld	hl, #(_flash_segment + 0x0555)
   066E 36 90         [10]  809 	ld	(hl), #0x90
                            810 ;src/flash.c:225: uint8_t manufacturer = flash_segment[0];
   0670 3A 00 40      [13]  811 	ld	a, (#_flash_segment+0)
                            812 ;src/flash.c:226: uint8_t device = flash_segment[1];
   0673 3A 01 40      [13]  813 	ld	a, (#(_flash_segment + 0x0001) + 0)
                            814 ;src/flash.c:234: switch (device) {
   0676 FE 20         [ 7]  815 	cp	a, #0x20
   0678 28 19         [12]  816 	jr	Z,00102$
   067A D6 A4         [ 7]  817 	sub	a, #0xa4
   067C 20 2A         [12]  818 	jr	NZ,00103$
                            819 ;src/flash.c:236: printf("Found device: AMD_AM29F040\r\n");
   067E 21rB0r06      [10]  820 	ld	hl, #___str_30
   0681 E5            [11]  821 	push	hl
   0682 CDr00r00      [17]  822 	call	_puts
   0685 F1            [10]  823 	pop	af
                            824 ;src/flash.c:237: flash_segment[0] = 0xf0;
   0686 21 00 40      [10]  825 	ld	hl, #_flash_segment
   0689 36 F0         [10]  826 	ld	(hl), #0xf0
                            827 ;src/flash.c:238: return TRUE;
   068B FD 21r00r01   [14]  828 	ld	iy, #_TRUE
   068F FD 6E 00      [19]  829 	ld	l, 0 (iy)
   0692 C9            [10]  830 	ret
                            831 ;src/flash.c:240: case 0x20:
   0693                     832 00102$:
                            833 ;src/flash.c:241: printf("Found device: AMD_AM29F010\r\n");
   0693 21rCCr06      [10]  834 	ld	hl, #___str_32
   0696 E5            [11]  835 	push	hl
   0697 CDr00r00      [17]  836 	call	_puts
   069A F1            [10]  837 	pop	af
                            838 ;src/flash.c:242: flash_segment[0] = 0xf0;
   069B 21 00 40      [10]  839 	ld	hl, #_flash_segment
   069E 36 F0         [10]  840 	ld	(hl), #0xf0
                            841 ;src/flash.c:243: return TRUE;
   06A0 FD 21r00r01   [14]  842 	ld	iy, #_TRUE
   06A4 FD 6E 00      [19]  843 	ld	l, 0 (iy)
   06A7 C9            [10]  844 	ret
                            845 ;src/flash.c:245: default:
   06A8                     846 00103$:
                            847 ;src/flash.c:246: return FALSE;
   06A8 FD 21r01r01   [14]  848 	ld	iy, #_FALSE
   06AC FD 6E 00      [19]  849 	ld	l, 0 (iy)
                            850 ;src/flash.c:247: }
                            851 ;src/flash.c:249: }
   06AF C9            [10]  852 	ret
   06B0                     853 ___str_30:
   06B0 46 6F 75 6E 64 20   854 	.ascii "Found device: AMD_AM29F040"
        64 65 76 69 63 65
        3A 20 41 4D 44 5F
        41 4D 32 39 46 30
        34 30
   06CA 0D                  855 	.db 0x0d
   06CB 00                  856 	.db 0x00
   06CC                     857 ___str_32:
   06CC 46 6F 75 6E 64 20   858 	.ascii "Found device: AMD_AM29F010"
        64 65 76 69 63 65
        3A 20 41 4D 44 5F
        41 4D 32 39 46 30
        31 30
   06E6 0D                  859 	.db 0x0d
   06E7 00                  860 	.db 0x00
                            861 ;src/flash.c:256: uint8_t find_flash ()
                            862 ;	---------------------------------
                            863 ; Function find_flash
                            864 ; ---------------------------------
   06E8                     865 _find_flash::
                            866 ;src/flash.c:259: uint8_t highest_slot = 4;
                            867 ;src/flash.c:260: for (i=0;i<4;i++)
   06E8 21 04 00      [10]  868 	ld	hl, #0x0004
   06EB                     869 00104$:
                            870 ;src/flash.c:263: select_slot_40 (i);
   06EB E5            [11]  871 	push	hl
   06EC E5            [11]  872 	push	hl
   06ED 33            [ 6]  873 	inc	sp
   06EE CDr3Br06      [17]  874 	call	_select_slot_40
   06F1 33            [ 6]  875 	inc	sp
   06F2 CDr53r06      [17]  876 	call	_flash_ident
   06F5 7D            [ 4]  877 	ld	a, l
   06F6 E1            [10]  878 	pop	hl
   06F7 B7            [ 4]  879 	or	a, a
   06F8 28 01         [12]  880 	jr	Z,00105$
                            881 ;src/flash.c:266: highest_slot=i; // yes? save slot number
   06FA 6C            [ 4]  882 	ld	l, h
   06FB                     883 00105$:
                            884 ;src/flash.c:260: for (i=0;i<4;i++)
   06FB 24            [ 4]  885 	inc	h
   06FC 7C            [ 4]  886 	ld	a, h
   06FD D6 04         [ 7]  887 	sub	a, #0x04
   06FF 38 EA         [12]  888 	jr	C,00104$
                            889 ;src/flash.c:268: select_ramslot_40 ();
   0701 E5            [11]  890 	push	hl
   0702 CDr4Ar06      [17]  891 	call	_select_ramslot_40
   0705 E1            [10]  892 	pop	hl
                            893 ;src/flash.c:269: return highest_slot;
                            894 ;src/flash.c:270: }
   0706 C9            [10]  895 	ret
                            896 ;src/flash.c:277: void print_hex_buffer (uint8_t* start, uint8_t* end)
                            897 ;	---------------------------------
                            898 ; Function print_hex_buffer
                            899 ; ---------------------------------
   0707                     900 _print_hex_buffer::
   0707 CDr00r00      [17]  901 	call	___sdcc_enter_ix
   070A 21 F2 FF      [10]  902 	ld	hl, #-14
   070D 39            [11]  903 	add	hl, sp
   070E F9            [ 6]  904 	ld	sp, hl
                            905 ;src/flash.c:280: uint8_t* cur = start;
   070F DD 4E 04      [19]  906 	ld	c, 4 (ix)
   0712 DD 46 05      [19]  907 	ld	b, 5 (ix)
                            908 ;src/flash.c:282: while (cur<end)
   0715 21 00 00      [10]  909 	ld	hl, #0
   0718 39            [11]  910 	add	hl, sp
   0719 EB            [ 4]  911 	ex	de, hl
   071A DD 73 F9      [19]  912 	ld	-7 (ix), e
   071D DD 72 FA      [19]  913 	ld	-6 (ix), d
   0720 DD 73 FB      [19]  914 	ld	-5 (ix), e
   0723 DD 72 FC      [19]  915 	ld	-4 (ix), d
   0726 DD 36 FF 00   [19]  916 	ld	-1 (ix), #0x00
   072A                     917 00106$:
   072A 79            [ 4]  918 	ld	a, c
   072B DD 96 06      [19]  919 	sub	a, 6 (ix)
   072E 78            [ 4]  920 	ld	a, b
   072F DD 9E 07      [19]  921 	sbc	a, 7 (ix)
   0732 D2rD4r07      [10]  922 	jp	NC, 00109$
                            923 ;src/flash.c:284: char hex[]="0\0\0";
   0735 21 03 00      [10]  924 	ld	hl, #3
   0738 39            [11]  925 	add	hl, sp
   0739 DD 75 FD      [19]  926 	ld	-3 (ix), l
   073C DD 74 FE      [19]  927 	ld	-2 (ix), h
   073F 36 30         [10]  928 	ld	(hl), #0x30
   0741 DD 6E FD      [19]  929 	ld	l, -3 (ix)
   0744 DD 66 FE      [19]  930 	ld	h, -2 (ix)
   0747 23            [ 6]  931 	inc	hl
   0748 36 00         [10]  932 	ld	(hl), #0x00
   074A DD 6E FD      [19]  933 	ld	l, -3 (ix)
   074D DD 66 FE      [19]  934 	ld	h, -2 (ix)
   0750 23            [ 6]  935 	inc	hl
   0751 23            [ 6]  936 	inc	hl
   0752 36 00         [10]  937 	ld	(hl), #0x00
   0754 DD 6E FD      [19]  938 	ld	l, -3 (ix)
   0757 DD 66 FE      [19]  939 	ld	h, -2 (ix)
   075A 23            [ 6]  940 	inc	hl
   075B 23            [ 6]  941 	inc	hl
   075C 23            [ 6]  942 	inc	hl
   075D 36 00         [10]  943 	ld	(hl), #0x00
                            944 ;src/flash.c:285: uint8_t len = sprintf (str,"%x",*cur);
   075F 0A            [ 7]  945 	ld	a, (bc)
   0760 6F            [ 4]  946 	ld	l, a
   0761 26 00         [ 7]  947 	ld	h, #0x00
   0763 D5            [11]  948 	push	de
   0764 FD E1         [14]  949 	pop	iy
   0766 C5            [11]  950 	push	bc
   0767 D5            [11]  951 	push	de
   0768 E5            [11]  952 	push	hl
   0769 21rD9r07      [10]  953 	ld	hl, #___str_34
   076C E5            [11]  954 	push	hl
   076D FD E5         [15]  955 	push	iy
   076F CDr00r00      [17]  956 	call	_sprintf
   0772 F1            [10]  957 	pop	af
   0773 F1            [10]  958 	pop	af
   0774 F1            [10]  959 	pop	af
   0775 D1            [10]  960 	pop	de
   0776 C1            [10]  961 	pop	bc
   0777 7D            [ 4]  962 	ld	a, l
                            963 ;src/flash.c:286: if (len<2)
   0778 D6 02         [ 7]  964 	sub	a, #0x02
   077A 30 2E         [12]  965 	jr	NC,00102$
                            966 ;src/flash.c:288: strcat (hex,str);
   077C DD 6E FB      [19]  967 	ld	l, -5 (ix)
   077F DD 66 FC      [19]  968 	ld	h, -4 (ix)
   0782 E5            [11]  969 	push	hl
   0783 DD 6E FD      [19]  970 	ld	l, -3 (ix)
   0786 DD 66 FE      [19]  971 	ld	h, -2 (ix)
   0789 E5            [11]  972 	push	hl
   078A FD E1         [14]  973 	pop	iy
   078C E1            [10]  974 	pop	hl
   078D C5            [11]  975 	push	bc
   078E D5            [11]  976 	push	de
   078F E5            [11]  977 	push	hl
   0790 FD E5         [15]  978 	push	iy
   0792 CDr00r00      [17]  979 	call	_strcat
   0795 F1            [10]  980 	pop	af
   0796 F1            [10]  981 	pop	af
   0797 D1            [10]  982 	pop	de
   0798 C1            [10]  983 	pop	bc
                            984 ;src/flash.c:289: printf (hex);
   0799 DD 6E FD      [19]  985 	ld	l, -3 (ix)
   079C DD 66 FE      [19]  986 	ld	h, -2 (ix)
   079F C5            [11]  987 	push	bc
   07A0 D5            [11]  988 	push	de
   07A1 E5            [11]  989 	push	hl
   07A2 CDr00r00      [17]  990 	call	_printf
   07A5 F1            [10]  991 	pop	af
   07A6 D1            [10]  992 	pop	de
   07A7 C1            [10]  993 	pop	bc
   07A8 18 0F         [12]  994 	jr	00103$
   07AA                     995 00102$:
                            996 ;src/flash.c:292: printf (str);
   07AA DD 6E F9      [19]  997 	ld	l, -7 (ix)
   07AD DD 66 FA      [19]  998 	ld	h, -6 (ix)
   07B0 C5            [11]  999 	push	bc
   07B1 D5            [11] 1000 	push	de
   07B2 E5            [11] 1001 	push	hl
   07B3 CDr00r00      [17] 1002 	call	_printf
   07B6 F1            [10] 1003 	pop	af
   07B7 D1            [10] 1004 	pop	de
   07B8 C1            [10] 1005 	pop	bc
   07B9                    1006 00103$:
                           1007 ;src/flash.c:294: cur++;
   07B9 03            [ 6] 1008 	inc	bc
                           1009 ;src/flash.c:295: cnt++;
   07BA DD 34 FF      [23] 1010 	inc	-1 (ix)
                           1011 ;src/flash.c:296: if ((cnt%8)==0)
   07BD DD 7E FF      [19] 1012 	ld	a, -1 (ix)
   07C0 E6 07         [ 7] 1013 	and	a, #0x07
   07C2 C2r2Ar07      [10] 1014 	jp	NZ,00106$
                           1015 ;src/flash.c:297: printf ("\r\n");
   07C5 C5            [11] 1016 	push	bc
   07C6 D5            [11] 1017 	push	de
   07C7 21rDCr07      [10] 1018 	ld	hl, #___str_36
   07CA E5            [11] 1019 	push	hl
   07CB CDr00r00      [17] 1020 	call	_puts
   07CE F1            [10] 1021 	pop	af
   07CF D1            [10] 1022 	pop	de
   07D0 C1            [10] 1023 	pop	bc
   07D1 C3r2Ar07      [10] 1024 	jp	00106$
   07D4                    1025 00109$:
                           1026 ;src/flash.c:299: }
   07D4 DD F9         [10] 1027 	ld	sp, ix
   07D6 DD E1         [14] 1028 	pop	ix
   07D8 C9            [10] 1029 	ret
   07D9                    1030 ___str_34:
   07D9 25 78              1031 	.ascii "%x"
   07DB 00                 1032 	.db 0x00
   07DC                    1033 ___str_36:
   07DC 0D                 1034 	.db 0x0d
   07DD 00                 1035 	.db 0x00
                           1036 ;src/flash.c:310: BOOL erase_flash(uint8_t slot)
                           1037 ;	---------------------------------
                           1038 ; Function erase_flash
                           1039 ; ---------------------------------
   07DE                    1040 _erase_flash::
                           1041 ;src/flash.c:313: select_slot_40 (slot);
   07DE 21 02 00      [10] 1042 	ld	hl, #2+0
   07E1 39            [11] 1043 	add	hl, sp
   07E2 7E            [ 7] 1044 	ld	a, (hl)
   07E3 F5            [11] 1045 	push	af
   07E4 33            [ 6] 1046 	inc	sp
   07E5 CDr3Br06      [17] 1047 	call	_select_slot_40
   07E8 33            [ 6] 1048 	inc	sp
                           1049 ;src/flash.c:315: printf ("Erasing flash: ");
   07E9 21r42r08      [10] 1050 	ld	hl, #___str_37
   07EC E5            [11] 1051 	push	hl
   07ED CDr00r00      [17] 1052 	call	_printf
   07F0 F1            [10] 1053 	pop	af
                           1054 ;src/flash.c:317: flash_segment[0x555] = 0xaa;
   07F1 21 55 45      [10] 1055 	ld	hl, #(_flash_segment + 0x0555)
   07F4 36 AA         [10] 1056 	ld	(hl), #0xaa
                           1057 ;src/flash.c:318: flash_segment[0x2aa] = 0x55;
   07F6 21 AA 42      [10] 1058 	ld	hl, #(_flash_segment + 0x02aa)
   07F9 36 55         [10] 1059 	ld	(hl), #0x55
                           1060 ;src/flash.c:319: flash_segment[0x555] = 0x80;
   07FB 21 55 45      [10] 1061 	ld	hl, #(_flash_segment + 0x0555)
   07FE 36 80         [10] 1062 	ld	(hl), #0x80
                           1063 ;src/flash.c:320: flash_segment[0x555] = 0xaa;
   0800 36 AA         [10] 1064 	ld	(hl), #0xaa
                           1065 ;src/flash.c:321: flash_segment[0x2aa] = 0x55;
   0802 21 AA 42      [10] 1066 	ld	hl, #(_flash_segment + 0x02aa)
   0805 36 55         [10] 1067 	ld	(hl), #0x55
                           1068 ;src/flash.c:322: flash_segment[0x555] = 0x10;
   0807 21 55 45      [10] 1069 	ld	hl, #(_flash_segment + 0x0555)
   080A 36 10         [10] 1070 	ld	(hl), #0x10
                           1071 ;src/flash.c:324: if (!flash_command_okay (0,0xff))
   080C 3E FF         [ 7] 1072 	ld	a, #0xff
   080E F5            [11] 1073 	push	af
   080F 33            [ 6] 1074 	inc	sp
   0810 21 00 00      [10] 1075 	ld	hl, #0x0000
   0813 E5            [11] 1076 	push	hl
   0814 CDr6Fr08      [17] 1077 	call	_flash_command_okay
   0817 F1            [10] 1078 	pop	af
   0818 33            [ 6] 1079 	inc	sp
   0819 7D            [ 4] 1080 	ld	a, l
   081A B7            [ 4] 1081 	or	a, a
   081B 20 15         [12] 1082 	jr	NZ,00102$
                           1083 ;src/flash.c:327: flash_segment[0] = 0xf0;
   081D 21 00 40      [10] 1084 	ld	hl, #_flash_segment
   0820 36 F0         [10] 1085 	ld	(hl), #0xf0
                           1086 ;src/flash.c:328: printf ("error erasing flash!\r\n");
   0822 21r52r08      [10] 1087 	ld	hl, #___str_39
   0825 E5            [11] 1088 	push	hl
   0826 CDr00r00      [17] 1089 	call	_puts
   0829 F1            [10] 1090 	pop	af
                           1091 ;src/flash.c:329: return FALSE;
   082A FD 21r01r01   [14] 1092 	ld	iy, #_FALSE
   082E FD 6E 00      [19] 1093 	ld	l, 0 (iy)
   0831 C9            [10] 1094 	ret
   0832                    1095 00102$:
                           1096 ;src/flash.c:332: printf ("done!\r\n");
   0832 21r68r08      [10] 1097 	ld	hl, #___str_41
   0835 E5            [11] 1098 	push	hl
   0836 CDr00r00      [17] 1099 	call	_puts
   0839 F1            [10] 1100 	pop	af
                           1101 ;src/flash.c:333: return TRUE;
   083A FD 21r00r01   [14] 1102 	ld	iy, #_TRUE
   083E FD 6E 00      [19] 1103 	ld	l, 0 (iy)
                           1104 ;src/flash.c:334: }
   0841 C9            [10] 1105 	ret
   0842                    1106 ___str_37:
   0842 45 72 61 73 69 6E  1107 	.ascii "Erasing flash: "
        67 20 66 6C 61 73
        68 3A 20
   0851 00                 1108 	.db 0x00
   0852                    1109 ___str_39:
   0852 65 72 72 6F 72 20  1110 	.ascii "error erasing flash!"
        65 72 61 73 69 6E
        67 20 66 6C 61 73
        68 21
   0866 0D                 1111 	.db 0x0d
   0867 00                 1112 	.db 0x00
   0868                    1113 ___str_41:
   0868 64 6F 6E 65 21     1114 	.ascii "done!"
   086D 0D                 1115 	.db 0x0d
   086E 00                 1116 	.db 0x00
                           1117 ;src/flash.c:337: BOOL flash_command_okay (uint16_t address,uint8_t expected_value)
                           1118 ;	---------------------------------
                           1119 ; Function flash_command_okay
                           1120 ; ---------------------------------
   086F                    1121 _flash_command_okay::
   086F CDr00r00      [17] 1122 	call	___sdcc_enter_ix
                           1123 ;src/flash.c:340: while (TRUE)
   0872                    1124 00105$:
   0872 21r00r01      [10] 1125 	ld	hl,#_TRUE + 0
   0875 4E            [ 7] 1126 	ld	c, (hl)
   0876 79            [ 4] 1127 	ld	a, c
   0877 B7            [ 4] 1128 	or	a, a
   0878 28 18         [12] 1129 	jr	Z,00107$
                           1130 ;src/flash.c:342: value = flash_segment[address];
   087A 11 00 40      [10] 1131 	ld	de, #_flash_segment+0
   087D DD 6E 04      [19] 1132 	ld	l, 4 (ix)
   0880 DD 66 05      [19] 1133 	ld	h, 5 (ix)
   0883 19            [11] 1134 	add	hl, de
   0884 46            [ 7] 1135 	ld	b, (hl)
                           1136 ;src/flash.c:343: if (value==expected_value)
   0885 DD 7E 06      [19] 1137 	ld	a, 6 (ix)
   0888 90            [ 4] 1138 	sub	a, b
   0889 20 03         [12] 1139 	jr	NZ,00102$
                           1140 ;src/flash.c:344: return TRUE;
   088B 69            [ 4] 1141 	ld	l, c
   088C 18 3A         [12] 1142 	jr	00111$
   088E                    1143 00102$:
                           1144 ;src/flash.c:345: if ((value & 0x20) != 0)
   088E CB 68         [ 8] 1145 	bit	5, b
   0890 28 E0         [12] 1146 	jr	Z,00105$
                           1147 ;src/flash.c:346: break;
   0892                    1148 00107$:
                           1149 ;src/flash.c:348: value = flash_segment[address];
   0892 11 00 40      [10] 1150 	ld	de, #_flash_segment+0
   0895 DD 6E 04      [19] 1151 	ld	l, 4 (ix)
   0898 DD 66 05      [19] 1152 	ld	h, 5 (ix)
   089B 19            [11] 1153 	add	hl, de
   089C 5E            [ 7] 1154 	ld	e, (hl)
                           1155 ;src/flash.c:349: if (value==expected_value)
   089D DD 7E 06      [19] 1156 	ld	a, 6 (ix)
   08A0 93            [ 4] 1157 	sub	a, e
   08A1 20 03         [12] 1158 	jr	NZ,00109$
                           1159 ;src/flash.c:350: return TRUE;
   08A3 69            [ 4] 1160 	ld	l, c
   08A4 18 22         [12] 1161 	jr	00111$
   08A6                    1162 00109$:
                           1163 ;src/flash.c:353: printf ("=> address: %x, value: %x, response: %x\r\n",address,expected_value,value);
   08A6 16 00         [ 7] 1164 	ld	d, #0x00
   08A8 DD 4E 06      [19] 1165 	ld	c, 6 (ix)
   08AB 06 00         [ 7] 1166 	ld	b, #0x00
   08AD D5            [11] 1167 	push	de
   08AE C5            [11] 1168 	push	bc
   08AF DD 6E 04      [19] 1169 	ld	l, 4 (ix)
   08B2 DD 66 05      [19] 1170 	ld	h, 5 (ix)
   08B5 E5            [11] 1171 	push	hl
   08B6 21rCBr08      [10] 1172 	ld	hl, #___str_42
   08B9 E5            [11] 1173 	push	hl
   08BA CDr00r00      [17] 1174 	call	_printf
   08BD F1            [10] 1175 	pop	af
   08BE F1            [10] 1176 	pop	af
   08BF F1            [10] 1177 	pop	af
   08C0 F1            [10] 1178 	pop	af
                           1179 ;src/flash.c:354: return FALSE;
   08C1 FD 21r01r01   [14] 1180 	ld	iy, #_FALSE
   08C5 FD 6E 00      [19] 1181 	ld	l, 0 (iy)
   08C8                    1182 00111$:
                           1183 ;src/flash.c:356: }
   08C8 DD E1         [14] 1184 	pop	ix
   08CA C9            [10] 1185 	ret
   08CB                    1186 ___str_42:
   08CB 3D 3E 20 61 64 64  1187 	.ascii "=> address: %x, value: %x, response: %x"
        72 65 73 73 3A 20
        25 78 2C 20 76 61
        6C 75 65 3A 20 25
        78 2C 20 72 65 73
        70 6F 6E 73 65 3A
        20 25 78
   08F2 0D                 1188 	.db 0x0d
   08F3 0A                 1189 	.db 0x0a
   08F4 00                 1190 	.db 0x00
                           1191 ;src/flash.c:358: BOOL write_flash_segment (uint8_t slot,uint8_t segment)
                           1192 ;	---------------------------------
                           1193 ; Function write_flash_segment
                           1194 ; ---------------------------------
   08F5                    1195 _write_flash_segment::
   08F5 CDr00r00      [17] 1196 	call	___sdcc_enter_ix
   08F8 F5            [11] 1197 	push	af
   08F9 F5            [11] 1198 	push	af
                           1199 ;src/flash.c:361: select_slot_40 (slot);
   08FA DD 7E 04      [19] 1200 	ld	a, 4 (ix)
   08FD F5            [11] 1201 	push	af
   08FE 33            [ 6] 1202 	inc	sp
   08FF CDr3Br06      [17] 1203 	call	_select_slot_40
   0902 33            [ 6] 1204 	inc	sp
                           1205 ;src/flash.c:363: flash_segment[0x1000] = segment;
   0903 21 00 50      [10] 1206 	ld	hl, #(_flash_segment + 0x1000)
   0906 DD 7E 05      [19] 1207 	ld	a, 5 (ix)
   0909 77            [ 7] 1208 	ld	(hl), a
                           1209 ;src/flash.c:368: for (i=0;i<(8*1024);i++)
   090A 21 00 00      [10] 1210 	ld	hl, #0x0000
   090D E3            [19] 1211 	ex	(sp), hl
   090E DD 36 FE 00   [19] 1212 	ld	-2 (ix), #0x00
   0912 DD 36 FF 00   [19] 1213 	ld	-1 (ix), #0x00
   0916                    1214 00109$:
                           1215 ;src/flash.c:371: flash_segment[0x555] = 0xaa;
   0916 21 55 45      [10] 1216 	ld	hl, #(_flash_segment + 0x0555)
   0919 36 AA         [10] 1217 	ld	(hl), #0xaa
                           1218 ;src/flash.c:372: flash_segment[0x2aa] = 0x55;
   091B 21 AA 42      [10] 1219 	ld	hl, #(_flash_segment + 0x02aa)
   091E 36 55         [10] 1220 	ld	(hl), #0x55
                           1221 ;src/flash.c:373: flash_segment[0x555] = 0xa0;
   0920 21 55 45      [10] 1222 	ld	hl, #(_flash_segment + 0x0555)
   0923 36 A0         [10] 1223 	ld	(hl), #0xa0
                           1224 ;src/flash.c:374: flash_segment[i] = file_segment[i];
   0925 DD 7E FE      [19] 1225 	ld	a, -2 (ix)
   0928 C6 00         [ 7] 1226 	add	a, #<(_flash_segment)
   092A 4F            [ 4] 1227 	ld	c, a
   092B DD 7E FF      [19] 1228 	ld	a, -1 (ix)
   092E CE 40         [ 7] 1229 	adc	a, #>(_flash_segment)
   0930 47            [ 4] 1230 	ld	b, a
   0931 11 00 80      [10] 1231 	ld	de, #_file_segment+0
   0934 DD 6E FE      [19] 1232 	ld	l, -2 (ix)
   0937 DD 66 FF      [19] 1233 	ld	h, -1 (ix)
   093A 19            [11] 1234 	add	hl, de
   093B 7E            [ 7] 1235 	ld	a, (hl)
   093C 02            [ 7] 1236 	ld	(bc), a
                           1237 ;src/flash.c:376: if (i>=0x1000) // addresses 0x5000 to 0x5fff
   093D DD 7E FF      [19] 1238 	ld	a, -1 (ix)
   0940 EE 80         [ 7] 1239 	xor	a, #0x80
   0942 D6 90         [ 7] 1240 	sub	a, #0x90
   0944 38 07         [12] 1241 	jr	C,00102$
                           1242 ;src/flash.c:377: flash_segment[0x1000] = segment; // necessary to switch back
   0946 21 00 50      [10] 1243 	ld	hl, #(_flash_segment + 0x1000)
   0949 DD 7E 05      [19] 1244 	ld	a, 5 (ix)
   094C 77            [ 7] 1245 	ld	(hl), a
   094D                    1246 00102$:
                           1247 ;src/flash.c:378: if (!flash_command_okay (i,file_segment[i]))
   094D 01 00 80      [10] 1248 	ld	bc, #_file_segment+0
   0950 DD 6E FE      [19] 1249 	ld	l, -2 (ix)
   0953 DD 66 FF      [19] 1250 	ld	h, -1 (ix)
   0956 09            [11] 1251 	add	hl, bc
   0957 7E            [ 7] 1252 	ld	a, (hl)
   0958 F5            [11] 1253 	push	af
   0959 33            [ 6] 1254 	inc	sp
   095A DD 6E FE      [19] 1255 	ld	l, -2 (ix)
   095D DD 66 FF      [19] 1256 	ld	h, -1 (ix)
   0960 E5            [11] 1257 	push	hl
   0961 CDr6Fr08      [17] 1258 	call	_flash_command_okay
   0964 F1            [10] 1259 	pop	af
   0965 33            [ 6] 1260 	inc	sp
   0966 7D            [ 4] 1261 	ld	a, l
   0967 B7            [ 4] 1262 	or	a, a
   0968 20 17         [12] 1263 	jr	NZ,00110$
                           1264 ;src/flash.c:380: printf ("Error writing byte: %x in segment: %d\r\n",i,segment);
   096A DD 4E 05      [19] 1265 	ld	c, 5 (ix)
   096D 06 00         [ 7] 1266 	ld	b, #0x00
   096F C5            [11] 1267 	push	bc
   0970 C1            [10] 1268 	pop	bc
   0971 E1            [10] 1269 	pop	hl
   0972 E5            [11] 1270 	push	hl
   0973 C5            [11] 1271 	push	bc
   0974 E5            [11] 1272 	push	hl
   0975 21rC0r09      [10] 1273 	ld	hl, #___str_43
   0978 E5            [11] 1274 	push	hl
   0979 CDr00r00      [17] 1275 	call	_printf
   097C F1            [10] 1276 	pop	af
   097D F1            [10] 1277 	pop	af
   097E F1            [10] 1278 	pop	af
                           1279 ;src/flash.c:381: break;   
   097F 18 1E         [12] 1280 	jr	00105$
   0981                    1281 00110$:
                           1282 ;src/flash.c:368: for (i=0;i<(8*1024);i++)
   0981 DD 34 FE      [23] 1283 	inc	-2 (ix)
   0984 20 03         [12] 1284 	jr	NZ,00133$
   0986 DD 34 FF      [23] 1285 	inc	-1 (ix)
   0989                    1286 00133$:
   0989 DD 7E FE      [19] 1287 	ld	a, -2 (ix)
   098C DD 77 FC      [19] 1288 	ld	-4 (ix), a
   098F DD 7E FF      [19] 1289 	ld	a, -1 (ix)
   0992 DD 77 FD      [19] 1290 	ld	-3 (ix), a
   0995 DD 7E FF      [19] 1291 	ld	a, -1 (ix)
   0998 EE 80         [ 7] 1292 	xor	a, #0x80
   099A D6 A0         [ 7] 1293 	sub	a, #0xa0
   099C DAr16r09      [10] 1294 	jp	C, 00109$
   099F                    1295 00105$:
                           1296 ;src/flash.c:388: select_ramslot_40 ();
   099F CDr4Ar06      [17] 1297 	call	_select_ramslot_40
                           1298 ;src/flash.c:390: if (i<(8*1024))
   09A2 DD 7E FD      [19] 1299 	ld	a, -3 (ix)
   09A5 EE 80         [ 7] 1300 	xor	a, #0x80
   09A7 D6 A0         [ 7] 1301 	sub	a, #0xa0
   09A9 30 09         [12] 1302 	jr	NC,00107$
                           1303 ;src/flash.c:391: return FALSE;
   09AB FD 21r01r01   [14] 1304 	ld	iy, #_FALSE
   09AF FD 6E 00      [19] 1305 	ld	l, 0 (iy)
   09B2 18 07         [12] 1306 	jr	00111$
   09B4                    1307 00107$:
                           1308 ;src/flash.c:393: return TRUE;
   09B4 FD 21r00r01   [14] 1309 	ld	iy, #_TRUE
   09B8 FD 6E 00      [19] 1310 	ld	l, 0 (iy)
   09BB                    1311 00111$:
                           1312 ;src/flash.c:394: }
   09BB DD F9         [10] 1313 	ld	sp, ix
   09BD DD E1         [14] 1314 	pop	ix
   09BF C9            [10] 1315 	ret
   09C0                    1316 ___str_43:
   09C0 45 72 72 6F 72 20  1317 	.ascii "Error writing byte: %x in segment: %d"
        77 72 69 74 69 6E
        67 20 62 79 74 65
        3A 20 25 78 20 69
        6E 20 73 65 67 6D
        65 6E 74 3A 20 25
        64
   09E5 0D                 1318 	.db 0x0d
   09E6 0A                 1319 	.db 0x0a
   09E7 00                 1320 	.db 0x00
                           1321 	.area _CODE
                           1322 	.area _INITIALIZER
                           1323 	.area _CABS (ABS)
