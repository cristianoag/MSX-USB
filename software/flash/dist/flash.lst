                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.9.0 #11195 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module flash
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FT_SetName
                             13 	.globl _ceilf
                             14 	.globl _strcmp
                             15 	.globl _strcat
                             16 	.globl _puts
                             17 	.globl _sprintf
                             18 	.globl _printf
                             19 	.globl _FcbRead
                             20 	.globl _FcbClose
                             21 	.globl _FcbOpen
                             22 	.globl _ReadSP
                             23 	.globl _MemFill
                             24 	.globl _flash_segment
                             25 	.globl _file_segment
                             26 	.globl _FALSE
                             27 	.globl _TRUE
                             28 	.globl _putchar
                             29 	.globl _select_slot_40
                             30 	.globl _select_ramslot_40
                             31 	.globl _flash_ident
                             32 	.globl _find_flash
                             33 	.globl _print_hex_buffer
                             34 	.globl _erase_flash
                             35 	.globl _flash_command_okay
                             36 	.globl _write_flash_segment
                             37 ;--------------------------------------------------------
                             38 ; special function registers
                             39 ;--------------------------------------------------------
                             40 ;--------------------------------------------------------
                             41 ; ram data
                             42 ;--------------------------------------------------------
                             43 	.area _DATA
                     8000    44 _file_segment	=	0x8000
                     4000    45 _flash_segment	=	0x4000
                             46 ;--------------------------------------------------------
                             47 ; ram data
                             48 ;--------------------------------------------------------
                             49 	.area _INITIALIZED
                             50 ;--------------------------------------------------------
                             51 ; absolute external ram data
                             52 ;--------------------------------------------------------
                             53 	.area _DABS (ABS)
                             54 ;--------------------------------------------------------
                             55 ; global & static initialisations
                             56 ;--------------------------------------------------------
                             57 	.area _HOME
                             58 	.area _GSINIT
                             59 	.area _GSFINAL
                             60 	.area _GSINIT
                             61 ;--------------------------------------------------------
                             62 ; Home
                             63 ;--------------------------------------------------------
                             64 	.area _HOME
                             65 	.area _HOME
                             66 ;--------------------------------------------------------
                             67 ; code
                             68 ;--------------------------------------------------------
                             69 	.area _CODE
                             70 ;src\flash.c:29: void FT_SetName( FCB *p_fcb, const char *p_name )  // Routine servant à vérifier le format du nom de fichier
                             71 ;	---------------------------------
                             72 ; Function FT_SetName
                             73 ; ---------------------------------
   0000                      74 _FT_SetName::
   0000 CDr00r00      [17]   75 	call	___sdcc_enter_ix
   0003 F5            [11]   76 	push	af
   0004 F5            [11]   77 	push	af
   0005 3B            [ 6]   78 	dec	sp
                             79 ;src\flash.c:32: memset( p_fcb, 0, sizeof(FCB) );
   0006 DD 6E 04      [19]   80 	ld	l, 4 (ix)
   0009 DD 66 05      [19]   81 	ld	h, 5 (ix)
   000C 06 25         [ 7]   82 	ld	b, #0x25
   000E                      83 00178$:
   000E 36 00         [10]   84 	ld	(hl), #0x00
   0010 23            [ 6]   85 	inc	hl
   0011 10 FB         [13]   86 	djnz	00178$
                             87 ;src\flash.c:33: for( i = 0; i < 11; i++ ) {
   0013 DD 5E 04      [19]   88 	ld	e, 4 (ix)
   0016 DD 56 05      [19]   89 	ld	d, 5 (ix)
   0019 21 01 00      [10]   90 	ld	hl, #0x0001
   001C 19            [11]   91 	add	hl, de
   001D DD 75 FC      [19]   92 	ld	-4 (ix), l
   0020 DD 74 FD      [19]   93 	ld	-3 (ix), h
   0023 0E 00         [ 7]   94 	ld	c, #0x00
   0025                      95 00106$:
                             96 ;src\flash.c:34: p_fcb->name[i] = ' ';
   0025 DD 6E FC      [19]   97 	ld	l, -4 (ix)
   0028 DD 66 FD      [19]   98 	ld	h, -3 (ix)
   002B 06 00         [ 7]   99 	ld	b, #0x00
   002D 09            [11]  100 	add	hl, bc
   002E 36 20         [10]  101 	ld	(hl), #0x20
                            102 ;src\flash.c:33: for( i = 0; i < 11; i++ ) {
   0030 0C            [ 4]  103 	inc	c
   0031 79            [ 4]  104 	ld	a, c
   0032 D6 0B         [ 7]  105 	sub	a, #0x0b
   0034 38 EF         [12]  106 	jr	C,00106$
                            107 ;src\flash.c:36: for( i = 0; (i < 8) && (p_name[i] != 0) && (p_name[i] != '.'); i++ ) {
   0036 DD 36 FE 00   [19]  108 	ld	-2 (ix), #0x00
   003A                     109 00111$:
   003A DD 7E 06      [19]  110 	ld	a, 6 (ix)
   003D DD 86 FE      [19]  111 	add	a, -2 (ix)
   0040 6F            [ 4]  112 	ld	l, a
   0041 DD 7E 07      [19]  113 	ld	a, 7 (ix)
   0044 CE 00         [ 7]  114 	adc	a, #0x00
   0046 67            [ 4]  115 	ld	h, a
   0047 DD 7E FE      [19]  116 	ld	a, -2 (ix)
   004A 3C            [ 4]  117 	inc	a
   004B DD 77 FF      [19]  118 	ld	-1 (ix), a
   004E 4E            [ 7]  119 	ld	c, (hl)
   004F 79            [ 4]  120 	ld	a, c
   0050 D6 2E         [ 7]  121 	sub	a, #0x2e
   0052 20 03         [12]  122 	jr	NZ, 00180$
   0054 3E 01         [ 7]  123 	ld	a, #0x01
   0056 20                  124 	.db	#0x20
   0057                     125 00180$:
   0057 AF            [ 4]  126 	xor	a, a
   0058                     127 00181$:
   0058 6F            [ 4]  128 	ld	l, a
   0059 DD 7E FE      [19]  129 	ld	a, -2 (ix)
   005C D6 08         [ 7]  130 	sub	a, #0x08
   005E 30 1E         [12]  131 	jr	NC,00102$
   0060 79            [ 4]  132 	ld	a, c
   0061 B7            [ 4]  133 	or	a, a
   0062 28 1A         [12]  134 	jr	Z,00102$
   0064 CB 45         [ 8]  135 	bit	0, l
   0066 20 16         [12]  136 	jr	NZ,00102$
                            137 ;src\flash.c:37: p_fcb->name[i] =  p_name[i];
   0068 DD 7E FC      [19]  138 	ld	a, -4 (ix)
   006B DD 86 FE      [19]  139 	add	a, -2 (ix)
   006E 6F            [ 4]  140 	ld	l, a
   006F DD 7E FD      [19]  141 	ld	a, -3 (ix)
   0072 CE 00         [ 7]  142 	adc	a, #0x00
   0074 67            [ 4]  143 	ld	h, a
   0075 71            [ 7]  144 	ld	(hl), c
                            145 ;src\flash.c:36: for( i = 0; (i < 8) && (p_name[i] != 0) && (p_name[i] != '.'); i++ ) {
   0076 DD 7E FF      [19]  146 	ld	a, -1 (ix)
   0079 DD 77 FE      [19]  147 	ld	-2 (ix), a
   007C 18 BC         [12]  148 	jr	00111$
   007E                     149 00102$:
                            150 ;src\flash.c:39: if( p_name[i] == '.' ) {
   007E 7D            [ 4]  151 	ld	a, l
   007F B7            [ 4]  152 	or	a, a
   0080 28 4C         [12]  153 	jr	Z,00118$
                            154 ;src\flash.c:40: i++;
   0082 DD 7E FF      [19]  155 	ld	a, -1 (ix)
   0085 DD 77 FB      [19]  156 	ld	-5 (ix), a
                            157 ;src\flash.c:41: for( j = 0; (j < 3) && (p_name[i + j] != 0) && (p_name[i + j] != '.'); j++ ) {
   0088 21 09 00      [10]  158 	ld	hl, #0x0009
   008B 19            [11]  159 	add	hl, de
   008C EB            [ 4]  160 	ex	de, hl
   008D 0E 00         [ 7]  161 	ld	c, #0x00
   008F                     162 00116$:
   008F 79            [ 4]  163 	ld	a, c
   0090 D6 03         [ 7]  164 	sub	a, #0x03
   0092 30 3A         [12]  165 	jr	NC,00118$
   0094 DD 6E FB      [19]  166 	ld	l, -5 (ix)
   0097 26 00         [ 7]  167 	ld	h, #0x00
   0099 DD 71 FC      [19]  168 	ld	-4 (ix), c
   009C DD 36 FD 00   [19]  169 	ld	-3 (ix), #0x00
   00A0 7D            [ 4]  170 	ld	a, l
   00A1 DD 86 FC      [19]  171 	add	a, -4 (ix)
   00A4 DD 77 FE      [19]  172 	ld	-2 (ix), a
   00A7 7C            [ 4]  173 	ld	a, h
   00A8 DD 8E FD      [19]  174 	adc	a, -3 (ix)
   00AB DD 77 FF      [19]  175 	ld	-1 (ix), a
   00AE DD 7E 06      [19]  176 	ld	a, 6 (ix)
   00B1 DD 86 FE      [19]  177 	add	a, -2 (ix)
   00B4 6F            [ 4]  178 	ld	l, a
   00B5 DD 7E 07      [19]  179 	ld	a, 7 (ix)
   00B8 DD 8E FF      [19]  180 	adc	a, -1 (ix)
   00BB 67            [ 4]  181 	ld	h, a
   00BC 46            [ 7]  182 	ld	b, (hl)
   00BD 78            [ 4]  183 	ld	a, b
   00BE B7            [ 4]  184 	or	a, a
   00BF 28 0D         [12]  185 	jr	Z,00118$
   00C1 78            [ 4]  186 	ld	a, b
   00C2 D6 2E         [ 7]  187 	sub	a, #0x2e
   00C4 28 08         [12]  188 	jr	Z,00118$
                            189 ;src\flash.c:42: p_fcb->ext[j] =  p_name[i + j] ;
   00C6 69            [ 4]  190 	ld	l, c
   00C7 26 00         [ 7]  191 	ld	h, #0x00
   00C9 19            [11]  192 	add	hl, de
   00CA 70            [ 7]  193 	ld	(hl), b
                            194 ;src\flash.c:41: for( j = 0; (j < 3) && (p_name[i + j] != 0) && (p_name[i + j] != '.'); j++ ) {
   00CB 0C            [ 4]  195 	inc	c
   00CC 18 C1         [12]  196 	jr	00116$
   00CE                     197 00118$:
                            198 ;src\flash.c:45: }
   00CE DD F9         [10]  199 	ld	sp, ix
   00D0 DD E1         [14]  200 	pop	ix
   00D2 C9            [10]  201 	ret
   00D3                     202 _Done_Version_tag:
   00D3 4D 61 64 65 20 77   203 	.ascii "Made with FUSION-C 1.3 R21010 (c)EBSOFT:2021"
        69 74 68 20 46 55
        53 49 4F 4E 2D 43
        20 31 2E 33 20 52
        32 31 30 31 30 20
        28 63 29 45 42 53
        4F 46 54 3A 32 30
        32 31
   00FF 00                  204 	.db 0x00
   0100                     205 _TRUE:
   0100 01                  206 	.db #0x01	; 1
   0101                     207 _FALSE:
   0101 00                  208 	.db #0x00	; 0
                            209 ;src\flash.c:47: int putchar (int character)
                            210 ;	---------------------------------
                            211 ; Function putchar
                            212 ; ---------------------------------
   0102                     213 _putchar::
                            214 ;src\flash.c:59: __endasm;
   0102 21 02 00      [10]  215 	ld	hl, #2
   0105 39            [11]  216 	add	hl, sp ;Bypass the return address of the function
   0106 7E            [ 7]  217 	ld	a, (hl)
   0107 FD 2A C0 FC   [20]  218 	ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
   010B DD E5         [15]  219 	push	ix
   010D DD 21 A2 00   [14]  220 	ld	ix,#0x00a2 ;address of BIOS routine
   0111 CD 1C 00      [17]  221 	call	0x001c ;interslot call
   0114 DD E1         [14]  222 	pop	ix
                            223 ;src\flash.c:61: return character;
   0116 C1            [10]  224 	pop	bc
   0117 E1            [10]  225 	pop	hl
   0118 E5            [11]  226 	push	hl
   0119 C5            [11]  227 	push	bc
                            228 ;src\flash.c:62: }
   011A C9            [10]  229 	ret
                            230 ;src\flash.c:71: int main(char *argv[], int argc)
                            231 ;	---------------------------------
                            232 ; Function main
                            233 ; ---------------------------------
   011B                     234 _main::
   011B CDr00r00      [17]  235 	call	___sdcc_enter_ix
   011E 21 C9 FF      [10]  236 	ld	hl, #-55
   0121 39            [11]  237 	add	hl, sp
   0122 F9            [ 6]  238 	ld	sp, hl
                            239 ;src\flash.c:73: uint8_t slot=0;
   0123 DD 36 EE 00   [19]  240 	ld	-18 (ix), #0x00
                            241 ;src\flash.c:74: uint8_t argnr=0;
   0127 DD 36 FF 00   [19]  242 	ld	-1 (ix), #0x00
                            243 ;src\flash.c:77: printf ("Based on the original code by S0urceror\r\n\r\n");
   012B 21rF5r05      [10]  244 	ld	hl, #___str_28
   012E E5            [11]  245 	push	hl
   012F CDr00r00      [17]  246 	call	_puts
   0132 F1            [10]  247 	pop	af
                            248 ;src\flash.c:78: if (argc < 1)
   0133 DD 7E 06      [19]  249 	ld	a, 6 (ix)
   0136 D6 01         [ 7]  250 	sub	a, #0x01
   0138 DD 7E 07      [19]  251 	ld	a, 7 (ix)
   013B 17            [ 4]  252 	rla
   013C 3F            [ 4]  253 	ccf
   013D 1F            [ 4]  254 	rra
   013E DE 80         [ 7]  255 	sbc	a, #0x80
   0140 30 0E         [12]  256 	jr	NC,00102$
                            257 ;src\flash.c:80: printf ("FLASH.COM [flags] [romfile]\r\n\r\nOptions:\r\n/S0 - skip detection and select slot 0\r\n/S1 - skip detection and select slot 1\r\n/S2 - skip detection and select slot 2\r\n/S3 - skip detection and select slot 3\r\n");
   0142 21r16r04      [10]  258 	ld	hl, #___str_8
   0145 E5            [11]  259 	push	hl
   0146 CDr00r00      [17]  260 	call	_puts
   0149 F1            [10]  261 	pop	af
                            262 ;src\flash.c:81: return (0);
   014A 21 00 00      [10]  263 	ld	hl, #0x0000
   014D C3r11r04      [10]  264 	jp	00129$
   0150                     265 00102$:
                            266 ;src\flash.c:83: if (ReadSP ()<(0x8000+SEGMENT_SIZE))
   0150 CDr00r00      [17]  267 	call	_ReadSP
   0153 7C            [ 4]  268 	ld	a, h
   0154 D6 A0         [ 7]  269 	sub	a, #0xa0
   0156 30 0E         [12]  270 	jr	NC,00104$
                            271 ;src\flash.c:85: printf ("Not enough memory to read file segment");
   0158 21rDFr04      [10]  272 	ld	hl, #___str_9
   015B E5            [11]  273 	push	hl
   015C CDr00r00      [17]  274 	call	_printf
   015F F1            [10]  275 	pop	af
                            276 ;src\flash.c:86: return (0);
   0160 21 00 00      [10]  277 	ld	hl, #0x0000
   0163 C3r11r04      [10]  278 	jp	00129$
   0166                     279 00104$:
                            280 ;src\flash.c:88: if (strcmp (argv[0],"/S0")==0) {
   0166 DD 4E 04      [19]  281 	ld	c, 4 (ix)
   0169 DD 46 05      [19]  282 	ld	b, 5 (ix)
   016C 69            [ 4]  283 	ld	l, c
   016D 60            [ 4]  284 	ld	h, b
   016E 5E            [ 7]  285 	ld	e, (hl)
   016F 23            [ 6]  286 	inc	hl
   0170 56            [ 7]  287 	ld	d, (hl)
   0171 C5            [11]  288 	push	bc
   0172 21r06r05      [10]  289 	ld	hl, #___str_10
   0175 E5            [11]  290 	push	hl
   0176 D5            [11]  291 	push	de
   0177 CDr00r00      [17]  292 	call	_strcmp
   017A F1            [10]  293 	pop	af
   017B F1            [10]  294 	pop	af
   017C C1            [10]  295 	pop	bc
   017D 7C            [ 4]  296 	ld	a, h
   017E B5            [ 4]  297 	or	a, l
   017F 20 08         [12]  298 	jr	NZ,00106$
                            299 ;src\flash.c:89: slot = 0;argnr++;
   0181 DD 36 EE 00   [19]  300 	ld	-18 (ix), #0x00
   0185 DD 36 FF 01   [19]  301 	ld	-1 (ix), #0x01
   0189                     302 00106$:
                            303 ;src\flash.c:91: if (strcmp (argv[0],"/S1")==0) {
   0189 69            [ 4]  304 	ld	l, c
   018A 60            [ 4]  305 	ld	h, b
   018B 5E            [ 7]  306 	ld	e, (hl)
   018C 23            [ 6]  307 	inc	hl
   018D 56            [ 7]  308 	ld	d, (hl)
   018E C5            [11]  309 	push	bc
   018F 21r0Ar05      [10]  310 	ld	hl, #___str_11
   0192 E5            [11]  311 	push	hl
   0193 D5            [11]  312 	push	de
   0194 CDr00r00      [17]  313 	call	_strcmp
   0197 F1            [10]  314 	pop	af
   0198 F1            [10]  315 	pop	af
   0199 C1            [10]  316 	pop	bc
   019A 7C            [ 4]  317 	ld	a, h
   019B B5            [ 4]  318 	or	a, l
   019C 20 07         [12]  319 	jr	NZ,00108$
                            320 ;src\flash.c:92: slot = 1;argnr++;
   019E DD 36 EE 01   [19]  321 	ld	-18 (ix), #0x01
   01A2 DD 34 FF      [23]  322 	inc	-1 (ix)
   01A5                     323 00108$:
                            324 ;src\flash.c:94: if (strcmp (argv[0],"/S2")==0) {
   01A5 69            [ 4]  325 	ld	l, c
   01A6 60            [ 4]  326 	ld	h, b
   01A7 5E            [ 7]  327 	ld	e, (hl)
   01A8 23            [ 6]  328 	inc	hl
   01A9 56            [ 7]  329 	ld	d, (hl)
   01AA C5            [11]  330 	push	bc
   01AB 21r0Er05      [10]  331 	ld	hl, #___str_12
   01AE E5            [11]  332 	push	hl
   01AF D5            [11]  333 	push	de
   01B0 CDr00r00      [17]  334 	call	_strcmp
   01B3 F1            [10]  335 	pop	af
   01B4 F1            [10]  336 	pop	af
   01B5 C1            [10]  337 	pop	bc
   01B6 7C            [ 4]  338 	ld	a, h
   01B7 B5            [ 4]  339 	or	a, l
   01B8 20 07         [12]  340 	jr	NZ,00110$
                            341 ;src\flash.c:95: slot = 2;argnr++;
   01BA DD 36 EE 02   [19]  342 	ld	-18 (ix), #0x02
   01BE DD 34 FF      [23]  343 	inc	-1 (ix)
   01C1                     344 00110$:
                            345 ;src\flash.c:97: if (strcmp (argv[0],"/S3")==0) {
   01C1 69            [ 4]  346 	ld	l, c
   01C2 60            [ 4]  347 	ld	h, b
   01C3 5E            [ 7]  348 	ld	e, (hl)
   01C4 23            [ 6]  349 	inc	hl
   01C5 56            [ 7]  350 	ld	d, (hl)
   01C6 C5            [11]  351 	push	bc
   01C7 21r12r05      [10]  352 	ld	hl, #___str_13
   01CA E5            [11]  353 	push	hl
   01CB D5            [11]  354 	push	de
   01CC CDr00r00      [17]  355 	call	_strcmp
   01CF F1            [10]  356 	pop	af
   01D0 F1            [10]  357 	pop	af
   01D1 C1            [10]  358 	pop	bc
   01D2 7C            [ 4]  359 	ld	a, h
   01D3 B5            [ 4]  360 	or	a, l
   01D4 20 07         [12]  361 	jr	NZ,00112$
                            362 ;src\flash.c:98: slot = 3;argnr++;
   01D6 DD 36 EE 03   [19]  363 	ld	-18 (ix), #0x03
   01DA DD 34 FF      [23]  364 	inc	-1 (ix)
   01DD                     365 00112$:
                            366 ;src\flash.c:101: if (argnr==0)
   01DD DD 7E FF      [19]  367 	ld	a, -1 (ix)
   01E0 B7            [ 4]  368 	or	a, a
   01E1 20 1B         [12]  369 	jr	NZ,00116$
                            370 ;src\flash.c:104: if (!((slot = find_flash())<4))
   01E3 C5            [11]  371 	push	bc
   01E4 CDr01r07      [17]  372 	call	_find_flash
   01E7 7D            [ 4]  373 	ld	a, l
   01E8 C1            [10]  374 	pop	bc
   01E9 DD 77 EE      [19]  375 	ld	-18 (ix), a
   01EC D6 04         [ 7]  376 	sub	a, #0x04
   01EE 38 0E         [12]  377 	jr	C,00116$
                            378 ;src\flash.c:106: printf ("Cannot find slot with flash\r\n");
   01F0 21r16r05      [10]  379 	ld	hl, #___str_15
   01F3 E5            [11]  380 	push	hl
   01F4 CDr00r00      [17]  381 	call	_puts
   01F7 F1            [10]  382 	pop	af
                            383 ;src\flash.c:107: return (0);
   01F8 21 00 00      [10]  384 	ld	hl, #0x0000
   01FB C3r11r04      [10]  385 	jp	00129$
   01FE                     386 00116$:
                            387 ;src\flash.c:110: printf ("Found flash in slot: %d\r\n",slot);
   01FE DD 5E EE      [19]  388 	ld	e, -18 (ix)
   0201 16 00         [ 7]  389 	ld	d, #0x00
   0203 C5            [11]  390 	push	bc
   0204 D5            [11]  391 	push	de
   0205 21r33r05      [10]  392 	ld	hl, #___str_16
   0208 E5            [11]  393 	push	hl
   0209 CDr00r00      [17]  394 	call	_printf
   020C F1            [10]  395 	pop	af
   020D F1            [10]  396 	pop	af
   020E C1            [10]  397 	pop	bc
                            398 ;src\flash.c:115: FT_SetName (&fcb,argv[argnr]);
   020F DD 6E FF      [19]  399 	ld	l, -1 (ix)
   0212 26 00         [ 7]  400 	ld	h, #0x00
   0214 29            [11]  401 	add	hl, hl
   0215 09            [11]  402 	add	hl, bc
   0216 5E            [ 7]  403 	ld	e, (hl)
   0217 23            [ 6]  404 	inc	hl
   0218 56            [ 7]  405 	ld	d, (hl)
   0219 21 00 00      [10]  406 	ld	hl, #0
   021C 39            [11]  407 	add	hl, sp
   021D DD 75 EF      [19]  408 	ld	-17 (ix), l
   0220 DD 74 F0      [19]  409 	ld	-16 (ix), h
   0223 C5            [11]  410 	push	bc
   0224 D5            [11]  411 	push	de
   0225 E5            [11]  412 	push	hl
   0226 CDr00r00      [17]  413 	call	_FT_SetName
   0229 F1            [10]  414 	pop	af
   022A F1            [10]  415 	pop	af
   022B C1            [10]  416 	pop	bc
                            417 ;src\flash.c:116: if(fcb_open( &fcb ) != FCB_SUCCESS) 
   022C DD 5E EF      [19]  418 	ld	e, -17 (ix)
   022F DD 56 F0      [19]  419 	ld	d, -16 (ix)
   0232 C5            [11]  420 	push	bc
   0233 D5            [11]  421 	push	de
   0234 CDr00r00      [17]  422 	call	_FcbOpen
   0237 F1            [10]  423 	pop	af
   0238 7D            [ 4]  424 	ld	a, l
   0239 C1            [10]  425 	pop	bc
   023A B7            [ 4]  426 	or	a, a
   023B 28 0E         [12]  427 	jr	Z,00118$
                            428 ;src\flash.c:118: printf ("Error: opening file\r\n");
   023D 21r4Dr05      [10]  429 	ld	hl, #___str_18
   0240 E5            [11]  430 	push	hl
   0241 CDr00r00      [17]  431 	call	_puts
   0244 F1            [10]  432 	pop	af
                            433 ;src\flash.c:119: return (0);   
   0245 21 00 00      [10]  434 	ld	hl, #0x0000
   0248 C3r11r04      [10]  435 	jp	00129$
   024B                     436 00118$:
                            437 ;src\flash.c:121: printf ("Opened: %s\r\n",argv[0]);
   024B 69            [ 4]  438 	ld	l, c
   024C 60            [ 4]  439 	ld	h, b
   024D 4E            [ 7]  440 	ld	c, (hl)
   024E 23            [ 6]  441 	inc	hl
   024F 46            [ 7]  442 	ld	b, (hl)
   0250 C5            [11]  443 	push	bc
   0251 21r62r05      [10]  444 	ld	hl, #___str_19
   0254 E5            [11]  445 	push	hl
   0255 CDr00r00      [17]  446 	call	_printf
   0258 F1            [10]  447 	pop	af
   0259 F1            [10]  448 	pop	af
                            449 ;src\flash.c:123: unsigned long romsize = fcb.file_size;
   025A DD 6E EF      [19]  450 	ld	l, -17 (ix)
   025D DD 66 F0      [19]  451 	ld	h, -16 (ix)
   0260 11 10 00      [10]  452 	ld	de, #0x0010
   0263 19            [11]  453 	add	hl, de
   0264 7E            [ 7]  454 	ld	a, (hl)
   0265 DD 77 F1      [19]  455 	ld	-15 (ix), a
   0268 23            [ 6]  456 	inc	hl
   0269 7E            [ 7]  457 	ld	a, (hl)
   026A DD 77 F2      [19]  458 	ld	-14 (ix), a
   026D 23            [ 6]  459 	inc	hl
   026E 7E            [ 7]  460 	ld	a, (hl)
   026F DD 77 F3      [19]  461 	ld	-13 (ix), a
   0272 23            [ 6]  462 	inc	hl
   0273 7E            [ 7]  463 	ld	a, (hl)
   0274 DD 77 F4      [19]  464 	ld	-12 (ix), a
                            465 ;src\flash.c:124: printf("Filesize is %ld bytes\r\n", romsize);
   0277 DD 6E F3      [19]  466 	ld	l, -13 (ix)
   027A DD 66 F4      [19]  467 	ld	h, -12 (ix)
   027D E5            [11]  468 	push	hl
   027E DD 6E F1      [19]  469 	ld	l, -15 (ix)
   0281 DD 66 F2      [19]  470 	ld	h, -14 (ix)
   0284 E5            [11]  471 	push	hl
   0285 21r6Fr05      [10]  472 	ld	hl, #___str_20
   0288 E5            [11]  473 	push	hl
   0289 CDr00r00      [17]  474 	call	_printf
   028C F1            [10]  475 	pop	af
   028D F1            [10]  476 	pop	af
   028E F1            [10]  477 	pop	af
                            478 ;src\flash.c:127: float endsector = romsize;
   028F DD 6E F3      [19]  479 	ld	l, -13 (ix)
   0292 DD 66 F4      [19]  480 	ld	h, -12 (ix)
   0295 E5            [11]  481 	push	hl
   0296 DD 6E F1      [19]  482 	ld	l, -15 (ix)
   0299 DD 66 F2      [19]  483 	ld	h, -14 (ix)
   029C E5            [11]  484 	push	hl
   029D CDr00r00      [17]  485 	call	___ulong2fs
   02A0 F1            [10]  486 	pop	af
   02A1 F1            [10]  487 	pop	af
   02A2 4D            [ 4]  488 	ld	c, l
   02A3 44            [ 4]  489 	ld	b, h
                            490 ;src\flash.c:128: endsector = endsector / 65536;
   02A4 21 80 47      [10]  491 	ld	hl, #0x4780
   02A7 E5            [11]  492 	push	hl
   02A8 21 00 00      [10]  493 	ld	hl, #0x0000
   02AB E5            [11]  494 	push	hl
   02AC D5            [11]  495 	push	de
   02AD C5            [11]  496 	push	bc
   02AE CDr00r00      [17]  497 	call	___fsdiv
   02B1 F1            [10]  498 	pop	af
   02B2 F1            [10]  499 	pop	af
   02B3 F1            [10]  500 	pop	af
   02B4 F1            [10]  501 	pop	af
                            502 ;src\flash.c:129: endsector = ceilf (endsector);
   02B5 D5            [11]  503 	push	de
   02B6 E5            [11]  504 	push	hl
   02B7 CDr00r00      [17]  505 	call	_ceilf
   02BA F1            [10]  506 	pop	af
   02BB F1            [10]  507 	pop	af
                            508 ;src\flash.c:130: if (!erase_flash (slot)) 
   02BC DD 7E EE      [19]  509 	ld	a, -18 (ix)
   02BF F5            [11]  510 	push	af
   02C0 33            [ 6]  511 	inc	sp
   02C1 CDrF7r07      [17]  512 	call	_erase_flash
   02C4 33            [ 6]  513 	inc	sp
   02C5 7D            [ 4]  514 	ld	a, l
   02C6 B7            [ 4]  515 	or	a, a
   02C7 20 06         [12]  516 	jr	NZ,00120$
                            517 ;src\flash.c:131: return (0); 
   02C9 21 00 00      [10]  518 	ld	hl, #0x0000
   02CC C3r11r04      [10]  519 	jp	00129$
   02CF                     520 00120$:
                            521 ;src\flash.c:134: unsigned long total_bytes_written = 0;
   02CF AF            [ 4]  522 	xor	a, a
   02D0 DD 77 F5      [19]  523 	ld	-11 (ix), a
   02D3 DD 77 F6      [19]  524 	ld	-10 (ix), a
   02D6 DD 77 F7      [19]  525 	ld	-9 (ix), a
   02D9 DD 77 F8      [19]  526 	ld	-8 (ix), a
                            527 ;src\flash.c:139: while ( total_bytes_written < romsize) 
   02DC DD 7E EF      [19]  528 	ld	a, -17 (ix)
   02DF DD 77 F9      [19]  529 	ld	-7 (ix), a
   02E2 DD 7E F0      [19]  530 	ld	a, -16 (ix)
   02E5 DD 77 FA      [19]  531 	ld	-6 (ix), a
   02E8 DD 36 FF 00   [19]  532 	ld	-1 (ix), #0x00
   02EC                     533 00126$:
   02EC DD 7E F5      [19]  534 	ld	a, -11 (ix)
   02EF DD 96 F1      [19]  535 	sub	a, -15 (ix)
   02F2 DD 7E F6      [19]  536 	ld	a, -10 (ix)
   02F5 DD 9E F2      [19]  537 	sbc	a, -14 (ix)
   02F8 DD 7E F7      [19]  538 	ld	a, -9 (ix)
   02FB DD 9E F3      [19]  539 	sbc	a, -13 (ix)
   02FE DD 7E F8      [19]  540 	ld	a, -8 (ix)
   0301 DD 9E F4      [19]  541 	sbc	a, -12 (ix)
   0304 D2rFBr03      [10]  542 	jp	NC, 00128$
                            543 ;src\flash.c:142: MemFill (file_segment,0xff,SEGMENT_SIZE);
   0307 21 00 20      [10]  544 	ld	hl, #0x2000
   030A E5            [11]  545 	push	hl
   030B 3E FF         [ 7]  546 	ld	a, #0xff
   030D F5            [11]  547 	push	af
   030E 33            [ 6]  548 	inc	sp
   030F 21 00 80      [10]  549 	ld	hl, #_file_segment
   0312 E5            [11]  550 	push	hl
   0313 CDr00r00      [17]  551 	call	_MemFill
   0316 F1            [10]  552 	pop	af
   0317 F1            [10]  553 	pop	af
   0318 33            [ 6]  554 	inc	sp
                            555 ;src\flash.c:143: bytes_read = fcb_read( &fcb, file_segment,SEGMENT_SIZE);
   0319 DD 4E F9      [19]  556 	ld	c, -7 (ix)
   031C DD 46 FA      [19]  557 	ld	b, -6 (ix)
   031F 21 00 20      [10]  558 	ld	hl, #0x2000
   0322 E5            [11]  559 	push	hl
   0323 21 00 80      [10]  560 	ld	hl, #_file_segment
   0326 E5            [11]  561 	push	hl
   0327 C5            [11]  562 	push	bc
   0328 CDr00r00      [17]  563 	call	_FcbRead
   032B F1            [10]  564 	pop	af
   032C F1            [10]  565 	pop	af
   032D F1            [10]  566 	pop	af
                            567 ;src\flash.c:147: if (bytes_read > 0) {
   032E AF            [ 4]  568 	xor	a, a
   032F BD            [ 4]  569 	cp	a, l
   0330 9C            [ 4]  570 	sbc	a, h
   0331 E2r36r03      [10]  571 	jp	PO, 00201$
   0334 EE 80         [ 7]  572 	xor	a, #0x80
   0336                     573 00201$:
   0336 F2rF3r03      [10]  574 	jp	P, 00124$
                            575 ;src\flash.c:149: int progress = (int)((total_bytes_written + bytes_read) * 20 / romsize); // Scale to 20 chars
   0339 7C            [ 4]  576 	ld	a, h
   033A 17            [ 4]  577 	rla
   033B 9F            [ 4]  578 	sbc	a, a
   033C 4F            [ 4]  579 	ld	c, a
   033D 47            [ 4]  580 	ld	b, a
   033E 7D            [ 4]  581 	ld	a, l
   033F DD 86 F5      [19]  582 	add	a, -11 (ix)
   0342 DD 77 FB      [19]  583 	ld	-5 (ix), a
   0345 7C            [ 4]  584 	ld	a, h
   0346 DD 8E F6      [19]  585 	adc	a, -10 (ix)
   0349 DD 77 FC      [19]  586 	ld	-4 (ix), a
   034C 79            [ 4]  587 	ld	a, c
   034D DD 8E F7      [19]  588 	adc	a, -9 (ix)
   0350 DD 77 FD      [19]  589 	ld	-3 (ix), a
   0353 78            [ 4]  590 	ld	a, b
   0354 DD 8E F8      [19]  591 	adc	a, -8 (ix)
   0357 DD 77 FE      [19]  592 	ld	-2 (ix), a
   035A DD 6E FD      [19]  593 	ld	l, -3 (ix)
   035D DD 66 FE      [19]  594 	ld	h, -2 (ix)
   0360 E5            [11]  595 	push	hl
   0361 DD 6E FB      [19]  596 	ld	l, -5 (ix)
   0364 DD 66 FC      [19]  597 	ld	h, -4 (ix)
   0367 E5            [11]  598 	push	hl
   0368 21 00 00      [10]  599 	ld	hl, #0x0000
   036B E5            [11]  600 	push	hl
   036C 21 14 00      [10]  601 	ld	hl, #0x0014
   036F E5            [11]  602 	push	hl
   0370 CDr00r00      [17]  603 	call	__mullong
   0373 F1            [10]  604 	pop	af
   0374 F1            [10]  605 	pop	af
   0375 F1            [10]  606 	pop	af
   0376 F1            [10]  607 	pop	af
   0377 4D            [ 4]  608 	ld	c, l
   0378 44            [ 4]  609 	ld	b, h
   0379 DD 6E F3      [19]  610 	ld	l, -13 (ix)
   037C DD 66 F4      [19]  611 	ld	h, -12 (ix)
   037F E5            [11]  612 	push	hl
   0380 DD 6E F1      [19]  613 	ld	l, -15 (ix)
   0383 DD 66 F2      [19]  614 	ld	h, -14 (ix)
   0386 E5            [11]  615 	push	hl
   0387 D5            [11]  616 	push	de
   0388 C5            [11]  617 	push	bc
   0389 CDr00r00      [17]  618 	call	__divulong
   038C F1            [10]  619 	pop	af
   038D F1            [10]  620 	pop	af
   038E F1            [10]  621 	pop	af
   038F F1            [10]  622 	pop	af
   0390 EB            [ 4]  623 	ex	de, hl
                            624 ;src\flash.c:150: printf("[%-20s] %ld/%ld \r", "####################" + (20 - progress), total_bytes_written + bytes_read, romsize); // write 8k segment (or partial segment)
   0391 21 14 00      [10]  625 	ld	hl, #0x0014
   0394 BF            [ 4]  626 	cp	a, a
   0395 ED 52         [15]  627 	sbc	hl, de
   0397 11r99r05      [10]  628 	ld	de, #___str_22
   039A 19            [11]  629 	add	hl, de
   039B 4D            [ 4]  630 	ld	c, l
   039C 44            [ 4]  631 	ld	b, h
   039D DD 6E F3      [19]  632 	ld	l, -13 (ix)
   03A0 DD 66 F4      [19]  633 	ld	h, -12 (ix)
   03A3 E5            [11]  634 	push	hl
   03A4 DD 6E F1      [19]  635 	ld	l, -15 (ix)
   03A7 DD 66 F2      [19]  636 	ld	h, -14 (ix)
   03AA E5            [11]  637 	push	hl
   03AB DD 6E FD      [19]  638 	ld	l, -3 (ix)
   03AE DD 66 FE      [19]  639 	ld	h, -2 (ix)
   03B1 E5            [11]  640 	push	hl
   03B2 DD 6E FB      [19]  641 	ld	l, -5 (ix)
   03B5 DD 66 FC      [19]  642 	ld	h, -4 (ix)
   03B8 E5            [11]  643 	push	hl
   03B9 C5            [11]  644 	push	bc
   03BA 21r87r05      [10]  645 	ld	hl, #___str_21
   03BD E5            [11]  646 	push	hl
   03BE CDr00r00      [17]  647 	call	_printf
   03C1 21 0C 00      [10]  648 	ld	hl, #12
   03C4 39            [11]  649 	add	hl, sp
   03C5 F9            [ 6]  650 	ld	sp, hl
                            651 ;src\flash.c:153: if (!write_flash_segment(slot, segmentnr))
   03C6 DD 66 FF      [19]  652 	ld	h, -1 (ix)
   03C9 DD 6E EE      [19]  653 	ld	l, -18 (ix)
   03CC E5            [11]  654 	push	hl
   03CD CDr0Er09      [17]  655 	call	_write_flash_segment
   03D0 F1            [10]  656 	pop	af
   03D1 7D            [ 4]  657 	ld	a, l
   03D2 B7            [ 4]  658 	or	a, a
   03D3 28 26         [12]  659 	jr	Z,00128$
                            660 ;src\flash.c:157: total_bytes_written += bytes_read;
   03D5 DD 4E FB      [19]  661 	ld	c, -5 (ix)
   03D8 DD 46 FC      [19]  662 	ld	b, -4 (ix)
   03DB DD 5E FD      [19]  663 	ld	e, -3 (ix)
   03DE DD 56 FE      [19]  664 	ld	d, -2 (ix)
   03E1 DD 71 F5      [19]  665 	ld	-11 (ix), c
   03E4 DD 70 F6      [19]  666 	ld	-10 (ix), b
   03E7 DD 73 F7      [19]  667 	ld	-9 (ix), e
   03EA DD 72 F8      [19]  668 	ld	-8 (ix), d
                            669 ;src\flash.c:158: segmentnr++;
   03ED DD 34 FF      [23]  670 	inc	-1 (ix)
   03F0 C3rECr02      [10]  671 	jp	00126$
   03F3                     672 00124$:
                            673 ;src\flash.c:162: printf("Error reading file or end of file reached\r\n");
   03F3 21rAEr05      [10]  674 	ld	hl, #___str_24
   03F6 E5            [11]  675 	push	hl
   03F7 CDr00r00      [17]  676 	call	_puts
   03FA F1            [10]  677 	pop	af
                            678 ;src\flash.c:163: break;
   03FB                     679 00128$:
                            680 ;src\flash.c:169: printf("\nWrite operation complete!\r\n");
   03FB 21rD9r05      [10]  681 	ld	hl, #___str_26
   03FE E5            [11]  682 	push	hl
   03FF CDr00r00      [17]  683 	call	_puts
   0402 F1            [10]  684 	pop	af
                            685 ;src\flash.c:170: fcb_close (&fcb);
   0403 DD 4E EF      [19]  686 	ld	c, -17 (ix)
   0406 DD 46 F0      [19]  687 	ld	b, -16 (ix)
   0409 C5            [11]  688 	push	bc
   040A CDr00r00      [17]  689 	call	_FcbClose
   040D F1            [10]  690 	pop	af
                            691 ;src\flash.c:171: return(0);
   040E 21 00 00      [10]  692 	ld	hl, #0x0000
   0411                     693 00129$:
                            694 ;src\flash.c:172: }
   0411 DD F9         [10]  695 	ld	sp, ix
   0413 DD E1         [14]  696 	pop	ix
   0415 C9            [10]  697 	ret
   0416                     698 ___str_8:
   0416 46 4C 41 53 48 2E   699 	.ascii "FLASH.COM [flags] [romfile]"
        43 4F 4D 20 5B 66
        6C 61 67 73 5D 20
        5B 72 6F 6D 66 69
        6C 65 5D
   0431 0D                  700 	.db 0x0d
   0432 0A                  701 	.db 0x0a
   0433 0D                  702 	.db 0x0d
   0434 0A                  703 	.db 0x0a
   0435 4F 70 74 69 6F 6E   704 	.ascii "Options:"
        73 3A
   043D 0D                  705 	.db 0x0d
   043E 0A                  706 	.db 0x0a
   043F 2F 53 30 20 2D 20   707 	.ascii "/S0 - skip detection and select slot 0"
        73 6B 69 70 20 64
        65 74 65 63 74 69
        6F 6E 20 61 6E 64
        20 73 65 6C 65 63
        74 20 73 6C 6F 74
        20 30
   0465 0D                  708 	.db 0x0d
   0466 0A                  709 	.db 0x0a
   0467 2F 53 31 20 2D 20   710 	.ascii "/S1 - skip detection and select slot 1"
        73 6B 69 70 20 64
        65 74 65 63 74 69
        6F 6E 20 61 6E 64
        20 73 65 6C 65 63
        74 20 73 6C 6F 74
        20 31
   048D 0D                  711 	.db 0x0d
   048E 0A                  712 	.db 0x0a
   048F 2F 53 32 20 2D 20   713 	.ascii "/S2 - skip detection and select slot 2"
        73 6B 69 70 20 64
        65 74 65 63 74 69
        6F 6E 20 61 6E 64
        20 73 65 6C 65 63
        74 20 73 6C 6F 74
        20 32
   04B5 0D                  714 	.db 0x0d
   04B6 0A                  715 	.db 0x0a
   04B7 2F 53 33 20 2D 20   716 	.ascii "/S3 - skip detection and select slot 3"
        73 6B 69 70 20 64
        65 74 65 63 74 69
        6F 6E 20 61 6E 64
        20 73 65 6C 65 63
        74 20 73 6C 6F 74
        20 33
   04DD 0D                  717 	.db 0x0d
   04DE 00                  718 	.db 0x00
   04DF                     719 ___str_9:
   04DF 4E 6F 74 20 65 6E   720 	.ascii "Not enough memory to read file segment"
        6F 75 67 68 20 6D
        65 6D 6F 72 79 20
        74 6F 20 72 65 61
        64 20 66 69 6C 65
        20 73 65 67 6D 65
        6E 74
   0505 00                  721 	.db 0x00
   0506                     722 ___str_10:
   0506 2F 53 30            723 	.ascii "/S0"
   0509 00                  724 	.db 0x00
   050A                     725 ___str_11:
   050A 2F 53 31            726 	.ascii "/S1"
   050D 00                  727 	.db 0x00
   050E                     728 ___str_12:
   050E 2F 53 32            729 	.ascii "/S2"
   0511 00                  730 	.db 0x00
   0512                     731 ___str_13:
   0512 2F 53 33            732 	.ascii "/S3"
   0515 00                  733 	.db 0x00
   0516                     734 ___str_15:
   0516 43 61 6E 6E 6F 74   735 	.ascii "Cannot find slot with flash"
        20 66 69 6E 64 20
        73 6C 6F 74 20 77
        69 74 68 20 66 6C
        61 73 68
   0531 0D                  736 	.db 0x0d
   0532 00                  737 	.db 0x00
   0533                     738 ___str_16:
   0533 46 6F 75 6E 64 20   739 	.ascii "Found flash in slot: %d"
        66 6C 61 73 68 20
        69 6E 20 73 6C 6F
        74 3A 20 25 64
   054A 0D                  740 	.db 0x0d
   054B 0A                  741 	.db 0x0a
   054C 00                  742 	.db 0x00
   054D                     743 ___str_18:
   054D 45 72 72 6F 72 3A   744 	.ascii "Error: opening file"
        20 6F 70 65 6E 69
        6E 67 20 66 69 6C
        65
   0560 0D                  745 	.db 0x0d
   0561 00                  746 	.db 0x00
   0562                     747 ___str_19:
   0562 4F 70 65 6E 65 64   748 	.ascii "Opened: %s"
        3A 20 25 73
   056C 0D                  749 	.db 0x0d
   056D 0A                  750 	.db 0x0a
   056E 00                  751 	.db 0x00
   056F                     752 ___str_20:
   056F 46 69 6C 65 73 69   753 	.ascii "Filesize is %ld bytes"
        7A 65 20 69 73 20
        25 6C 64 20 62 79
        74 65 73
   0584 0D                  754 	.db 0x0d
   0585 0A                  755 	.db 0x0a
   0586 00                  756 	.db 0x00
   0587                     757 ___str_21:
   0587 5B 25 2D 32 30 73   758 	.ascii "[%-20s] %ld/%ld "
        5D 20 25 6C 64 2F
        25 6C 64 20
   0597 0D                  759 	.db 0x0d
   0598 00                  760 	.db 0x00
   0599                     761 ___str_22:
   0599 23 23 23 23 23 23   762 	.ascii "####################"
        23 23 23 23 23 23
        23 23 23 23 23 23
        23 23
   05AD 00                  763 	.db 0x00
   05AE                     764 ___str_24:
   05AE 45 72 72 6F 72 20   765 	.ascii "Error reading file or end of file reached"
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        20 6F 72 20 65 6E
        64 20 6F 66 20 66
        69 6C 65 20 72 65
        61 63 68 65 64
   05D7 0D                  766 	.db 0x0d
   05D8 00                  767 	.db 0x00
   05D9                     768 ___str_26:
   05D9 0A                  769 	.db 0x0a
   05DA 57 72 69 74 65 20   770 	.ascii "Write operation complete!"
        6F 70 65 72 61 74
        69 6F 6E 20 63 6F
        6D 70 6C 65 74 65
        21
   05F3 0D                  771 	.db 0x0d
   05F4 00                  772 	.db 0x00
   05F5                     773 ___str_28:
   05F5 4D 53 58 55 53 42   774 	.ascii "MSXUSB Flash Loader 1.1"
        20 46 6C 61 73 68
        20 4C 6F 61 64 65
        72 20 31 2E 31
   060C 0D                  775 	.db 0x0d
   060D 0A                  776 	.db 0x0a
   060E 28 63 29 20 32 30   777 	.ascii "(c) 2024 The Retro Hacker"
        32 34 20 54 68 65
        20 52 65 74 72 6F
        20 48 61 63 6B 65
        72
   0627 0D                  778 	.db 0x0d
   0628 0A                  779 	.db 0x0a
   0629 42 61 73 65 64 20   780 	.ascii "Based on the original code by S0urceror"
        6F 6E 20 74 68 65
        20 6F 72 69 67 69
        6E 61 6C 20 63 6F
        64 65 20 62 79 20
        53 30 75 72 63 65
        72 6F 72
   0650 0D                  781 	.db 0x0d
   0651 0A                  782 	.db 0x0a
   0652 0D                  783 	.db 0x0d
   0653 00                  784 	.db 0x00
                            785 ;src\flash.c:179: void select_slot_40 (uint8_t slot)
                            786 ;	---------------------------------
                            787 ; Function select_slot_40
                            788 ; ---------------------------------
   0654                     789 _select_slot_40::
                            790 ;src\flash.c:189: __endasm;
   0654 FD 21 02 00   [14]  791 	ld	iy,#2
   0658 FD 39         [15]  792 	add	iy,sp ;Bypass the return address of the function
   065A FD 7E 00      [19]  793 	ld	a,(iy) ;slot
   065D 26 40         [ 7]  794 	ld	h,#0x40
   065F C3 24 00      [10]  795 	jp	0x24 ; ENASLT
                            796 ;src\flash.c:190: }
   0662 C9            [10]  797 	ret
                            798 ;src\flash.c:197: void select_ramslot_40 ()
                            799 ;	---------------------------------
                            800 ; Function select_ramslot_40
                            801 ; ---------------------------------
   0663                     802 _select_ramslot_40::
                            803 ;src\flash.c:203: __endasm;
   0663 3A 42 F3      [13]  804 	ld	a,(#0xf342) ; RAMAD1
   0666 26 40         [ 7]  805 	ld	h,#0x40
   0668 C3 24 00      [10]  806 	jp	0x24 ; ENASLT
                            807 ;src\flash.c:204: }
   066B C9            [10]  808 	ret
                            809 ;src\flash.c:211: BOOL flash_ident ()
                            810 ;	---------------------------------
                            811 ; Function flash_ident
                            812 ; ---------------------------------
   066C                     813 _flash_ident::
                            814 ;src\flash.c:215: flash_segment[0] = 0xf0;
   066C 21 00 40      [10]  815 	ld	hl, #_flash_segment
   066F 36 F0         [10]  816 	ld	(hl), #0xf0
                            817 ;src\flash.c:217: dummy = flash_segment [0x555];
   0671 3A 55 45      [13]  818 	ld	a, (#_flash_segment+1365)
                            819 ;src\flash.c:218: flash_segment[0x555] = 0xaa;
   0674 21 55 45      [10]  820 	ld	hl, #(_flash_segment + 0x0555)
   0677 36 AA         [10]  821 	ld	(hl), #0xaa
                            822 ;src\flash.c:219: dummy = flash_segment [0x2aa];
   0679 3A AA 42      [13]  823 	ld	a, (#_flash_segment+682)
                            824 ;src\flash.c:220: flash_segment[0x2aa] = 0x55;
   067C 21 AA 42      [10]  825 	ld	hl, #(_flash_segment + 0x02aa)
   067F 36 55         [10]  826 	ld	(hl), #0x55
                            827 ;src\flash.c:221: dummy = flash_segment [0x555];
   0681 3A 55 45      [13]  828 	ld	a, (#_flash_segment+1365)
                            829 ;src\flash.c:222: flash_segment[0x555] = 0x90;
   0684 21 55 45      [10]  830 	ld	hl, #(_flash_segment + 0x0555)
   0687 36 90         [10]  831 	ld	(hl), #0x90
                            832 ;src\flash.c:224: uint8_t manufacturer = flash_segment[0];
   0689 3A 00 40      [13]  833 	ld	a, (#_flash_segment+0)
                            834 ;src\flash.c:225: uint8_t device = flash_segment[1];
   068C 3A 01 40      [13]  835 	ld	a, (#(_flash_segment + 0x0001) + 0)
                            836 ;src\flash.c:233: switch (device) {
   068F FE 20         [ 7]  837 	cp	a, #0x20
   0691 28 19         [12]  838 	jr	Z,00102$
   0693 D6 A4         [ 7]  839 	sub	a, #0xa4
   0695 20 2A         [12]  840 	jr	NZ,00103$
                            841 ;src\flash.c:235: printf("Found device: AMD_AM29F040\r\n");
   0697 21rC9r06      [10]  842 	ld	hl, #___str_30
   069A E5            [11]  843 	push	hl
   069B CDr00r00      [17]  844 	call	_puts
   069E F1            [10]  845 	pop	af
                            846 ;src\flash.c:236: flash_segment[0] = 0xf0;
   069F 21 00 40      [10]  847 	ld	hl, #_flash_segment
   06A2 36 F0         [10]  848 	ld	(hl), #0xf0
                            849 ;src\flash.c:237: return TRUE;
   06A4 FD 21r00r01   [14]  850 	ld	iy, #_TRUE
   06A8 FD 6E 00      [19]  851 	ld	l, 0 (iy)
   06AB C9            [10]  852 	ret
                            853 ;src\flash.c:239: case 0x20:
   06AC                     854 00102$:
                            855 ;src\flash.c:240: printf("Found device: AMD_AM29F010\r\n");
   06AC 21rE5r06      [10]  856 	ld	hl, #___str_32
   06AF E5            [11]  857 	push	hl
   06B0 CDr00r00      [17]  858 	call	_puts
   06B3 F1            [10]  859 	pop	af
                            860 ;src\flash.c:241: flash_segment[0] = 0xf0;
   06B4 21 00 40      [10]  861 	ld	hl, #_flash_segment
   06B7 36 F0         [10]  862 	ld	(hl), #0xf0
                            863 ;src\flash.c:242: return TRUE;
   06B9 FD 21r00r01   [14]  864 	ld	iy, #_TRUE
   06BD FD 6E 00      [19]  865 	ld	l, 0 (iy)
   06C0 C9            [10]  866 	ret
                            867 ;src\flash.c:244: default:
   06C1                     868 00103$:
                            869 ;src\flash.c:245: return FALSE;
   06C1 FD 21r01r01   [14]  870 	ld	iy, #_FALSE
   06C5 FD 6E 00      [19]  871 	ld	l, 0 (iy)
                            872 ;src\flash.c:246: }
                            873 ;src\flash.c:248: }
   06C8 C9            [10]  874 	ret
   06C9                     875 ___str_30:
   06C9 46 6F 75 6E 64 20   876 	.ascii "Found device: AMD_AM29F040"
        64 65 76 69 63 65
        3A 20 41 4D 44 5F
        41 4D 32 39 46 30
        34 30
   06E3 0D                  877 	.db 0x0d
   06E4 00                  878 	.db 0x00
   06E5                     879 ___str_32:
   06E5 46 6F 75 6E 64 20   880 	.ascii "Found device: AMD_AM29F010"
        64 65 76 69 63 65
        3A 20 41 4D 44 5F
        41 4D 32 39 46 30
        31 30
   06FF 0D                  881 	.db 0x0d
   0700 00                  882 	.db 0x00
                            883 ;src\flash.c:255: uint8_t find_flash ()
                            884 ;	---------------------------------
                            885 ; Function find_flash
                            886 ; ---------------------------------
   0701                     887 _find_flash::
                            888 ;src\flash.c:258: uint8_t highest_slot = 4;
                            889 ;src\flash.c:259: for (i=0;i<4;i++)
   0701 21 04 00      [10]  890 	ld	hl, #0x0004
   0704                     891 00104$:
                            892 ;src\flash.c:262: select_slot_40 (i);
   0704 E5            [11]  893 	push	hl
   0705 E5            [11]  894 	push	hl
   0706 33            [ 6]  895 	inc	sp
   0707 CDr54r06      [17]  896 	call	_select_slot_40
   070A 33            [ 6]  897 	inc	sp
   070B CDr6Cr06      [17]  898 	call	_flash_ident
   070E 7D            [ 4]  899 	ld	a, l
   070F E1            [10]  900 	pop	hl
   0710 B7            [ 4]  901 	or	a, a
   0711 28 01         [12]  902 	jr	Z,00105$
                            903 ;src\flash.c:265: highest_slot=i; // yes? save slot number
   0713 6C            [ 4]  904 	ld	l, h
   0714                     905 00105$:
                            906 ;src\flash.c:259: for (i=0;i<4;i++)
   0714 24            [ 4]  907 	inc	h
   0715 7C            [ 4]  908 	ld	a, h
   0716 D6 04         [ 7]  909 	sub	a, #0x04
   0718 38 EA         [12]  910 	jr	C,00104$
                            911 ;src\flash.c:267: select_ramslot_40 ();
   071A E5            [11]  912 	push	hl
   071B CDr63r06      [17]  913 	call	_select_ramslot_40
   071E E1            [10]  914 	pop	hl
                            915 ;src\flash.c:268: return highest_slot;
                            916 ;src\flash.c:269: }
   071F C9            [10]  917 	ret
                            918 ;src\flash.c:276: void print_hex_buffer (uint8_t* start, uint8_t* end)
                            919 ;	---------------------------------
                            920 ; Function print_hex_buffer
                            921 ; ---------------------------------
   0720                     922 _print_hex_buffer::
   0720 CDr00r00      [17]  923 	call	___sdcc_enter_ix
   0723 21 F2 FF      [10]  924 	ld	hl, #-14
   0726 39            [11]  925 	add	hl, sp
   0727 F9            [ 6]  926 	ld	sp, hl
                            927 ;src\flash.c:279: uint8_t* cur = start;
   0728 DD 4E 04      [19]  928 	ld	c, 4 (ix)
   072B DD 46 05      [19]  929 	ld	b, 5 (ix)
                            930 ;src\flash.c:281: while (cur<end)
   072E 21 00 00      [10]  931 	ld	hl, #0
   0731 39            [11]  932 	add	hl, sp
   0732 EB            [ 4]  933 	ex	de, hl
   0733 DD 73 F9      [19]  934 	ld	-7 (ix), e
   0736 DD 72 FA      [19]  935 	ld	-6 (ix), d
   0739 DD 73 FB      [19]  936 	ld	-5 (ix), e
   073C DD 72 FC      [19]  937 	ld	-4 (ix), d
   073F DD 36 FF 00   [19]  938 	ld	-1 (ix), #0x00
   0743                     939 00106$:
   0743 79            [ 4]  940 	ld	a, c
   0744 DD 96 06      [19]  941 	sub	a, 6 (ix)
   0747 78            [ 4]  942 	ld	a, b
   0748 DD 9E 07      [19]  943 	sbc	a, 7 (ix)
   074B D2rEDr07      [10]  944 	jp	NC, 00109$
                            945 ;src\flash.c:283: char hex[]="0\0\0";
   074E 21 03 00      [10]  946 	ld	hl, #3
   0751 39            [11]  947 	add	hl, sp
   0752 DD 75 FD      [19]  948 	ld	-3 (ix), l
   0755 DD 74 FE      [19]  949 	ld	-2 (ix), h
   0758 36 30         [10]  950 	ld	(hl), #0x30
   075A DD 6E FD      [19]  951 	ld	l, -3 (ix)
   075D DD 66 FE      [19]  952 	ld	h, -2 (ix)
   0760 23            [ 6]  953 	inc	hl
   0761 36 00         [10]  954 	ld	(hl), #0x00
   0763 DD 6E FD      [19]  955 	ld	l, -3 (ix)
   0766 DD 66 FE      [19]  956 	ld	h, -2 (ix)
   0769 23            [ 6]  957 	inc	hl
   076A 23            [ 6]  958 	inc	hl
   076B 36 00         [10]  959 	ld	(hl), #0x00
   076D DD 6E FD      [19]  960 	ld	l, -3 (ix)
   0770 DD 66 FE      [19]  961 	ld	h, -2 (ix)
   0773 23            [ 6]  962 	inc	hl
   0774 23            [ 6]  963 	inc	hl
   0775 23            [ 6]  964 	inc	hl
   0776 36 00         [10]  965 	ld	(hl), #0x00
                            966 ;src\flash.c:284: uint8_t len = sprintf (str,"%x",*cur);
   0778 0A            [ 7]  967 	ld	a, (bc)
   0779 6F            [ 4]  968 	ld	l, a
   077A 26 00         [ 7]  969 	ld	h, #0x00
   077C D5            [11]  970 	push	de
   077D FD E1         [14]  971 	pop	iy
   077F C5            [11]  972 	push	bc
   0780 D5            [11]  973 	push	de
   0781 E5            [11]  974 	push	hl
   0782 21rF2r07      [10]  975 	ld	hl, #___str_34
   0785 E5            [11]  976 	push	hl
   0786 FD E5         [15]  977 	push	iy
   0788 CDr00r00      [17]  978 	call	_sprintf
   078B F1            [10]  979 	pop	af
   078C F1            [10]  980 	pop	af
   078D F1            [10]  981 	pop	af
   078E D1            [10]  982 	pop	de
   078F C1            [10]  983 	pop	bc
   0790 7D            [ 4]  984 	ld	a, l
                            985 ;src\flash.c:285: if (len<2)
   0791 D6 02         [ 7]  986 	sub	a, #0x02
   0793 30 2E         [12]  987 	jr	NC,00102$
                            988 ;src\flash.c:287: strcat (hex,str);
   0795 DD 6E FB      [19]  989 	ld	l, -5 (ix)
   0798 DD 66 FC      [19]  990 	ld	h, -4 (ix)
   079B E5            [11]  991 	push	hl
   079C DD 6E FD      [19]  992 	ld	l, -3 (ix)
   079F DD 66 FE      [19]  993 	ld	h, -2 (ix)
   07A2 E5            [11]  994 	push	hl
   07A3 FD E1         [14]  995 	pop	iy
   07A5 E1            [10]  996 	pop	hl
   07A6 C5            [11]  997 	push	bc
   07A7 D5            [11]  998 	push	de
   07A8 E5            [11]  999 	push	hl
   07A9 FD E5         [15] 1000 	push	iy
   07AB CDr00r00      [17] 1001 	call	_strcat
   07AE F1            [10] 1002 	pop	af
   07AF F1            [10] 1003 	pop	af
   07B0 D1            [10] 1004 	pop	de
   07B1 C1            [10] 1005 	pop	bc
                           1006 ;src\flash.c:288: printf (hex);
   07B2 DD 6E FD      [19] 1007 	ld	l, -3 (ix)
   07B5 DD 66 FE      [19] 1008 	ld	h, -2 (ix)
   07B8 C5            [11] 1009 	push	bc
   07B9 D5            [11] 1010 	push	de
   07BA E5            [11] 1011 	push	hl
   07BB CDr00r00      [17] 1012 	call	_printf
   07BE F1            [10] 1013 	pop	af
   07BF D1            [10] 1014 	pop	de
   07C0 C1            [10] 1015 	pop	bc
   07C1 18 0F         [12] 1016 	jr	00103$
   07C3                    1017 00102$:
                           1018 ;src\flash.c:291: printf (str);
   07C3 DD 6E F9      [19] 1019 	ld	l, -7 (ix)
   07C6 DD 66 FA      [19] 1020 	ld	h, -6 (ix)
   07C9 C5            [11] 1021 	push	bc
   07CA D5            [11] 1022 	push	de
   07CB E5            [11] 1023 	push	hl
   07CC CDr00r00      [17] 1024 	call	_printf
   07CF F1            [10] 1025 	pop	af
   07D0 D1            [10] 1026 	pop	de
   07D1 C1            [10] 1027 	pop	bc
   07D2                    1028 00103$:
                           1029 ;src\flash.c:293: cur++;
   07D2 03            [ 6] 1030 	inc	bc
                           1031 ;src\flash.c:294: cnt++;
   07D3 DD 34 FF      [23] 1032 	inc	-1 (ix)
                           1033 ;src\flash.c:295: if ((cnt%8)==0)
   07D6 DD 7E FF      [19] 1034 	ld	a, -1 (ix)
   07D9 E6 07         [ 7] 1035 	and	a, #0x07
   07DB C2r43r07      [10] 1036 	jp	NZ,00106$
                           1037 ;src\flash.c:296: printf ("\r\n");
   07DE C5            [11] 1038 	push	bc
   07DF D5            [11] 1039 	push	de
   07E0 21rF5r07      [10] 1040 	ld	hl, #___str_36
   07E3 E5            [11] 1041 	push	hl
   07E4 CDr00r00      [17] 1042 	call	_puts
   07E7 F1            [10] 1043 	pop	af
   07E8 D1            [10] 1044 	pop	de
   07E9 C1            [10] 1045 	pop	bc
   07EA C3r43r07      [10] 1046 	jp	00106$
   07ED                    1047 00109$:
                           1048 ;src\flash.c:298: }
   07ED DD F9         [10] 1049 	ld	sp, ix
   07EF DD E1         [14] 1050 	pop	ix
   07F1 C9            [10] 1051 	ret
   07F2                    1052 ___str_34:
   07F2 25 78              1053 	.ascii "%x"
   07F4 00                 1054 	.db 0x00
   07F5                    1055 ___str_36:
   07F5 0D                 1056 	.db 0x0d
   07F6 00                 1057 	.db 0x00
                           1058 ;src\flash.c:309: BOOL erase_flash(uint8_t slot)
                           1059 ;	---------------------------------
                           1060 ; Function erase_flash
                           1061 ; ---------------------------------
   07F7                    1062 _erase_flash::
                           1063 ;src\flash.c:312: select_slot_40 (slot);
   07F7 21 02 00      [10] 1064 	ld	hl, #2+0
   07FA 39            [11] 1065 	add	hl, sp
   07FB 7E            [ 7] 1066 	ld	a, (hl)
   07FC F5            [11] 1067 	push	af
   07FD 33            [ 6] 1068 	inc	sp
   07FE CDr54r06      [17] 1069 	call	_select_slot_40
   0801 33            [ 6] 1070 	inc	sp
                           1071 ;src\flash.c:314: printf ("Erasing flash: ");
   0802 21r5Br08      [10] 1072 	ld	hl, #___str_37
   0805 E5            [11] 1073 	push	hl
   0806 CDr00r00      [17] 1074 	call	_printf
   0809 F1            [10] 1075 	pop	af
                           1076 ;src\flash.c:316: flash_segment[0x555] = 0xaa;
   080A 21 55 45      [10] 1077 	ld	hl, #(_flash_segment + 0x0555)
   080D 36 AA         [10] 1078 	ld	(hl), #0xaa
                           1079 ;src\flash.c:317: flash_segment[0x2aa] = 0x55;
   080F 21 AA 42      [10] 1080 	ld	hl, #(_flash_segment + 0x02aa)
   0812 36 55         [10] 1081 	ld	(hl), #0x55
                           1082 ;src\flash.c:318: flash_segment[0x555] = 0x80;
   0814 21 55 45      [10] 1083 	ld	hl, #(_flash_segment + 0x0555)
   0817 36 80         [10] 1084 	ld	(hl), #0x80
                           1085 ;src\flash.c:319: flash_segment[0x555] = 0xaa;
   0819 36 AA         [10] 1086 	ld	(hl), #0xaa
                           1087 ;src\flash.c:320: flash_segment[0x2aa] = 0x55;
   081B 21 AA 42      [10] 1088 	ld	hl, #(_flash_segment + 0x02aa)
   081E 36 55         [10] 1089 	ld	(hl), #0x55
                           1090 ;src\flash.c:321: flash_segment[0x555] = 0x10;
   0820 21 55 45      [10] 1091 	ld	hl, #(_flash_segment + 0x0555)
   0823 36 10         [10] 1092 	ld	(hl), #0x10
                           1093 ;src\flash.c:323: if (!flash_command_okay (0,0xff))
   0825 3E FF         [ 7] 1094 	ld	a, #0xff
   0827 F5            [11] 1095 	push	af
   0828 33            [ 6] 1096 	inc	sp
   0829 21 00 00      [10] 1097 	ld	hl, #0x0000
   082C E5            [11] 1098 	push	hl
   082D CDr88r08      [17] 1099 	call	_flash_command_okay
   0830 F1            [10] 1100 	pop	af
   0831 33            [ 6] 1101 	inc	sp
   0832 7D            [ 4] 1102 	ld	a, l
   0833 B7            [ 4] 1103 	or	a, a
   0834 20 15         [12] 1104 	jr	NZ,00102$
                           1105 ;src\flash.c:326: flash_segment[0] = 0xf0;
   0836 21 00 40      [10] 1106 	ld	hl, #_flash_segment
   0839 36 F0         [10] 1107 	ld	(hl), #0xf0
                           1108 ;src\flash.c:327: printf ("error erasing flash!\r\n");
   083B 21r6Br08      [10] 1109 	ld	hl, #___str_39
   083E E5            [11] 1110 	push	hl
   083F CDr00r00      [17] 1111 	call	_puts
   0842 F1            [10] 1112 	pop	af
                           1113 ;src\flash.c:328: return FALSE;
   0843 FD 21r01r01   [14] 1114 	ld	iy, #_FALSE
   0847 FD 6E 00      [19] 1115 	ld	l, 0 (iy)
   084A C9            [10] 1116 	ret
   084B                    1117 00102$:
                           1118 ;src\flash.c:331: printf ("done!\r\n");
   084B 21r81r08      [10] 1119 	ld	hl, #___str_41
   084E E5            [11] 1120 	push	hl
   084F CDr00r00      [17] 1121 	call	_puts
   0852 F1            [10] 1122 	pop	af
                           1123 ;src\flash.c:332: return TRUE;
   0853 FD 21r00r01   [14] 1124 	ld	iy, #_TRUE
   0857 FD 6E 00      [19] 1125 	ld	l, 0 (iy)
                           1126 ;src\flash.c:333: }
   085A C9            [10] 1127 	ret
   085B                    1128 ___str_37:
   085B 45 72 61 73 69 6E  1129 	.ascii "Erasing flash: "
        67 20 66 6C 61 73
        68 3A 20
   086A 00                 1130 	.db 0x00
   086B                    1131 ___str_39:
   086B 65 72 72 6F 72 20  1132 	.ascii "error erasing flash!"
        65 72 61 73 69 6E
        67 20 66 6C 61 73
        68 21
   087F 0D                 1133 	.db 0x0d
   0880 00                 1134 	.db 0x00
   0881                    1135 ___str_41:
   0881 64 6F 6E 65 21     1136 	.ascii "done!"
   0886 0D                 1137 	.db 0x0d
   0887 00                 1138 	.db 0x00
                           1139 ;src\flash.c:336: BOOL flash_command_okay (uint16_t address,uint8_t expected_value)
                           1140 ;	---------------------------------
                           1141 ; Function flash_command_okay
                           1142 ; ---------------------------------
   0888                    1143 _flash_command_okay::
   0888 CDr00r00      [17] 1144 	call	___sdcc_enter_ix
                           1145 ;src\flash.c:339: while (TRUE)
   088B                    1146 00105$:
   088B 21r00r01      [10] 1147 	ld	hl,#_TRUE + 0
   088E 4E            [ 7] 1148 	ld	c, (hl)
   088F 79            [ 4] 1149 	ld	a, c
   0890 B7            [ 4] 1150 	or	a, a
   0891 28 18         [12] 1151 	jr	Z,00107$
                           1152 ;src\flash.c:341: value = flash_segment[address];
   0893 11 00 40      [10] 1153 	ld	de, #_flash_segment+0
   0896 DD 6E 04      [19] 1154 	ld	l, 4 (ix)
   0899 DD 66 05      [19] 1155 	ld	h, 5 (ix)
   089C 19            [11] 1156 	add	hl, de
   089D 46            [ 7] 1157 	ld	b, (hl)
                           1158 ;src\flash.c:342: if (value==expected_value)
   089E DD 7E 06      [19] 1159 	ld	a, 6 (ix)
   08A1 90            [ 4] 1160 	sub	a, b
   08A2 20 03         [12] 1161 	jr	NZ,00102$
                           1162 ;src\flash.c:343: return TRUE;
   08A4 69            [ 4] 1163 	ld	l, c
   08A5 18 3A         [12] 1164 	jr	00111$
   08A7                    1165 00102$:
                           1166 ;src\flash.c:344: if ((value & 0x20) != 0)
   08A7 CB 68         [ 8] 1167 	bit	5, b
   08A9 28 E0         [12] 1168 	jr	Z,00105$
                           1169 ;src\flash.c:345: break;
   08AB                    1170 00107$:
                           1171 ;src\flash.c:347: value = flash_segment[address];
   08AB 11 00 40      [10] 1172 	ld	de, #_flash_segment+0
   08AE DD 6E 04      [19] 1173 	ld	l, 4 (ix)
   08B1 DD 66 05      [19] 1174 	ld	h, 5 (ix)
   08B4 19            [11] 1175 	add	hl, de
   08B5 5E            [ 7] 1176 	ld	e, (hl)
                           1177 ;src\flash.c:348: if (value==expected_value)
   08B6 DD 7E 06      [19] 1178 	ld	a, 6 (ix)
   08B9 93            [ 4] 1179 	sub	a, e
   08BA 20 03         [12] 1180 	jr	NZ,00109$
                           1181 ;src\flash.c:349: return TRUE;
   08BC 69            [ 4] 1182 	ld	l, c
   08BD 18 22         [12] 1183 	jr	00111$
   08BF                    1184 00109$:
                           1185 ;src\flash.c:352: printf ("=> address: %x, value: %x, response: %x\r\n",address,expected_value,value);
   08BF 16 00         [ 7] 1186 	ld	d, #0x00
   08C1 DD 4E 06      [19] 1187 	ld	c, 6 (ix)
   08C4 06 00         [ 7] 1188 	ld	b, #0x00
   08C6 D5            [11] 1189 	push	de
   08C7 C5            [11] 1190 	push	bc
   08C8 DD 6E 04      [19] 1191 	ld	l, 4 (ix)
   08CB DD 66 05      [19] 1192 	ld	h, 5 (ix)
   08CE E5            [11] 1193 	push	hl
   08CF 21rE4r08      [10] 1194 	ld	hl, #___str_42
   08D2 E5            [11] 1195 	push	hl
   08D3 CDr00r00      [17] 1196 	call	_printf
   08D6 F1            [10] 1197 	pop	af
   08D7 F1            [10] 1198 	pop	af
   08D8 F1            [10] 1199 	pop	af
   08D9 F1            [10] 1200 	pop	af
                           1201 ;src\flash.c:353: return FALSE;
   08DA FD 21r01r01   [14] 1202 	ld	iy, #_FALSE
   08DE FD 6E 00      [19] 1203 	ld	l, 0 (iy)
   08E1                    1204 00111$:
                           1205 ;src\flash.c:355: }
   08E1 DD E1         [14] 1206 	pop	ix
   08E3 C9            [10] 1207 	ret
   08E4                    1208 ___str_42:
   08E4 3D 3E 20 61 64 64  1209 	.ascii "=> address: %x, value: %x, response: %x"
        72 65 73 73 3A 20
        25 78 2C 20 76 61
        6C 75 65 3A 20 25
        78 2C 20 72 65 73
        70 6F 6E 73 65 3A
        20 25 78
   090B 0D                 1210 	.db 0x0d
   090C 0A                 1211 	.db 0x0a
   090D 00                 1212 	.db 0x00
                           1213 ;src\flash.c:357: BOOL write_flash_segment (uint8_t slot,uint8_t segment)
                           1214 ;	---------------------------------
                           1215 ; Function write_flash_segment
                           1216 ; ---------------------------------
   090E                    1217 _write_flash_segment::
   090E CDr00r00      [17] 1218 	call	___sdcc_enter_ix
   0911 F5            [11] 1219 	push	af
   0912 F5            [11] 1220 	push	af
                           1221 ;src\flash.c:360: select_slot_40 (slot);
   0913 DD 7E 04      [19] 1222 	ld	a, 4 (ix)
   0916 F5            [11] 1223 	push	af
   0917 33            [ 6] 1224 	inc	sp
   0918 CDr54r06      [17] 1225 	call	_select_slot_40
   091B 33            [ 6] 1226 	inc	sp
                           1227 ;src\flash.c:362: flash_segment[0x1000] = segment;
   091C 21 00 50      [10] 1228 	ld	hl, #(_flash_segment + 0x1000)
   091F DD 7E 05      [19] 1229 	ld	a, 5 (ix)
   0922 77            [ 7] 1230 	ld	(hl), a
                           1231 ;src\flash.c:367: for (i=0;i<(8*1024);i++)
   0923 21 00 00      [10] 1232 	ld	hl, #0x0000
   0926 E3            [19] 1233 	ex	(sp), hl
   0927 DD 36 FE 00   [19] 1234 	ld	-2 (ix), #0x00
   092B DD 36 FF 00   [19] 1235 	ld	-1 (ix), #0x00
   092F                    1236 00109$:
                           1237 ;src\flash.c:370: flash_segment[0x555] = 0xaa;
   092F 21 55 45      [10] 1238 	ld	hl, #(_flash_segment + 0x0555)
   0932 36 AA         [10] 1239 	ld	(hl), #0xaa
                           1240 ;src\flash.c:371: flash_segment[0x2aa] = 0x55;
   0934 21 AA 42      [10] 1241 	ld	hl, #(_flash_segment + 0x02aa)
   0937 36 55         [10] 1242 	ld	(hl), #0x55
                           1243 ;src\flash.c:372: flash_segment[0x555] = 0xa0;
   0939 21 55 45      [10] 1244 	ld	hl, #(_flash_segment + 0x0555)
   093C 36 A0         [10] 1245 	ld	(hl), #0xa0
                           1246 ;src\flash.c:373: flash_segment[i] = file_segment[i];
   093E DD 7E FE      [19] 1247 	ld	a, -2 (ix)
   0941 C6 00         [ 7] 1248 	add	a, #<(_flash_segment)
   0943 4F            [ 4] 1249 	ld	c, a
   0944 DD 7E FF      [19] 1250 	ld	a, -1 (ix)
   0947 CE 40         [ 7] 1251 	adc	a, #>(_flash_segment)
   0949 47            [ 4] 1252 	ld	b, a
   094A 11 00 80      [10] 1253 	ld	de, #_file_segment+0
   094D DD 6E FE      [19] 1254 	ld	l, -2 (ix)
   0950 DD 66 FF      [19] 1255 	ld	h, -1 (ix)
   0953 19            [11] 1256 	add	hl, de
   0954 7E            [ 7] 1257 	ld	a, (hl)
   0955 02            [ 7] 1258 	ld	(bc), a
                           1259 ;src\flash.c:375: if (i>=0x1000) // addresses 0x5000 to 0x5fff
   0956 DD 7E FF      [19] 1260 	ld	a, -1 (ix)
   0959 EE 80         [ 7] 1261 	xor	a, #0x80
   095B D6 90         [ 7] 1262 	sub	a, #0x90
   095D 38 07         [12] 1263 	jr	C,00102$
                           1264 ;src\flash.c:376: flash_segment[0x1000] = segment; // necessary to switch back
   095F 21 00 50      [10] 1265 	ld	hl, #(_flash_segment + 0x1000)
   0962 DD 7E 05      [19] 1266 	ld	a, 5 (ix)
   0965 77            [ 7] 1267 	ld	(hl), a
   0966                    1268 00102$:
                           1269 ;src\flash.c:377: if (!flash_command_okay (i,file_segment[i]))
   0966 01 00 80      [10] 1270 	ld	bc, #_file_segment+0
   0969 DD 6E FE      [19] 1271 	ld	l, -2 (ix)
   096C DD 66 FF      [19] 1272 	ld	h, -1 (ix)
   096F 09            [11] 1273 	add	hl, bc
   0970 7E            [ 7] 1274 	ld	a, (hl)
   0971 F5            [11] 1275 	push	af
   0972 33            [ 6] 1276 	inc	sp
   0973 DD 6E FE      [19] 1277 	ld	l, -2 (ix)
   0976 DD 66 FF      [19] 1278 	ld	h, -1 (ix)
   0979 E5            [11] 1279 	push	hl
   097A CDr88r08      [17] 1280 	call	_flash_command_okay
   097D F1            [10] 1281 	pop	af
   097E 33            [ 6] 1282 	inc	sp
   097F 7D            [ 4] 1283 	ld	a, l
   0980 B7            [ 4] 1284 	or	a, a
   0981 20 17         [12] 1285 	jr	NZ,00110$
                           1286 ;src\flash.c:379: printf ("Error writing byte: %x in segment: %d\r\n",i,segment);
   0983 DD 4E 05      [19] 1287 	ld	c, 5 (ix)
   0986 06 00         [ 7] 1288 	ld	b, #0x00
   0988 C5            [11] 1289 	push	bc
   0989 C1            [10] 1290 	pop	bc
   098A E1            [10] 1291 	pop	hl
   098B E5            [11] 1292 	push	hl
   098C C5            [11] 1293 	push	bc
   098D E5            [11] 1294 	push	hl
   098E 21rD9r09      [10] 1295 	ld	hl, #___str_43
   0991 E5            [11] 1296 	push	hl
   0992 CDr00r00      [17] 1297 	call	_printf
   0995 F1            [10] 1298 	pop	af
   0996 F1            [10] 1299 	pop	af
   0997 F1            [10] 1300 	pop	af
                           1301 ;src\flash.c:380: break;   
   0998 18 1E         [12] 1302 	jr	00105$
   099A                    1303 00110$:
                           1304 ;src\flash.c:367: for (i=0;i<(8*1024);i++)
   099A DD 34 FE      [23] 1305 	inc	-2 (ix)
   099D 20 03         [12] 1306 	jr	NZ,00133$
   099F DD 34 FF      [23] 1307 	inc	-1 (ix)
   09A2                    1308 00133$:
   09A2 DD 7E FE      [19] 1309 	ld	a, -2 (ix)
   09A5 DD 77 FC      [19] 1310 	ld	-4 (ix), a
   09A8 DD 7E FF      [19] 1311 	ld	a, -1 (ix)
   09AB DD 77 FD      [19] 1312 	ld	-3 (ix), a
   09AE DD 7E FF      [19] 1313 	ld	a, -1 (ix)
   09B1 EE 80         [ 7] 1314 	xor	a, #0x80
   09B3 D6 A0         [ 7] 1315 	sub	a, #0xa0
   09B5 DAr2Fr09      [10] 1316 	jp	C, 00109$
   09B8                    1317 00105$:
                           1318 ;src\flash.c:387: select_ramslot_40 ();
   09B8 CDr63r06      [17] 1319 	call	_select_ramslot_40
                           1320 ;src\flash.c:389: if (i<(8*1024))
   09BB DD 7E FD      [19] 1321 	ld	a, -3 (ix)
   09BE EE 80         [ 7] 1322 	xor	a, #0x80
   09C0 D6 A0         [ 7] 1323 	sub	a, #0xa0
   09C2 30 09         [12] 1324 	jr	NC,00107$
                           1325 ;src\flash.c:390: return FALSE;
   09C4 FD 21r01r01   [14] 1326 	ld	iy, #_FALSE
   09C8 FD 6E 00      [19] 1327 	ld	l, 0 (iy)
   09CB 18 07         [12] 1328 	jr	00111$
   09CD                    1329 00107$:
                           1330 ;src\flash.c:392: return TRUE;
   09CD FD 21r00r01   [14] 1331 	ld	iy, #_TRUE
   09D1 FD 6E 00      [19] 1332 	ld	l, 0 (iy)
   09D4                    1333 00111$:
                           1334 ;src\flash.c:393: }
   09D4 DD F9         [10] 1335 	ld	sp, ix
   09D6 DD E1         [14] 1336 	pop	ix
   09D8 C9            [10] 1337 	ret
   09D9                    1338 ___str_43:
   09D9 45 72 72 6F 72 20  1339 	.ascii "Error writing byte: %x in segment: %d"
        77 72 69 74 69 6E
        67 20 62 79 74 65
        3A 20 25 78 20 69
        6E 20 73 65 67 6D
        65 6E 74 3A 20 25
        64
   09FE 0D                 1340 	.db 0x0d
   09FF 0A                 1341 	.db 0x0a
   0A00 00                 1342 	.db 0x00
                           1343 	.area _CODE
                           1344 	.area _INITIALIZER
                           1345 	.area _CABS (ABS)
